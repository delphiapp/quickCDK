unit qCDKserialClasses;
// (C) Witcher,2014.03
interface

uses uCalcTypes,Windows,SysUtils,qCDKclasses;

// константы для бит в DCB.Flags
const sfBinary=$0001; sfParity=$0002; sfOutxCtsFlow=$0004; sfOutxDsrFlow=$0008;
  sfDTRControl=$0030; sfDSRSensitivity=$0040; sfTXContinueOnXOFF=$0080; sfOutX=$0100;
  sfInX=$0200; sfErrorChar=$0400; sfNull=$0800; sfRTSControl=$3000;
  sfAbortOnError=$4000; sfDummy2=$FFFF8000;

const // используются для доступа к свойствам - только для этого модуля
  ndxDCBLength=100; ndxBaudRate=101; ndxFlags=102; ndxwReserved=103;
  ndxXonLim=104; ndxXoffLim=105; ndxByteSize=106; ndxParity=107; ndxStopBits=108;
  ndxXonChar=109; ndxXoffChar=110; ndxErrorChar=111; ndxEofChar=112; ndxEvtChar=113;
  ndxwReserved1=114;
  ndxfBinary=115; ndxfParity=116; ndxfOutxCtsFlow=117; ndxfOutxDsrFlow=118;
  ndxfDtrControl=119; ndxfDsrSensitivity=120; ndxfTXContinueOnXoff=121;
  ndxfOutX=122; ndxfInX=123; ndxfErrorChar=124; ndxfNull=125;
  ndxfRtsControl=126; ndxfAbortOnError=127; ndxfDummy2=128;

{typedef struct _DCB
    DWORD DCBlength;           // sizeof(DCB)
    DWORD BaudRate;            // current baud rate
    DWORD fBinary:1;           // binary mode, no EOF check
    DWORD fParity:1;           // enable parity checking
    DWORD fOutxCtsFlow:1;      // CTS output flow control
    DWORD fOutxDsrFlow:1;      // DSR output flow control
    DWORD fDtrControl:2;       // DTR flow control type
    DWORD fDsrSensitivity:1;   // DSR sensitivity
    DWORD fTXContinueOnXoff:1; // XOFF continues Tx
    DWORD fOutX:1;             // XON/XOFF out flow control
    DWORD fInX:1;              // XON/XOFF in flow control
    DWORD fErrorChar:1;        // enable error replacement
    DWORD fNull:1;             // enable null stripping
    DWORD fRtsControl:2;       // RTS flow control
    DWORD fAbortOnError:1;     // abort reads/writes on error
    DWORD fDummy2:17;          // reserved
    WORD wReserved;            // not currently used
    WORD XonLim;               // transmit XON threshold
    WORD XoffLim;              // transmit XOFF threshold
    BYTE ByteSize;             // number of bits/byte, 4-8
    BYTE Parity;               // 0-4=no,odd,even,mark,space
    BYTE StopBits;             // 0,1,2=1,1.5,2
    char XonChar;              // Tx and Rx XON character
    char XoffChar;             // Tx and Rx XOFF character
    char ErrorChar;            // error replacement character
    char EofChar;              // end of input character
    char EvtChar;              // received event character
    WORD wReserved1;           // reserved; do not use
 DCB;}

{typedef struct _COMMTIMEOUTS
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
 COMMTIMEOUTS,*LPCOMMTIMEOUTS;}

type
  // класс-помощник для типа TDCB, использовать так - TDCBhelper(PDCB).fDtrControl

  bit1=0..1;        // 1битная информация
  bit2=0..3;        // 2битная информация
  bit17=0..131072;  // 17битная информация


  TDCBhelper=class
  private
    function GetAnsiChar(const ndx:integer):AnsiChar;
    function GetBit1(const ndx:integer):bit1;
    function GetBit2(const ndx:integer):bit2;
    function GetBit17(const ndx:integer):bit17;            
    function GetI32(const ndx:integer):LongInt;
    function GetUI8(const ndx:integer):byte;
    function GetUI16(const ndx:integer):word;
    function GetUI32(const ndx:integer):longword;
    procedure SetAnsiChar(const ndx:integer; const c:AnsiChar);
    procedure SetBit1(const ndx:integer; const b1:bit1);
    procedure SetBit2(const ndx:integer; const b2:bit2);
    procedure SetBit17(const ndx:integer; const b17:bit17);
    procedure SetI32(const ndx:integer; const i32:LongInt);
    procedure SetUI8(const ndx:integer; const ui8:byte);
    procedure SetUI16(const ndx:integer; const ui16:word);
    procedure SetUI32(const ndx:integer; const ui32:longword);
  public
    property DCBlength:longword     index ndxDCBLength          read GetUI32      write SetUI32;
    property BaudRate:longword      index ndxBaudRate           read GetUI32      write SetUI32;
    property Flags:LongInt          index ndxFlags              read GetI32       write SetI32;
    property wReserved:word         index ndxwReserved          read GetUI16      write SetUI16;
    property XonLim:word            index ndxXonLim             read GetUI16      write SetUI16;
    property XoffLim:word           index ndxXoffLim            read GetUI16      write SetUI16;
    property ByteSize:byte          index ndxByteSize           read GetUI8       write SetUI8;
    property Parity:byte            index ndxParity             read GetUI8       write SetUI8;
    property StopBits:byte          index ndxStopBits           read GetUI8       write SetUI8;
    property XonChar:AnsiChar       index ndxXonChar            read GetAnsiChar  write SetAnsiChar;
    property XoffChar:AnsiChar      index ndxXoffChar           read GetAnsiChar  write SetAnsiChar;
    property ErrorChar:AnsiChar     index ndxErrorChar          read GetAnsiChar  write SetAnsiChar;
    property EofChar:AnsiChar       index ndxEofChar            read GetAnsiChar  write SetAnsiChar;
    property EvtChar:AnsiChar       index ndxEvtChar            read GetAnsiChar  write SetAnsiChar;
    property wReserved1:word        index ndxwReserved1         read GetUI16      write SetUI16;
    property fBinary:bit1           index ndxfBinary            read GetBit1      write SetBit1;
    property fParity:bit1           index ndxfParity            read GetBit1      write SetBit1;
    property fOutxCtsFlow:bit1      index ndxfOutxCtsFlow       read GetBit1      write SetBit1;
    property fOutxDsrFlow:bit1      index ndxfOutxDsrFlow       read GetBit1      write SetBit1;
    property fDtrControl:bit2       index ndxfDtrControl        read GetBit2      write SetBit2;
    property fDsrSensitivity:bit1   index ndxfDsrSensitivity    read GetBit1      write SetBit1;
    property fTXContinueOnXoff:bit1 index ndxfTXContinueOnXoff  read GetBit1      write SetBit1;
    property fOutX:bit1             index ndxfOutX              read GetBit1      write SetBit1;
    property fInX:bit1              index ndxfInX               read GetBit1      write SetBit1;
    property fErrorChar:bit1        index ndxfErrorChar         read GetBit1      write SetBit1;
    property fNull:bit1             index ndxfNull              read GetBit1      write SetBit1;
    property fRtsControl:bit2       index ndxfRtsControl        read GetBit2      write SetBit2;
    property fAbortOnError:bit1     index ndxfAbortOnError      read GetBit1      write SetBit1;
    property fDummy2:bit17          index ndxfDummy2            read GetBit17     write SetBit17;
  end;

  TSerialMode=class(TCommunicationMode)
  private
    frCommState:TDCB;
  protected
    function DoGetAsText:AString; override;
    function DoGetStateInfo:AnsiString; override;
    procedure DoSetAsText(const s:AString); override;

    procedure DoSetAString(const ndx:integer; const s:AString); override;  // все строковые свойства

    function GetCommState:TDCB; virtual;
    procedure SetCommState(const dcb:TDCB); virtual;
  public
    class function GetClassCaption:AString; override;       // описание класса
    class function GetClassDescription:AString; override;   // подробное описание класса

    procedure SetDefault; override;
    // состояние последовательного порта
    property CommState:TDCB read GetCommState write SetCommState;
  end;

  TSerialSocket=class(TCommunicationSocket)
  protected
    function DoGetAsText:AString; override;
    function DoGetStateInfo:AnsiString; override;
    procedure DoSetAsText(const s:AString); override;

    function DoGetUInt(const ndx:integer):UInt64; override;               // все беззнаковые целые свойстваC

    function DoCreateHandle:THandle; override;         // создание подключения к коммукационному ресурсу
    procedure DoDestroyHandle; override;               // освобождение подключения к коммукационному ресурсу
  protected
    function GetCommModemStatus:longword; virtual;
    function GetCommProperties:TCommProp; virtual;
    function GetCommState:TDCB; virtual;
    function GetHandleInformation:longword; virtual;
    procedure SetCommState(const dcb:TDCB); virtual;
    procedure SetHandleInformation(const lw:longword); virtual;    
  public
    //======== некоторые свойства, напрямую работающие с коммуникационным ресурсом
    property CommHandleInformation:longword read GetHandleInformation write SetHandleInformation;
    property CommModemStatus:longword read GetCommModemStatus;
    property CommProperties:TCommProp read GetCommProperties;
    property CommState:TDCB read GetCommState write SetCommState;
  public
    class function GetClassCaption:AString; override;       // описание класса
    class function GetClassDescription:AString; override;   // подробное описание класса

    // конструктор нужен с именем для сокета - будем синглтоны реализовывать,
    // т.е. один объект на один именнованный сокет (физический ком.порт и др.)
    constructor Create(sCommName:AnsiString; bOverlapped:boolean=false); override;
    procedure SetDefault; override; // параметры по умолчанию    
    //======== все функции, реализующие обращение к одноименным Windows-функциям (без знака подчёркивания)
    // убирает аппаратный разрыв линии коммуникационного ресурса
    function _ClearCommBreak:boolean;
    // возвращает в параметре lwErrors ошибки, зарегистрированные в коммуникационном ресурсе, а также небольшую статистику
    // (например, количество принятых байт и количество байт в буфере ещё не переданных) в параметре prStatistics, если он не равен nil
    function _ClearCommError(var lwErrors:longword; const prStatistics:PComStat):boolean;
    // выполняет выбранную операцию с коммуникационным ресурсом (CLRDTR,CLRRTS,SETDTR,SETRTS,SETXOFF,SETXON,SETBREAK,CLRBREAK)
    function _EscapeCommFunction(const lwFunction:longword):boolean;
    // возвращает состояние управляющих регистров модема
    function _GetCommModemStatus(var lwModemStatus:longword):boolean;
    // возвращает информацию о свойствах коммуникационного ресурса
    function _GetCommProperties(var rCommProperties:TCommProp):boolean;
    // возвращает настройки коммуникационного ресурса
    function _GetCommState(var dcb:TDCB):boolean;
    // возвращает набор битовых флагов, определяющих состояние ресурса
    function _GetHandleInformation(var lwHandleFlags:longword):boolean;
    // устанавливает аппаратный разрыв линии коммуникационного ресурса
    function _SetCommBreak:boolean;
    // устанавливает настройки выбранного коммуникационного ресурса
    function _SetCommState(const dcb:TDCB):boolean;
    // устанавливает флаги для выбранного ресурса
    function _SetHandleInformation(const lwHandleMask,lwHandleFlags:longword):boolean;
    // прерывает все операции с коммуникационным ресурсом и немедленно посылает переданный ей символ в коммуникационный ресурс
    function _TransmitCommChar(const c:AnsiChar):boolean;
  end;

  TSerialConnection=class(TCommunicationConnection)
  protected
    function GetSerialMode:TSerialMode; virtual;
    function GetSerialSocket:TSerialSocket; virtual;
    procedure SetSerialMode(const sm:TSerialMode); virtual;
  public
    class function GetClassCaption:AString; override;       // описание класса
    class function GetClassDescription:AString; override;   // подробное описание класса

    constructor Create; override;
    procedure SetDefault; override;

    property SerialMode:TSerialMode read GetSerialMode write SetSerialMode;
    property SerialSocket:TSerialSocket read GetSerialSocket;
  end;

  procedure SetDefaultSerialMode(sm:TSerialMode);    


implementation

uses StrUtils,SynCommons,uNamedSpace;

{$BOOLEVAL OFF}
{$RANGECHECKS OFF}
{$OVERFLOWCHECKS OFF}

var gfs:TFormatSettings;

const lwBufferSize=4096;

  sSerialSocketIcon=
    'FFD8FFE000104A46494600010101006000600000FFDB0043000201010201010202020202020202030503030303030604040305070607070706070708090B0908080A0807070A0D0A0A0B0C0C0C0C07090E0F0D'+
    '0C0E0B0C0C0CFFDB004301020202030303060303060C0807080C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0CFFC0001108008000'+
    '8003012200021101031101FFC4001F0000010501010101010100000000000000000102030405060708090A0BFFC400B5100002010303020403050504040000017D010203000411051221314106135161072271'+
    '14328191A1082342B1C11552D1F02433627282090A161718191A25262728292A3435363738393A434445464748494A535455565758595A636465666768696A737475767778797A838485868788898A92939495'+
    '969798999AA2A3A4A5A6A7A8A9AAB2B3B4B5B6B7B8B9BAC2C3C4C5C6C7C8C9CAD2D3D4D5D6D7D8D9DAE1E2E3E4E5E6E7E8E9EAF1F2F3F4F5F6F7F8F9FAFFC4001F010003010101010101010101000000000000'+
    '0102030405060708090A0BFFC400B51100020102040403040705040400010277000102031104052131061241510761711322328108144291A1B1C109233352F0156272D10A162434E125F11718191A26272829'+
    '2A35363738393A434445464748494A535455565758595A636465666768696A737475767778797A82838485868788898A92939495969798999AA2A3A4A5A6A7A8A9AAB2B3B4B5B6B7B8B9BAC2C3C4C5C6C7C8C9'+
    'CAD2D3D4D5D6D7D8D9DAE2E3E4E5E6E7E8E9EAF2F3F4F5F6F7F8F9FAFFDA000C03010002110311003F00FDFCA28A2800A28A2800A28A2800A28AF96BFE0A6DFF00052BD0FF00612F85D749A6DCE93AAFC47BB4'+
    '89F4BD16E0492208DA55579A7F2C831A05DE572CA5D970B9C311AD1A33AB354E9ABB66756AC69C5CE6EC91F52D04E3F1AFC71F87BFF07017C4ED53C5D0EA9AA59F85DB40B26F3750D352CDA3710804BED93733'+
    '0214641C1E8320F43B1E17FDB83E327FC155FF006B0D03C41F0F65F14F807E14782AF84DA369F653F917DE24BA008325D30250C782C0A313122125B71CE7D8C470FE268253ACD28DAF7BDFE5EA79787CEE8576'+
    'E1493E64F66ADF3F43F5DA8AA9A0FDB7FB0ECBFB4C5B0D47C84FB50B762D089768DFB090095DD9C64038C7156EBC23D80A28A2800A28A2800A28A2800A28A2800A28AF84FF00E0A39FF05516F877AB5F7C31F8'+
    '49710EA3E39C9B6D5B5A8C2CD6DE1BCF0D1A75596EC7F74E5633F78123657461B0D52BCF929AD4C6BE221461CF33B2FF008288FF00C14D6CBF668F37C13E0816BAF7C4CBC8C6E43FBCB5F0FA3AE565B8C1F9A5'+
    '208290E72410CD852BBFF357C69E0DB5D5F46D6757F8817B75AFEBBE24669AEEE6E65CDCCB291C485BB14C0C28F95000000062ADE9BA5D97C20D32E356D5EE25D435FBF77B99A6B898CD34D3392CD2C923125D'+
    'CB124B1E724F53935F3EFC5BF8C5AAFC4DF138D2B4A59EEEEAEE5F2556152CCCC4FDD41FE7AFB57DCE5F97C30D1B4357D59F218CC64F112BCB6EC79EFDBA6F875E333269F7293FD924F91B194953FBAC3B8EC4'+
    '7D707A1AFD4CFF008251FED0D63A96956573E1616DA7BE931AD9DE68F1A2A2DBAB303B76A81F2B11957C73B40E36E07CBFF08BF606D1EDFC0D3C7E288E4BED7F548882D6F2B634F2790131F7DC776208CE4631'+
    'F7BC72DDFC7BFF0004F7F8FD65A9593496F776EDBEDA5746FB2EB16D9F991D7BA9EE33953820F435E94F92AC5D29ABAF33C9C452A8D73D1972C9755E5DCF5EFF0082F0FF00C1C2377F1406A9F073E0BEA379A4'+
    'F876166B3F12EBF0398EE356915B6C9696EC395B60410F2020CB82A3F779F33ADFF8204FED2DA17C2CF820B7DF0CF5EF13EB5776662FF84D7C0BABEA4922348570D7162A42A40EDCB46C084902F95290C1658B'+
    'F26BF6CEF8410786FE215F78B3C3CAEFE13F12DDC9730424967D166762E6CE4F50BCF96FC074C1E183AAE9FEC2B73E34F851F1934CF187856FAE34CD46C5B04E0B453C2C46F8655E03A38FE13E808C10A47C0D'+
    '7ADEC66F0EE368AE9D7D6E7D83C354AF4235E9CFF79BA7D3D1AEC7F5FF00F0DBE2468BF173C1561E21F0FDEA5FE97A8A168A40A5191812AF1BA300C922306564601959594804115B95F9A9FB16FED8977A2C4B'+
    'E2BD16C67F2750D87C4FE190E3370C1427DA2DB385FB4280006C812AAAC7260AC6F17E89F807C7DA3FC50F07D86BFA0DF43A9693A947E6C13C7919E4865607055D5815646019594A900822B8F1187F676945DE'+
    '2FA9D597E60B109C26B9671DD7EABC8D8A28A2B98F4428A28A0028A2BF3CFF00E0B3BFB4CFC428FC45A2FC20F0634FA1F87FC51A48D475BD72D6422EB5185E5962FB042C31E526232D2B83B99644505577EFE9'+
    'C2616588AAA943A98627111A34DCE464FF00C145BFE0AB57DE2ED6F50F857F03F5176991DACF5FF17D9BE45B9C957B4B071C34D9C879C1C47C843BF2F1FC83A5695A37ECF9E1952DE4C9A932961CE7667AB127'+
    'A9C9E49A1068BFB3B78405BDBADB8BE5876F180B02E3A7B01D09EFD3A715F3A78DBC79AE7C70F19A68FA2C77179717B2EC554C932B75E7FBAA3A9271819E78E7EF70582A7421C90DBABEACF8EC562E75E5CD3F'+
    'B89FE247C50D63E3078B1348D192E2F2EAF64F255621F3CCC7F857D077CF18C678AFA83F653FD936DBE11DA477772916A1E28BB4C4B3A8F92CD4F58E3F41FDE6EA7A0E3ADDFD95FF00650B5F83D62AC512FF00'+
    'C49789B6EAEC8F96DD7A98E3CF44F53FC5F963E8ED1F4283C3762C4B00554B4B2B71C0E4F5E82B4AD88515CB131A7072DC8BC39E198F4483FBD3B01BE43D7F03583F1DBE03E89FB427806E342D6A2C6ECBDA5D'+
    '2A8F36CA503E5917FA8E8464576563730EA5670DCDBCB1DC5BCE8248A58983C7221190CAC3820820E471CD5848F23DFF00CFFF005ABCFE777BF53B3915AC7E40FC7DF80BAB7C17F175FF00857C49688F1C89FB'+
    'B72BBA0BE849F92543DC6467D548EC471DAFEC35F09347F1BEBADA441B62D42C5448D6CC4079E3C81E627F7B92037F74E3A6467F433F690FD9C344FDA47C032E91AA2AC37906E92C2FD50192CA523A8E994381'+
    'B97A103B1008FCD2D6FC3BE2EFD90BE3BDB3CF1BE9BE23F0E5C89EDA703747729C80CA4E03C522E410782090464102B1583A58EA767A4D6CFF00CFC8BC2E2E7859778BDCFD64F837FB3AE9BE09F03BEADAB4EF'+
    'A4D9DB4788A58F89338E880F0C4FA11F37D297F669FDAF349F833E38D46FF4DD5ADEEB47BCBA117887438E5049980005E5BA6789826DDDB789554024B2A91F2B7C7CFF0082846B9FB467C30D1EE345B4FECAB4'+
    'B8416B7663E2DB4B971F3A13D8B005813C95E99E73CFFECADE16F10FED01F106D7E1CFC31B36BCBC90FDA356D56604436684E1EE6E1C676AE7EEA8393C00093C78380C1545CF1C42B416F7FD0EECC7D9CE74EB'+
    '61DFEF3A5BAAECFC8FDD6D135AB4F11E916BA8585C4575657B12CD04D19CACA8C32AC0FA106AD572DF047E17C3F057E12F87FC2B05E4FA8A6876696C6EA6003DC301967207032C49C0E8081DABA9AF0E692935'+
    '1D8F7E2DB49CB70A28AF9FBF69FF00DA60D90B8F0D786A7DF72731DF5E46E54458E1A3561D08FE271D3EE8F9892BDF95E575F1F5D50A0BD5F44BBB38B32CCA8E0A8BAD59FA2EADF6441FB53FED426C05C7863C'+
    '33379972DBA2BDBC8DF1E5E3868D1874C7466EDC81F364AF82CDE1183C6FF0CEEB4BF115EA59E9C55DB4AD4258F74BA65CB75785073E4B606F8C70400C30C140B7A4F8720D22CBFB475405D1C6F8E03846B8DB'+
    'FC473C24631DFA01935E29F183E396BDF153C756BE0EF0259DE6BBE22D458C56D069C007006413193C4312FF0014EFD3191CF2BFB165F9161E187FA8E1D7BAB594DF75D6FD2DF7257BDF53F26C767788962163'+
    '2BBF79E9182D77B696EB7FBDFDC7C5BFB577C0BF8A9E0EF8BB6DE16D7FC3BAA5936B17461D32F763358EB6383E6DBCE3F77247B595895625430C8078AFA27F65AFD956C7E10692B1C0B1DE6B97483EDB7E5701'+
    '475F2D3FBA80FE2C793CE2BD2BF6DEFD9A3C5FFB29FC23FD9EFC43E31D5E1D6AC3C19AA6A9A7EAB25BABBDB684BA8A466040EE4BB451B248A647C7DE45FEE83DB7C3B821FF00845E0961D8C66CB33039DDC903'+
    'A75038AF93AB888F2B54A6A6936AEAF6766D5F5DAEACCFAB8529BE5F691706D26D3DD5D2BAF9004D37E1FF00876E6EEEEE6DECECACE332DCDD4EC234451D4B13C003DFF99AF867F6A4FDB3355FDA5757BAF077'+
    '82266D3FC3AA8FE63C8E61B8D6B6FF000FAAA1E309C16072DD700FDB7BE2878C7E2C7C6FBCF00EAEDFF08968D624B69D6929FDDEA87FE594B248386DE07CBFC2BD3EF673E3FA46992F8BACD3419A35D33C65E1'+
    'D056C1F1E59BB45C9F20FF00B63AA1EF5787A097BF3DC739FD95B1EC9FB037ED9D27C27D5A2F03F8BEE1A3F0FCF2ECB2BA9F83A54A49F91B3FF2C8B7FDF2DCF4271FA051A0700820AB7208E87F1AFC95D4F4B5'+
    'F8BBA5CF750442DBC55A6A15BDB5DBB4DEAAF05D47FCF418E57A9C66BE97FF0082777EDBBB1ECFE1E78C6EF0DC5BE8B7F33F43D16D6427A8EC84FB2F615189C3DEF520BD4BA352CF959F6BA2720F4FE75E61FB'+
    '547ECAFA37ED3BE046B0BA54B4D6ACD59F4DD40265ADD88C946EED1B6002BF88C115EAC2303F0EE6A1D4F518348B269EE2411C6833D339FC3BF38AF3E33946578EE74B49AD763F2534CD4BC49FB277C51D5745'+
    'D734B867471F63D6747BB1BAD75583218738FA34722F2A46463A57DE9FB0C7ED5BE15FD99ED62F117C37D320B7F0C6AEEA35BD27793348C3AAC8CC59BCD8F2761248C1E3E56AF0CFDAF24B0FDACBC7D3D9E850'+
    '5B23F87CBFDBB5D933E5424210966AC3FD6B1600B75D9D47715F31783BC6DAD7C16F165C46BE644D9F26F6D18E52651FA647553EE3A83CED98E01E2E95E2ED3EDD1FE8180C6AA153DE578FE28FD9EFDBC7FE0B'+
    'A7E04FD9BBC03E1987E1D436FF00123E2178CBCA96C3428A6282C212D876BB2B9689F86554C6E2464FCA327EC4F81BF1324F8C5F09340F134FA55C68575ABD9A4F71A7CEFE63D94A47CF16FC0DE15B23760671'+
    'D01E07F3EFFB0F6B9F0DFE03FED016BF10BC43A46A5E345BCD544B2C33C803E9F6EC32C5493992556208070084C6E1BB23FA1AF877E33D17E21F81749D6FC3B776D7DA1EA76B1CF633DBF11BC4546DC0ED81C6'+
    '08041041008C57C96363429A8D1A49B92F89BD35ED6F23E930AEACDBA951E8F65E5DEFE6713FB57F8BF5AF097C3843A4335B8BE9FECD7374870F6E8549E0FF000EE231BB93CE00DC457CCF6BA25A784B4FFB76'+
    'A417CC5C6C89C7423A16033C8ECBCEDFAF4FB8352D360D5EC65B6B98D668265DAE8DDFFC0FB8E41AF9B3E24FFC13BE4F8A9E3789352F195EC5E0ADC5EE74EB580C37F789C016C6E43FEEE2E0EE2881DF24161D'+
    '6BEA78673BC2E1E83C3D77ECD5EEDA4DB97969D7B6CBCD6ACF96E23C9B1588AEABD05CFD12BA4A3E7AF4EFD4F9722B7F1CFEDBDE39BAF0CFC3B8561D2EDE5116AFE24B953FD9F618E76823FD74A0636C484852'+
    'CA49FE3AFB8FF64DFD8D7C23FB22784A4B4D0A17BED6F500ADAAEB978035EEA4E07F137F0C63F8635F9547A9C93E87E04F0168BF0C3C2765A1787B4BB2D1B47D363115B5A5A44238A251E80773D493C9249393'+
    '5ACCC114924003924F6AE3CFB8AEB63A1F55C3AF6743F97ACBCE4FAF92D979BD4ECC8F862960A7F59AEFDA567D7A47CA2BA7AEEFC968637C46F875A1FC5BF036A9E1AF1269B6BAC685ACDBB5B5ED9DC2EE8E68'+
    'CF63DC11C10460820104100D7E393FC60F0CFEC43FB56EBBF08ADBC63078C3C09677223D3754DE5DF429589FF41B8931B1CC670A5D72A3A1DA772A7ACFFC1527FE0B0B73E2DD4F51F84FF04B523825AD75DF15'+
    '5A3E70390D6F66C3F26981F643FC55F2FF00ECF9FB1F5A6BBA2490EAF6C25B6B98F13F999C807AB67AEFEE0E72A7A1A793E0AA52A6E759D94B68FEA699AE2E9CE4A34D5DAEBFA1F46FED51FB2EE91FB537C3C4'+
    '8D1E1B5D72C94CBA46A43FE59B1C1D8E4726362067B83823241AF81F5BF0B6A5E23D6A7F0DEB9149A37C47F0D379703C8DB1F500BCAA6EE85F1828D9C302307A57D5DF07FE2EDF7ECA3F1020F01F8B3509352F'+
    '08DF3F97A06B729CB5BF616D39E8081C03C03C76E17B4FDB4BF63FB7FDA4BC2B16B5A134369E34D223DFA7DD236C178A39103B0EC4F2ADFC24F5C126BD7A739529284B67B33CA69545CD1DD1F0178A3C5316B5'+
    '6B178923B85D1BC67A4CEB0DFC0331B5E9CE04A83FBE31875EE067BD7D33FB20FEC0971F1135E4F1FF00C48D3E2B482E996E6D343588C42738044B327F0A13CF97D5893B801956ED7F640FD81E6D0F598FC7BF'+
    '12D23D4FC5770C27B7B1902B4762C31B649768DAD370318F9548CFCCDCAFD3FE23F125AF8574E6B9B9750141D8B900B1E7A7A7D4D2C462AFEE52FEBD0AA7495B9A63B58D5EDFC3B60D7372C11173B40EADEC3F'+
    'C6BE41F8E3FB406A9FB41F88EF7C3DE19BE7D37C3760E61D5F5B84F0BEB6F6C7A3C841C17E801EA38CD1F8DBF1D753FDA4B5DBBD2343BE934EF08D9B98353D5E1383747F8ADAD4F7C8FBCFE87D31BBCAFE24FC'+
    '52D37C09E1C8B4AD2922B1D3EC57CB8628CE02F07A67AB1E4963C939AAA18750D5EE455ABCCECB62DFC42F893A5FC3CF0C43A468F1C761A6D8AEC8A3539FA92DD5DCF52C73D7B0AF96FE217C554D575EF3A44D'+
    'E73B3803711CF00F73557E22FC49BBF156AA2DE0124D34EDE545144A599D89C050072C4923A75E2BF5D3FE08C9FF0004324F8532697F173E35E971CFE2DCADDE83E19B850D1E89FC497172BD1AE7A158CF1110'+
    '09FDE63CBBC5E3296129F3D4DFA2EACBC361675E7C91FBCF21FD957FE0823F14FE297C2BD0BC59AAF89342F0847E23B48EFD349BCB7B937D668E328B326D508FB704AE7233838208AFD67FD913F66CB1FD92BF'+
    '67FD07C0B637F71AA8D251DA7BD986D6BA9A472F2385C908BB9885507800724E49F4BA2BE171B9956C55BDA5ACBC97E7D7E67D5E13014B0F7F677D7CFF00AB0514515C076857C3DFF05E5F1E78EBC27FB2BE89'+
    'A6783EFEEB4BD3FC55ACFF00656B9716D9595EDDA091C43B872AAE5086C11B80DA78620FDC35F27FFC149FF68AF075BFC36BEF04DD4306B37F3BC72CD86F974D6470CAC08FF96BC6001D33CFA1F5F22C157C4E'+
    '3614E8439DDF6F2EECF2F39C651C3612752BCF957EBD8FCD0FD973F6598F4F862B9B8882841B999947C9D3FF001EFE55EEFE2AF1559F83747FB25A6D8E38970483C9FF001AA579F1374983C2513E912C6D6854'+
    'E594F46EE0E3B83D6BC03E2FFC6011ACAC65C0504F07A57DF51C1D59D4E5A8ACD7467C456C65350E683BA655FDA03E2059789F46BAB2BF093DAC9D54FF000B7623BEEF4C735DC7EC51FB55EB9E00F0BE91A4F8'+
    'F2D3558FC2BAB4F259F87BC45770B25BDD3C580D0195BE5665C81907D41E78AEA3FE09C7FF0004C0D6FF006D7D7ADBC6FE3B8EF349F86B6D2EEB787262B8D7C83CAC67AAC39E1A4182795439DCC9FAC7E3BFD9'+
    '8BC01F133E0DA7C3ED73C27A35F783A28520874B300486D950610C5B706365ECC841193CF35E7E799B612835858AE692DDAE9E5E6CF4326CB715593C449F2C5EC9F5F3F247C3FABFC58D174AD3A59D67131442'+
    'C54A940A319CB16C003D49FAD7C7BF18FE356A3FB4FEB5776561793D8F822D6430EA1A944DB5F5423836D6E4F48FA867EFF4E1BE9CFDB0BFE0981F06FE097C2EF106A9E1ED6BC73ADAF87E7852EFC3B3788CCD'+
    'A76971C8DF7DE35412EDCEC1CC98F986735F047C5CF8CB6BE1ED2458D8A456B676E9E54304236A2A0E3000E8BFFD7E4D4607D9CA3CF4D3F9AB3EFF0091789538CB964D7C8B5F153E2DD8F84F428F4ED3921B4B'+
    '1B54F261821F9405F403F524F24E4935F3278AFC5FAAFC46F145B697A5DBDDEA5A8EA53ADADA5ADA46D2CB7323B6D58E34504B33310000093C7B53EE2F3C43F1B7C7D61E1EF0F69F7FAE6B7AD5C2DA5958D9C4'+
    '649AEA563808AA3B75F61D4F00D7EE77FC11FF00FE08BFA3FEC35A35B78EBC771D96BDF176FE0FF59C4B6DE1A8DD70D05B9E8D290487987625530BB8BE98EC753C1C39A7ACBA2EFF00F00BC1E0E78895A3B756'+
    '725FF046CFF8221D9FECAD069DF13FE2BD9DA6A7F1366413E9BA5B6D96DBC2A0F20F757BBE7971F2C6490992379FD25A28AF81C562AA622A3A955DDFF5B1F5F430F0A30E4A6B40A28A2B9CD828A65C5C476903'+
    'CB2BA471C60B3331C2A81DC9AF907F6D0FDBA62D334DBCD0FC3973E55B8529757AA70D20E9B53D076CF539FCFD7C9724C4E67885430EBD5F45FD763CACDF38C3E5D45D6AEFD17566DFEDA3FB785AFC38D36EF4'+
    '2F0BDDA1BF0AD1DD6A084116DD8A45D8BF5CB745EDCF2BF96BF133E256BDF18FC796DE1FF0EDB5EEB5AE6B17021B6B6814CD2CCED9C1F76EF93D3924E39AD8D5F53F15FED31F142D3C1DE0BD3AE359D77537C4'+
    '50C7F7205EF2C8DD1517A963803D79AFD41FF827D7FC1377C39FB15786FF00B4AEDA0D7FE206A516DD435974C8801E5A0B7C8CA47EADC33919381B557F71956CAB8330295B9EBCD5D47ABFEF4BB45745F25D59'+
    'F8DAA599F16E31EBC9462F59745E51EF27D7EF7D11E35FB297FC114349F0D7C0FBE8FE21EADA93F8D3C40AB2B369D75887442070AA0E5267E70ECC08E005C6371CDF851FF0411D2B46F8D306B7E39F19FF00C2'+
    '5FE18D3A5F3ADF478B4E6B4FB630E544EFE6B1D83BAAFDEF551907F43A8AFC6B19C599A626BD4C454ABEF4F7B25A74D3B69A69F9EA7EB384E17CB70D469D0A74F486D76F5F5EFAF720D334CB6D174DB7B3B382'+
    '1B5B4B58D618618502471228C2AAA8E00000000E062BC43F6A9FDA9D3E1FDB5C681E1FB846D69976DD5DAFCEBA683D001FC5311D17B753577F6A5FDA5D3E1B69D2E89A24E875EB850B24CA378D3D1BA1C7F14A'+
    'DFC29FF02380067E5CF0E78566D76792FAFA478E08D9A492577DE5589CB7CC7EFC84F56F5E98C0AF7B8578661512CC31EBDCFB317F6BCDF9765D7D37F1789B88A54DBC0E05FBFF0069FF002F92F3EEFA7AECCF'+
    '046957D73ABBDEB1458C2C8B75F691E6C3246FC4B1CA1B224DE321C3020838C1E83E27FDB13FE0911E3AF8AFF11A7D63E0169F1F8BBC37A85C2A5D690FA9416D7BE1A9DCF11BF9F226FB661968E4049DA18372'+
    '9B9FEA8F8B5F1A2F757D52D7C1BE04D3E7D4B54BD905BDB5BDAC5E6BBB6339DA08DCC0738242A80599910161F4F7FC13D7F616D5BF6699B51F1678AB5996E7C59E23B610DD585BCA1EDAD537070247C6669811'+
    'F786D45DCC157E6676FA9E28AD4E861BEB9566A1536846D77257EABB6F677D1E9D75F9BE198D5A988FAAD08B953FB72D945DBA3EFDD75F969C87FC1267FE0907E1AFF827A783D35FD6BEC9E23F8ADABDB84D47'+
    '56D998B4C4239B5B4C805507469301A4239C2E147DA14515F8DD7AF3AD3752A3BB67EB3468C6941420B40A28A2B1350A28A2803E7FFF00828BF8F350F87DF0423BCB46923B47BB58EEE45242C6A51B6EFF00F6'+
    '4B63AF19C57E64F873C21E36FDB43E2BA784BC1568D7372C4497977367ECDA5424EDF3A77C71DF0B8258F001C71FB5BAC68B67E21D326B2BFB5B7BDB3B95293413C6248E553D4329E08F63597E05F861E1AF85'+
    'F632DAF86BC3DA2787ADA77F3258B4DB18AD1246FEF308D4027DCD7E83C37C711C9F012A14A8A955BBB49BD35EAD756BD4F85E20E0E9E6B8E8D7A95AD4B4BC52D74E89F4BF5D0F36FD8C3F621F097EC5BE026D'+
    '3B448CEA1AEEA015F57D6EE100BAD4641CE3BEC8C1276C60E0772492C7D9A8A2BE231B8EAF8CAF2C4E264E5393BB6FFAFB96C9688FB1C1E0E86128C70F868A8C23A24BFAFBDEEC2A3BC4924B4956260B23290A'+
    '48C8071C7152515CA743573E0FBCF015EE9FAFEA577E27792D5ECE590DDCB3B9621F82C771C6E2DC12FDC600C28CB61D9681E2CFDA8F5FFF00847BC15686C745B760971A84998E1B74EEECC39E4636A81BDB2B'+
    '80143B27DB3F15FE02786BE33410A6B964D3340C1D5A391A32C474DC01C381E8C0E335BFE0DF05E97F0FFC3F0697A3D94361636C3091463A92725989E5989E4B31249249249CD7E89538E17B153853FDEAD127'+
    'F047CD6BAFCED6F33E069F05CBDB38CE7FBBDDB5F14BC9F6F95CF3FF00D997F645F0B7ECC5A2B8D2E1FB7EBB79184BED5EE107DA2E0672517FE79C59E422F53F331772CE7D528A2BE0F178BAD89AAEBE224E52'+
    '7BB7FD7E1D0FB7C2E168E1E92A3422A315B24145145739D014514500145145007FFFD9';

  sSerialConnectonIcon='FFD8FFE000104A46494600010101006000600000FFE100524578696600004D4D002A000000080004030200020000000C0000003E51100001000000010100000051110004000000010000000051120004000000'+
    '0100000000000000004943432050726F66696C6500FFE20C284943435F50524F46494C4500010100000C186170706C020000006D6E74725247422058595A2007D5000600180014000A0034616373704150504C'+
    '0000000000000000000000000000000000000000000000000000F6D6000100000000D32D6170706C56CB33411398071DF14DE1145CE7E7C0000000000000000000000000000000000000000000000000000000'+
    '000000000D7258595A00000120000000146758595A00000134000000146258595A0000014800000014777470740000015C0000001463686164000001700000002C725452430000019C0000000E675452430000'+
    '01AC0000000E62545243000001BC0000000E76636774000001CC000003126E64696E000004E00000063E6465736300000B200000009F6370727400000BC00000002D6D6D6F6400000BF00000002858595A2000'+
    '00000000004F38000029CA000002D958595A20000000000000806E0000C0A6000018FE58595A200000000000002730000015AB0000B74E58595A20000000000000F35200010000000116CF7366333200000000'+
    '00010C42000005DEFFFFF326000007920000FD91FFFFFBA2FFFFFDA3000003DC0000C06C63757276000000000000000101CD000063757276000000000000000101CD000063757276000000000000000101CD00'+
    '00766367740000000000000000000301000001000406080A0C0E101113151618191B1C1E1F212224252628292A2C2D2E2F31323334363738393A3B3C3E3F404142434445464748494A4B4C4D4E4F5051525354'+
    '55565758595A5B5C5D5D5E5F606162636465666768696A6B6B6C6D6E6F70717273747576777878797A7B7C7D7E7F80818283838485868788898A8B8C8C8D8E8F90919293949596979899999A9B9C9D9E9FA0A1'+
    'A2A3A4A4A5A6A7A8A9AAABABACADAEAFB0B1B2B2B3B4B5B6B7B8B8B9BABBBCBDBDBEBFC0C1C1C2C3C4C5C6C6C7C8C9CACACBCCCDCDCECFCFD0D1D2D2D3D4D4D5D6D6D7D8D9D9DADBDBDCDDDEDEDFE0E1E1E2E3'+
    'E4E5E5E6E7E8E9EAEBECEDEEEFF0F1F2F4F5F6F7F9FAFBFDFEFF00030506080A0B0D0E101113141517181A1B1C1E1F20212324252628292A2B2C2E2F3031323335363738393A3B3C3D3E3F4142434445464748'+
    '494A4B4C4D4E4F50515253545556575858595A5B5C5D5E5F60616263646565666768696A6B6C6D6E6F6F70717273747576767778797A7B7C7D7D7E7F8081828283848586878788898A8B8C8D8E8F9091929293'+
    '9495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C1C1C2C3C4C5C5C6C7C8C8C9CACBCBCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D9D9DA'+
    'DBDCDDDEDEDFE0E1E2E3E4E5E6E7E7E8E9EAECEDEEEFF0F1F3F4F5F7F8FAFCFEFF000204050607090A0B0C0E0F10111214151617181A1B1C1D1E1F2022232425262728292A2B2C2E2F30313233343536373839'+
    '3A3B3C3D3E3E3F40414243444546474849494A4B4C4D4D4E4F5051525253545556565758595A5A5B5C5D5E5E5F606161626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7B7C7D'+
    '7E7E7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBEBFC0C1C2C3C4C5C6C7C8'+
    'C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DBDCDDDEE0E1E2E4E5E7E8EAECEDEFF1F3F5F7F9FBFEFF00006E64696E00000000000006360000A18600005604000059B700008F1B00002728000014180000500D00'+
    '005439000233330002333300023333000301000002000000000001000200030006000B00100016001D0025002E00370042004D0059006500810090009F00B000C100E500F8010B0135014B0161019001A801C1'+
    '01F5020F022B02640281029F02DC031C033D035F03A303EA040F0434047F04CD051D0546057005C4061B067406A106CF072D078C07EE085208B809200954098A09F60A640AD50B470BBC0C320CAB0D260DA20E'+
    '210EA10F240FA9102F10B8114311CF125D12EE1380141514AB154315DD1679171717B6185818FC19A11A481B9C1C491CF81DA81E5B1F0F1FC5207D213721F222B0236F243024F3267E2746281028DC29A92A79'+
    '2B4A2C1C2CF12DC72EA02F793055321232F333D534B935A036873771385C39493A383B283D0E3E033EFB3FF440EE41EA42E843E844E946F147F748FF4A094B144C214D304E404F525066517B529253AB55E156'+
    'FF581E593F5A615B855CAB5DD25EFB6025615263AF64E066126747687C69B46AED6D646EA26FE17122726573A974EF777F78C97A157B637CB27E0380A981FF835684AF860988C28A218B818CE38FAC9112927B'+
    '93E49550982B999B9B0C9C7F9F6AA0E1A25AA551A6CFA9CEAB51ACD4AFE0B169B47EB60BB929BABABC4DBF77C10EC441C5DDC77BCABACC5BCDFFD14AD2F1D49BD645D99FDB4EDCFFDEB1E064E219E3D0E588E7'+
    '41E8FCEAB9EC76EE36EF16EFF7F1B9F37CF542F625F708F8D0FA9AFB7FFC65FE31FFFF00000000000000020006000B0012001B00250030003C004A005A006B007D009200A800BE00D600F0010C012A01480167'+
    '018901AD01D201F90224024E027902A602D70309033C036F03A703E0041B0457049504D5051B055E05A605EE0638068606D60722077507CA0821087D08DB0937099509FB0A5C0AC50B2B0B960C050C750CE70D'+
    '5B0DD10E480EC10F3D0FC1104010C8114911D5125912E81379140B14A0154315DF168A172E17D71885193719E91A9D1B571C0F1CC31D811E3E1EFC1FBE20862151221F22E723B8248F2564263D271027ED28D1'+
    '29AC2A972B812C692D5C2E4A2F3E303831343232333134373540364D3760387339863A993BB43CD93DFD3F204048417442A043D34516464D478748BC49E04B034C194D484E694F8C50AA51D85306543D556F56'+
    '9B57D459095A405B7D5CC05E095F52609261D7632B648165C7671A687569D26B246C896DE96F4870B47213737C74EB765A77C879367AAD7C247D9C7F1C80998214838D85088693881B89A08B218CB48E498FDA'+
    '916792F09480961F97C499919B6B9D479F27A109A2FAA4F3A6DDA8D4AAD7ACC9AEC6B0D3B2CDB4C9B6C8B8E2BAEBBCF0BEE4C0E3C2EEC4EFC6EDC8E3CAEECCDECECFD0C2D2B6D48ED680D857DA2EDBFCDDC4DF'+
    '90E14EE30DE4BEE664E7FFE98FEB1FECADEE28EF92F0FBF25CF3B2F4FAF62DF75AF888F99BFAA6FB9EFC92FD73FE6FFFFF0000000000010006000D001700220030004100530068007E009600B000CC00EA010B'+
    '012E01510176019D01C701F302210252028302B502EA0324035D039903D604170457049A04E2052B057305C20613066206B7070F076607C0081E087F08E1094609AE0A1B0A870AF90B6D0BE20C590CD20D4E0D'+
    'D10E550EDA0F600FEC107811061199122D12C8136013FE14A01559161016D117901854192019EC1ABE1B911C651D381E131EEE1FCE20B521A1228A2374246F2564265E2751285529572A5F2B6D2C772D8F2E9E'+
    '2FBB30DA31FC331F3449357436A937E039173A4E3B893CD23E193F5F40B041F7434D44AF4607476748B949EC4B1C4C3F4D784EA64FD251035237537954B655F5572A587159AF5AF35C3D5D8D5EE3602B617762'+
    'CC642F657F66D46835699A6AEF6C5A6DC16F22709271F7736274D5764777B879297AA07C1A7D947F1580948210838985058691881A899F8B218CB38E498FDA916792F09480961F97B399359AA19C1D9DA89F38'+
    'A0CEA24CA3EBA58BA71CA8C2AA60AC09ADB4AF5FB102B2A7B46BB617B7C4B974BB1EBCBABE6EC017C1BAC362C507C6ACC843C9D9CB6ECD01CE8AD007D191D306D490D5FFD76BD8D5DA3CDBA1DD03DE4DDF94E0'+
    'E0E233E360E495E5CFE705E82AE949EA66EB7FEC97EDABEEB6EFB7F0B4F1B1F2A9F39FF486F56CF64FF731F80FF8ECF9BBFA8BFB56FC21FCE9FDB0FEA9FFFF00006465736300000000000000174C434420636F'+
    '6C6F7269646F2043616C69627261646F000000000000000017004C0043004400200063006F006C006F007200690064006F002000430061006C00690062007200610064006F00000000174C434420636F6C6F72'+
    '69646F2043616C69627261646F000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007465787400000000436F70797269676874204170706C6520'+
    '436F6D70757465722C20496E632E2C2032303033000000006D6D6F64000000000000061000009C2C00000000BA37E00000000000000000000000000000000000FFDB0043000201010201010202020202020202'+
    '030503030303030604040305070607070706070708090B0908080A0807070A0D0A0A0B0C0C0C0C07090E0F0D0C0E0B0C0C0CFFDB004301020202030303060303060C0807080C0C0C0C0C0C0C0C0C0C0C0C0C0C'+
    '0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0CFFC00011080080008003012200021101031101FFC4001F000001050101010101010000000000000000010203040506'+
    '0708090A0BFFC400B5100002010303020403050504040000017D01020300041105122131410613516107227114328191A1082342B1C11552D1F02433627282090A161718191A25262728292A3435363738393A'+
    '434445464748494A535455565758595A636465666768696A737475767778797A838485868788898A92939495969798999AA2A3A4A5A6A7A8A9AAB2B3B4B5B6B7B8B9BAC2C3C4C5C6C7C8C9CAD2D3D4D5D6D7D8'+
    'D9DAE1E2E3E4E5E6E7E8E9EAF1F2F3F4F5F6F7F8F9FAFFC4001F0100030101010101010101010000000000000102030405060708090A0BFFC400B5110002010204040304070504040001027700010203110405'+
    '2131061241510761711322328108144291A1B1C109233352F0156272D10A162434E125F11718191A262728292A35363738393A434445464748494A535455565758595A636465666768696A737475767778797A'+
    '82838485868788898A92939495969798999AA2A3A4A5A6A7A8A9AAB2B3B4B5B6B7B8B9BAC2C3C4C5C6C7C8C9CAD2D3D4D5D6D7D8D9DAE2E3E4E5E6E7E8E9EAF2F3F4F5F6F7F8F9FAFFDA000C03010002110311'+
    '003F00FDFCA28A2800A28A2800A28A2800A28A2800A28AF0BFDB6BF6EAF0EFEC77E18B781E2FEDFF001C6B88DFD89E1E824025BA39DBE74A79F2ADD5B1B9C824FDD50CDC5694A94EA4D420AED9152A4611729B'+
    'B246AFEDA3FB6BF82FF61AF84B2F8A7C5D72D2CB21F2F4FD26D5D0DF6AB26E50CB0A3100850C0B312154119396507E4B5FF8380F46F881E099B4FF0003FC3AD7353F89BAEDC7D8FC2BA2CD37996779C7EF2EAE'+
    'A78D7F710C190CEB8DCD94553962C9F15FED61FB425CEB7A9EB3E23F889A843E2AF18EBF0B5B4B0B28FB269B01C95B5B78B388D141EDCE72CCCCE4BB794FC0CF12F8C7F623F16683E2FD6743BE4F09EB928F3E'+
    'D9241F6889721948C906398050CAAC46F0B838232BF6383C870EA95AB2BCDF5BBB2F2B755DFF000B1F2B8CCE711CFCD43E15D34D7E7D1F6FD4FE86BC1FE349E5F875A46ABE2882DBC37A85E4117DAADE79C2C7'+
    '0CEF81B03363AB7DD070DC80406C8AE8EBF96BFF0082CEFF00C151BE227ED13FB6669769AB3699AF7C31F015D5BDFF0085343BBB732E91E24B72322F6EA338334B280D1B670612AE8A15C397FD9AFF008249FF'+
    '00C14F743FDA0BE0EE871DE497561A65C2C569043A84BBEEBC397270A2C6773CC9033716F39FBCB847DAC00AF96AB85B49C22EF257BAFF002EE7B90CC15A139C5A8CD2B37DDF47DAFD3A743EFAA28A2B8CF442'+
    '8A28A0028A28A0028A28A0028A2BCE3F686FDA0ECBE0B685E54223BCD7EF14FD92D73C20FF009EB27A203FF7D1181C02474E0F075B155A342846F27FD7DC73E2F174B0D49D6ACED147967EDF1FF0518D33F651'+
    '863F0AF86ADADBC51F15357844961A4B1636DA6C6D902EEF59482B10C1DB1821E523036A87913F27BE397C78B8F03EB1AB6BBAEEB373E2BF88FE247DFA86A7310D217C60451850151141DAA880222E1540E95E'+
    'D9FB7AF8175AF8716BE27F89BE19D06F751BFF00154F26ABE26FB306B9B9D19D800D33019912CCAA8C3B7FA91B63620796CDE69FB21FEC757B3EB50F8C7C6482E75F97135B5BCA3747A483C8623A19BD07F07F'+
    'BDD3EDB059753C145A9FC5D7FCBD3F3DCF92C563E58B6A51F87A7F5DFF0022A7ECABFB23EA5E23F11C3E32F1B43E76B0E44F63613731E9A09CAC920EF2F42ABFC3D4FCDF77EACD6BE17689E2CF08DE685AB69F'+
    '06A5A6EA3118AEA3997265079CEEEA0838208C1040239AF1EFDA8BF6BDB1F8050B7847C1D0DB6B5E3AB846C42C43C5A71D9BB7CBC8DF311CAC20E4E4670301BB3FD91BF6A0D2FF006A0F00FDA9162B1F11E98A'+
    'B1EADA686E616E8254CF26273D0FF09CA9E40274AD2A925CFB2229C629DBA9F9EDFB6F7EC452FC0CF1858C7A95B49ADF858DCB5C689A83E032938DF6F21030B2ED033C6D7C2B0E410BF717EC49F0B7C01F0FFF'+
    '00664FF858D73ABC36FE1FBBB29210405124D22A9125B3C67206C3C3AB023A63395AF68F889F0CB46F8B5E09BFF0F7882CA3BFD2F518F64B19E1948E55D0FF000BA9E5587423F03F9DFF00147E146AFF00B18F'+
    '8FA5F0AF88EE351BDF006BF39BAD3B52B742EA922602DC187211E58C15F32124798A01047CA479D8BC14715EFD37CB517E2BFCCEEC3E25538BA5557341F4EDFF0000FD81FF008270FEDA16FF0017D21F04DD4B'+
    'A8CF75169A752D2E4BD19B95B5574568653924ECF31363B618A3286CB0DCFF005AD7E6D7FC137FF694F80DFB187C07F12EB5E2AF1558C1ADADABEAFA8F8B6FDB2DE22B60D948AD546594A92116D50B3B302DF3'+
    '36EDBF757ECCFF001FB4EFDA8BE067877C79A4E97AF68961E23B5173158EB36BF65BEB619236C880B0078C8218820839AF9AC6422E6EA534F976BF77D7FE18F77049C29AA5395DDBD74E9AF5F53BBA28A2B88E'+
    'D0A28A2800A28A280382F8F5F1BA0F83DA0C42287ED9AD6A4192C6DF076E460191C8FE152CBC0E589007723E33F8A9F12FFE109D43FB4F57377E21F19EBB388AC74FB788DC5DDD4EDF7638E2504B3E070A010A'+
    '1738C2FCBF717C52F85F6BF13B43F21E41677F6EAE6CEF444246B566182769EA0E06464671D4571DFB3DFEC89A07C0BD4AE75D9E693C49E34D414C775AEDE4616448C9CF916F1E48821E07CAA4B36017791803'+
    '5F6D90E7597E5F8494A516EABDD7597657DA31EFBB6FA5B55F1D9DE4F8EC762945492A6B67FCBDDDBACBB744BADF47F3AF803FE0983AEFC5FF00879E2FD53E286B771A678A3C5FA0DE68FA6E99633992DFC3C9'+
    '731152F3956C5C4B9DA593263057AC8C1645F0DD32CBC493787BC53F0EB579A4F027C51D160786EDA341288DA40C22D42D4B01E75AC854947001182A76BA903EA6FF0082917FC14F346FD8B3494F0CF87E0B7F'+
    '13FC56D6A10FA6E8F9261B08D8902EAECA90563183B501DF2118185DCEBF9D3E18F847E31F136ADA8FC55F13F8C7501F12F5090DE45ABDC619667C7FA8922185FB29002796A004503660A835A51C6E3730A92C'+
    '4E29A49DB955AC95B6497F2FE2DEBABB855C160F014E387C3EEB777BB77DDB7DFF002DB4563E65F167C3CD43E19EBFACE89E2282FA0BFD3E45935D87CD69EE227E7CBD5ED5DBE6911B3B9B9FE220F51B65F02F'+
    '883C55E06F8C7A2EA9E0F0F2FC4069D224B5B389A5B6F12C12027CD5006D28EA3F780E0023764329DBF60F88F40D27F6F6F8742E6C1EDBC31F15BC124A2890EF16B290730C8403E6D94DD4360F0738CEE53DA7'+
    'ECDDFB2DF85FF63AF03CDA95E5C4179AF4B0B7F686AF20D891264B9B7B753FEAA007270396E598F40BDD2C4F2AB4D7BDDBFAE8734695DDD3D3B9EA906AAF61E188750D662B7D2A75B7596F21170258EDA4DA0B'+
    'A09303785391BB0338CD7C7BFB547C62D37F68AD2A48AE80B7F0259167B494002E7579802166898FDC814F21C7329181FBBDC5D7F68AFDA407C63B769EE247B3F01C396B6B424A49E20C1C877EEB6BD081C197'+
    '1CE23C07F96F54D77C6DFB64FC68D37C01F0F749BAD7BC43AD4A61B5B3B7C2A220C6E91DBEEC50C63059DB0AA3AF6153428287BF3E9F80EA54737CB1FF0087327E1CA5EF89BC6567E1CD3347B9F1C7F675E36A'+
    '161A7DBD8C97D24132A95FB42C0809206F058105338241EFFD14FEC13F12FC61F163F659F0C6AFE3AF0ADC7843C47E535B4D6735AFD8CCCB11D897020201844806E0840C761B4AD796FF00C12BFF00E0943E15'+
    'FF008270FC3E7BB964B7F11FC50D7ED847AFF888A10A10957FB1DA06E63B65655273F34ACA1DF18448FEB4AF91CDF1D4B1153F74B6EB7DFE5FAF53E9B2DC254A30FDE3DFA76F98514579A7C6FF008B977A35EA'+
    '7863C36ECBE25BC8D66373E5ABC7A7459CEE60410CEC010148E012C4F003706130953135552A7F7F44BAB7E48EEAD5634E3CD22EFC5CFDA1F44F85914F6884EB1E2111EE8349B524CAEDC6048E015897E6072F'+
    'C900950C462BC5BC51F1B3E287C4C89EDED1AD7C256B3B1DAB63179D7610F1B1A67246475DC8886BA1F0EFC25B1F0BD94F33BA4DA8DDEF926BA9DF7CD2CB804BB976DCC49C938C9383C66BBDF0AF80ED2C6D23'+
    '925B70E598ED99B746E464E094279C8EC06463B835F5F47FB3B010E68C3DA4BBC95FEE8EC97ADDF99E4CFEB15DD9CB95765FE7BFE48F17D2BE07F8F9AC966B9F1F78F6356E87FB52720FFE3F8A27F859E3CD22'+
    '78A7B3F88BE2F59E1E71757F2CD193CF552CCA463B153D3F2FA60E96CF6A13EFA103E5DB8F7ACBD47438C9D9E4B3B9FE1DB8CFE2703F33510E27AB293E68C6DFE18FF90A595C52D1BFBDFF0099E4FA67ED29E3'+
    '9F87F7B1DBF89743B0F10D8A247BEF34D6F22E153243CA5092AE71D1408C641F5E3D9BC01F14341F8A1A73DCE89A94179E563CF841DB3DB12580124670C84956C6E03206464735C1F8BBC30966B25D34692C76'+
    'F1B978C0389176E4E5B69236E18FA64724026BE2AFDB13F6C7D13E13DADFE9DE0CF361D4F558FEC9A8DF5BCAE24D437EDFF478E3438DBB8001802EE490085621BBB07C3F4B3A9286129F24FAB5F0FCD37A7972'+
    'DBD1EAD79B98E7B1CA693AB8995D744F77E8FF003BFF00C3D0FDB7B43F865E24FDB8B59F17586A96FA8EA773A75BC5791F0639AE605311F29FF89444B1838EEAD824671F377C6EF8E17BE26D6ED743D0ED6EB5'+
    '3D4F53996CEC2C2CA232CF752B1DA91C68A09249EC2BEB4FF826DFFC135ACBE255FC5F14FE2BBE9FAE5E43291A6F85CBADCDB69AC51583DE8C9579F6383E49C88F23765BE54FACFE08FF00C13DBE127ECF1F15'+
    'AFFC6BE15F0A4767E22BE46892E67BB9AEFEC28D9DEB6EB2BB08776486D98247CB9DBC574E6B8DCAF29C43C261A52AAE9C52BE96E65BA4FB6DAA5E975667939760F33CCE8FD671315494DB76D6FCBD1B5DFC9B'+
    'F5B3D0F927F667FF008225EB9E1FF864DE2CF1078D6FFC2DF19AF824D66F678BBD37458B926CAE220C05DABE479855D76B2AF96DF29693E71FDBC74CF13FC29D56C34CF889E2BF0BF88B4D7B637B0DB787E398'+
    '586A056578F134B21F9D55D096855701B6EE67C62BF457F6A3FDA5EE7C417F3F837C212BB6E261D42FA06E5FB343191D00E433023382A080188F92BE317C1EF08FED2AFA67C18BDD3359F11EA1ACDE24D25EE8'+
    '457ED7E183C235E46E41408AA5448B20D922E17E522275D30396E3AB51963F172B49FBCA365A46DBB7F655B64FE7AB23179960A8D68E0B0CBDD5EEB95DBBCAFB25F6BCEDF923F37BC35A0FC44FF82837C7AB3F'+
    '87FF000EF4C9B57D5F5162F348C4A5AE9D6E0E1EE6E64C62385077392C70AA19D954FEECFF00C1357FE0991E0AFF008270FC2B3A7E91B75CF19EB3121F10F8967842DC6A320E7CB8C73E55B2313B2204F5CB16'+
    '6258F47FB05FFC13EFE1FF00FC13D3E11FFC231E0BB492E2FAF9967D675DBD0ADA8EB738040795C01845C90912E110138196666F72AF8ACD7369621FB3A5A43F3F5FF23ECF2FCB9505CF3D65F90514515E21EA'+
    '193E3CF195A7C3CF04EAFAF5F6F367A3D9CB792AA637BAA296DAB9201638C0048C922BE6BF809E28BCF104D71E21D6E759753D4E5696E2E5D76A96D800450A3A2A2AAE00E06DCE322BBBFDBD7C2EFE3BF83F65'+
    'A2A5E5EDAA5D6A90CF3ADBB05FB4451066D8D90415DFE59C7AA8F4AF9160F8B89F0F05D4716A7677A2D0045B8B59F746D901BE56524704E0E09C10466BEFF86F29F6D8094E0FDE9BB7A25FE6FF0025D8F0332C'+
    '5F2574A5B457E27DB5E1FF00889A1CDA3DC5D4F75711ADB6431281146DCB1E72C4E015E7AF1F5AAFE04F8B5A46ABAEFD974FFB6B40C0CDBE698B0C6403B414DDCE41F9883926BE69F81DF122E7E24F86A77B69'+
    '767F64DD2CD243042F209126408F2019E0AC890642E70B23154C2915D6FC3DD523F0ADE6AFA86A660F0EE9022764BBB82A96F38843065B557D92B7CC3E70C88A857923E5074AF915287B484DBE6EDFD6EEDA99'+
    'C33093E594763E85D5FE2F6973DD5B5B585F4533CCEAA4846914E79DA02062588E30075F422AE78D3503E18D25AE49925D983247047E7491A9382FB723E51EA48C57C81F11BF69D87C50D27F6668BE28B04B36'+
    'FB24CB2E917525C5F213B986F8ADD9658D58AE36CA1721898C90AE68F857F6819B55F10DBDA89DE1BA84E7ECDAD5BBD9C322F757172A88558123923209C1CF4AA5C2151C6338E96DD3D7F1E9F88A59CC2ED3D7'+
    'B1DE7EDE5F10FC5DACFC1AD18780F4CBDD5E2D5AE64B3BFB3D3D924BBF31980B6591410D870B210071EBD9ABE59F87FF00B3DD9FC354B8F1078B197C43E3D9D19638AD6E50DAE8BB81CC70BB294965C0C492E4'+
    '0FBCB1B6C05A6F76F88FF162C74BD02E6E754BF8356B3BCCC96EFE7C8FAA477080196D7ED214C2EA9BE2569099136B8748D59B68F9DBE227C458AFE65BAF0E5CFDAEC2C156E7507C37DB2227CADE93AE46228E'+
    '56541246A626F322DCC246DA3EEF87E856C3E0FEAB4D72C1B77959A72BBBD9CB7FEEECAFB6A933E5331C1D0AD8EFAED57CD2495A2DE91B6974BF1D6F6DF73D8FF64EFDA247C28FDA6AD12FAEC0D2B5F84586A7'+
    '2143B776098E40A08C11281CE0E11E4E3BD7DD1F1DB46D73C43F0AB57B3F0ECED06A93C6150AB6D764DC3CC553D98A6E00F5E7820F23F0DFC73F1E351F853E348753BBB69E436AD05CB5A4BF235D59491248A1'+
    '4FFD3489C3A33670CEAD820015FBCDE14BB9EFFC2FA6CF7441B99AD6279B030379405B8EDCE6BE4FC40C07D4EBE17318A4DBFB9F2D9ABAF4767E491F479154FAC51AD859369796EB9AE9FF0099F15F83BE06F8'+
    'A7E266A771E1EF0BC32E8B670BF91ABF88AF6DD9445CE1A3B746C191873E838192060D7D4FF00BF66EF0B7ECDFE18934FF000ED9B0B8BB6125F6A170DE6DE6A320FE2964EA71CE146157270064D77B457C666F'+
    'C498AC7AF6727CB0EA9757DE4FAF92D9745D4EECAB87B0D817ED17BD3EEFA2EC974F37BBEAC28A28AF9E3DE0A28A2803CEFE3E22CABA52C80346DE7039E9FC15F95BFB747872DBF663F8B773E1DB3D4CDCDA6B'+
    '56BFDB76B03BAF9B6514D713A0858003215A17DA71CA85CE4835FAC3F1CAC7CEF0C5BDC2A166B7B81961FC0AC083FA85AF0DF8B1FB3D7843E3FE862C3C5BA1C3AD5B08B625C2A3A5E5BC6658A5291CD1B2CA8A'+
    'D2431160AE036C50E19462BF4AE0ECDA183842751370D534BD6E9FAABF91F379C611D66E31DFA1C7FF00C124BE22F858FC0099EF45A585F5C5D39135D0506ED506C6653D4A07575CF42CACA0928C0792FEDCFE'+
    '21BAF883F1F6FD3C3925C45A5A411C6F2239115F42E8AF194C706260C5971F2B2C99190DCF39F1ABF67AF1EFECCBF0B6EB5BD2FC4F79E39F096911C84E8561A7CB67790D8C8E63F222BB8E49A558ED83F9BBD4'+
    'A10865766185DB81A4FED0FE08F1F693E1F9F43F116A16973A2680DABEB31A58DE78A84B6B2DB91134D719F3F160E622E10F3132A9F2521729F639765F4A198D4CE68375233BAD9B517A6EADCD7D92D2D77BE8'+
    'EDE2E23113961A3839AE56ADF3F4E9F8DCCD9344D69EEDA79565B8B870374B26E676C000649C938000FC055BB4D07C417984024407D33FE15F51F80FC0FE15F1BE956F7B63776B776B769E641340E93472A766'+
    '5753B587B8E2BAEB3F833A3DA72605900FF6715E955E2EA50F779355E472C3269CB5E6D0F92AC7C137ABA45D693ABEA56161A5EBBB2096EAF638916CE519104DE7C8A4C28B2B81232F262791704918F1CF87FE'+
    '38D4BE05FC58D435FF0012E98B6FA7F851CC7ACD9EAB73340BA91DE636D350C20ACB2CC0483C97DF1B24533B0F2E2765FBDF5AFD9D57C79F14B42998FD8FC37A72DC7F68EF94A5AB93E5BC42519C1FF56FB49E'+
    '01C8C8279F873FE0B41F18FC12D69A4697E13B9B08651A8BDB5D585BA4515C2CD6F0C41659B6732064B80119C9C33CE0725CB2CB738598E3160542EAA2F7ADF67E6BAB8ADFC97A1588C13C351F6EDFC2F4F3FF'+
    '00867FA9E1FF00B667ED09F0E7E397C50BFF00180D27C79A0E9BAFDC4EBE5DA436F3A5B32409188A132BC71C82126DA5312950127F2BCC076BAFEF6FECFBA8DC6AFF0003FC297776D78D7375A64134A6EE230C'+
    'E5990125D0B3956E795DED83C6E3D4FF002D97717897E22788F46F04E9314D77AFEBFA9258697A5C990D1DE4F225BA99011FBA05B6EECF3B630CC368527FAB7F0FD97F66E83656FE4C36DE44091F9512858E3C'+
    '281B54000003A0C0AF0FC5BC3D3C2E130585874E6B6B7692514BCFAEFE47A3C273954AB5AACBADBEFD4B9451457E1E7DA851451400514514015F56D363D634CB8B597223B88DA3623191918C8F715E372E9EFA'+
    '3C6F617512A5D452B6F53CFCA0023F03BCFE95ED95E59F1F6EA3F0D5DC3AACA8E200AB1CD22217DABCE090393F8738FA57B193E2396A7B17B4BF3393174EF1E65D0E5755B2596069CD95ADF4F0A7C91CF3BDB2'+
    'CDB410A8F346AD22A727901C0CE7637DD3F8732EAE8FFB5478AFED135FEB1E3983C53AB5DCB65657D6266B1BFB6BF3BE11673DA2C1A83493175486DE5733A46E4C11AB794BFBA9637569A8C114AB30782E02B4'+
    '7247B655973D36B64039ED8F515F943FF071CE8DE02F87BE2FF8757F71E14593C43E2D8F5792E355D2E48B4CD46E9EDE2D3A18CDCCBE44C2EA38D1A255497E64550237453206FD7F80B14BEBCF04E2DBA8B4F2'+
    'E54DEAAE935DF55B2DF63E4B3BA17A2AB27F0FEB6387F85FE37BCF814FA87C5EF849A86B517862F11747BFB0D5FC3305FAE99787E792D27C6A76D31D8F1BC9048233FBA611B4AF20B955FD27FF00827CFC5EF1'+
    '47ED11E15D427F184371A56ABA15CADA5FE9F2786FFB3A6DF2C0B711E7FD3EE0C122C72445E0980982BC5214549E335F9E3FF0483FF828378EBC69F0F34CFD9DBC0FE08F07B5F5C472B9BABBB4BC9F4FB2B547'+
    'F3EE27B825A6748E43B632090AD23C489E5B3A9AFD86FD923E06C1FB377C0BD13C20B770EAA9A28B98E1BA1A459E96F224B7535C0CDBD9C71DBA11E6907CB45070490492C73E3EC5CF0BCF43114D2A9CD683BA'+
    '7270E927A795B57777BADB5AC8A846A353837CB6D56A973765AFCFB7DE67F8BFC3864D5A1613DCC76B12BA35932C2F69286FBF953197E471CB938E0922BE5AFDAE3F61ED1FE27FECFDE34F027C3AF07787748B'+
    'ED7C35CDDCF65611DBFD92E041325BC8EE006650F7258E5F1B7703F2B107EBBF88DE2736C922D8595BCD38520C8DB8A4273C1393B79E7AF19C75E95CC7857527F862F71A8DCEA26DE7D4268DE78D42A2C8D9FB'+
    '890A95F31F2C79FE21CF037357CA6558FAD858AC453F8959A4FAB4EF76976DD5F5B9E8E2B0F4EA4BD9BEBBBF974B9F93DFF06E57EC11AFF8F3F6CEF10FC4BF125AC10E81F092E352F0DFCB7A527935B3188268'+
    'BCA553BA14B69E50FE698F71B88B679852511FEF4579EFECB7F087C33F01BE08685E12F06F876CBC29E17D1213069FA5DA8F92D90B163B98FCD248CC4B3C8E4BC8ECCEECCCCCC7D0ABC3E34E25A99DE672C549'+
    '5A2972C5768AFD5BBB7EB63D2CA72F8E0F0EA9477DDFA8514515F267A614514500145145001595E30F09DB78C34792D2E63574907F156AD1551938BE65B8347CBFAD7C19F137C1AD55A6D0E45BED0E47325CE9'+
    '7282629865B852436C3F367238240C860315F19FFC1557F648D57FE0A01ACFC3C8F4FB1F0CE8977E191A8457C7C4F7D7F65143F69FB281F65B8B586E140FF475CACB6CAA301B77553FAD52C2B3AE1D430358BA'+
    'B7C3AD2B5ACF9F6CAD9AFACCA38B6BE0B111C525EFC6F67EA9AD7E4CF37159652AD0707B33E20FF827C7FC13E3E15FFC13F7C2221D2BC7DE1ED53C5121B949FC47736DA326A32C133C6C6D848919956006185F'+
    'CA79641BD33E807D3D1FC46F0FE9D0C93C9E3BB2D46351F71AF6CDB03D9218C484F3FC3FD2BA497F67AF0E4CE49B6EBEF5358FC07F0F583864B6E47BD618FCEE38DAD2C4E2A5294DEEDA5FE5A0E86055182A74'+
    'F44BCD9E30DF171755BE783C3BE1EBED59CDCC8CB717C1D2157FE0951DB74DB49E4AFEECE00E413C741F0B7E01EB3AFEA706ADE2DBF7D46E2201A2898148603F28252318552422E48196232493CD7B4697E13B'+
    '1D1D4082055C568AA85181C015C55F376E2E3463CB7EBBB37A7858C5DDEA32D6D52CE058D0055518005494515E29D41451450014514500145145007FFFD9';


  function GetVariantProperty(v:variant; sName:AnsiString; vDefault:variant):variant;
  begin Result:=vDefault; if v.Exists(sName)then try Result:=TDocVariantData(v).Value[sName]; except end; end;

  procedure SetDefaultSerialMode(sm:TSerialMode); var ct:TCommTimeouts; begin
    with sm do begin CommName:='\\.\COM1';
      with frCommState do begin ZeroMemory(@frCommState,SizeOf(frCommState));
        DCBlength:=SizeOf(DCB); BaudRate:=CBR_38400; Flags:=sfBinary{ or sfParity};
        wReserved:=0; XonLim:=2048; XOffLim:=512;
        ByteSize:=8; Parity:=NoParity; StopBits:=OneStopBit;
        XonChar:=#$00; XoffChar:=#$00; ErrorChar:=#$00; EofChar:=#$FF; EvtChar:=#$00;
        wReserved1:=0;
      end;
      with ct do begin ZeroMemory(@ct,SizeOf(ct));
        ReadIntervalTimeout:=MAXDWORD; ReadTotalTimeoutMultiplier:=0; ReadTotalTimeoutConstant:=0;
        WriteTotalTimeoutMultiplier:=0; WriteTotalTimeoutConstant:=1000;
      end;
      CommTimeouts:=ct;
      CommInputQueueSize:=lwBufferSize; CommOutputQueueSize:=lwBufferSize; CommMask:=0;
      IconHex:=sSerialSocketIcon;
    end;
  end;

  procedure RegisterClasses; begin
    CommunicationSpace.RegisterModeClass(TSerialMode);
    CommunicationSpace.RegisterSocketClass(TSerialSocket);
    CommunicationSpace.RegisterConnectionClass(TSerialConnection);
  end;


{ TDCBhelper }

function TDCBhelper.GetAnsiChar(const ndx:integer):AnsiChar; begin
  case ndx of
    ndxXonChar:   Result:=PDCB(Self)^.XonChar;      ndxXoffChar:    Result:=PDCB(Self)^.XoffChar;
    ndxErrorChar: Result:=PDCB(Self)^.ErrorChar;    ndxEofChar:     Result:=PDCB(Self)^.EofChar;
    ndxEvtChar:   Result:=PDCB(Self)^.EvtChar;
  else Result:=#0; end;
end;

function TDCBhelper.GetBit1(const ndx:integer):bit1; begin
  case ndx of
    ndxfBinary:           Result:=bit1(PDCB(Self)^.Flags and$01);
    ndxfParity:           Result:=bit1((PDCB(Self)^.Flags shr 1)and$01);
    ndxfOutxCtsFlow:      Result:=bit1((PDCB(Self)^.Flags shr 2)and$01);
    ndxfOutxDsrFlow:      Result:=bit1((PDCB(Self)^.Flags shr 3)and$01);
    ndxfDsrSensitivity:   Result:=bit1((PDCB(Self)^.Flags shr 6)and$01);
    ndxfTXContinueOnXoff: Result:=bit1((PDCB(Self)^.Flags shr 7)and$01);
    ndxfOutX:             Result:=bit1((PDCB(Self)^.Flags shr 8)and$01);
    ndxfInX:              Result:=bit1((PDCB(Self)^.Flags shr 9)and$01);
    ndxfErrorChar:        Result:=bit1((PDCB(Self)^.Flags shr 10)and$01);
    ndxfNull:             Result:=bit1((PDCB(Self)^.Flags shr 11)and$01);
    ndxfAbortOnError:     Result:=bit1((PDCB(Self)^.Flags shr 14)and$01);
  else Result:=0; end;
end;

function TDCBhelper.GetBit2(const ndx:integer):bit2; begin
  case ndx of
    ndxfDtrControl:       Result:=bit1((PDCB(Self)^.Flags shr 4)and$03);
    ndxfRtsControl:       Result:=bit1((PDCB(Self)^.Flags shr 12)and$03);
  else Result:=0; end;
end;

function TDCBhelper.GetBit17(const ndx:integer):bit17; begin
  case ndx of
    ndxfDummy2:           Result:=bit17((PDCB(Self)^.Flags shr 15)and$1FFFF);
  else Result:=0; end;
end;

function TDCBhelper.GetI32(const ndx:integer):LongInt;
begin if ndx<>ndxFlags then Result:=0 else Result:=PDCB(Self)^.Flags; end;

function TDCBhelper.GetUI8(const ndx:integer):byte; begin
  case ndx of
    ndxByteSize:  Result:=PDCB(Self)^.ByteSize;
    ndxParity:    Result:=PDCB(Self)^.Parity;
    ndxStopBits:  Result:=PDCB(Self)^.StopBits;
  else Result:=0; end;
end;

function TDCBhelper.GetUI16(const ndx:integer):word; begin
  case ndx of
    ndxwReserved: Result:=PDCB(Self)^.wReserved;    ndxwReserved1:  Result:=PDCB(Self)^.wReserved1;
    ndxXonLim:    Result:=PDCB(Self)^.XonLim;       ndxXoffLim:     Result:=PDCB(Self)^.XoffLim;
  else Result:=0; end;
end;

function TDCBhelper.GetUI32(const ndx:integer):longword; begin
  case ndx of
    ndxDCBLength: Result:=PDCB(Self)^.DCBlength;    ndxBaudRate:    Result:=PDCB(Self)^.BaudRate;
  else Result:=0; end;
end;

procedure TDCBhelper.SetAnsiChar(const ndx:integer; const c:AnsiChar); begin
  case ndx of
    ndxXonChar:   PDCB(Self)^.XonChar:=c;           ndxXoffChar:    PDCB(Self)^.XoffChar:=c;
    ndxErrorChar: PDCB(Self)^.ErrorChar:=c;         ndxEofChar:     PDCB(Self)^.EofChar:=c;
    ndxEvtChar:   PDCB(Self)^.EvtChar:=c;
  end;
end;

procedure TDCBhelper.SetBit1(const ndx:integer; const b1:bit1); begin
  case ndx of
    ndxfBinary:           PDCB(Self)^.Flags:=(PDCB(Self)^.Flags and not sfBinary)or(b1);
    ndxfParity:           PDCB(Self)^.Flags:=(PDCB(Self)^.Flags and not sfParity)or(b1 shl 1);
    ndxfOutxCtsFlow:      PDCB(Self)^.Flags:=(PDCB(Self)^.Flags and not sfOutxCtsFlow)or(b1 shl 2);
    ndxfOutxDsrFlow:      PDCB(Self)^.Flags:=(PDCB(Self)^.Flags and not sfOutxDsrFlow)or(b1 shl 3);
    ndxfDsrSensitivity:   PDCB(Self)^.Flags:=(PDCB(Self)^.Flags and not sfDsrSensitivity)or(b1 shl 6);
    ndxfTXContinueOnXoff: PDCB(Self)^.Flags:=(PDCB(Self)^.Flags and not sfTXContinueOnXoff)or(b1 shl 7);
    ndxfOutX:             PDCB(Self)^.Flags:=(PDCB(Self)^.Flags and not sfOutX)or(b1 shl 8);
    ndxfInX:              PDCB(Self)^.Flags:=(PDCB(Self)^.Flags and not sfInX)or(b1 shl 9);
    ndxfErrorChar:        PDCB(Self)^.Flags:=(PDCB(Self)^.Flags and not sfErrorChar)or(b1 shl 10);
    ndxfNull:             PDCB(Self)^.Flags:=(PDCB(Self)^.Flags and not sfNull)or(b1 shl 11);
    ndxfAbortOnError:     PDCB(Self)^.Flags:=(PDCB(Self)^.Flags and not sfAbortOnError)or(b1 shl 14);
  end;
end;

procedure TDCBhelper.SetBit2(const ndx:integer; const b2:bit2); begin
  case ndx of
    ndxfDtrControl:       PDCB(Self)^.Flags:=(PDCB(Self)^.Flags and not sfDTRControl)or(b2 shl 4);
    ndxfRtsControl:       PDCB(Self)^.Flags:=(PDCB(Self)^.Flags and not sfRTSControl)or(b2 shl 12);
  end;
end;

procedure TDCBhelper.SetBit17(const ndx:integer; const b17:bit17); begin
  case ndx of
    ndxfDummy2:           PDCB(Self)^.Flags:=(PDCB(Self)^.Flags and not sfDummy2)or(b17 shl 15);
  end;
end;

procedure TDCBhelper.SetI32(const ndx:integer; const i32:LongInt);
begin if ndx=ndxFlags then PDCB(Self)^.Flags:=i32; end;

procedure TDCBhelper.SetUI8(const ndx:integer; const ui8:byte); begin
  case ndx of
    ndxByteSize:  PDCB(Self)^.ByteSize:=ui8;
    ndxParity:    PDCB(Self)^.Parity:=ui8;
    ndxStopBits:  PDCB(Self)^.StopBits:=ui8;
  end;
end;

procedure TDCBhelper.SetUI16(const ndx:integer; const ui16:word); begin
  case ndx of
    ndxwReserved: PDCB(Self)^.wReserved:=ui16;      ndxwReserved1:  PDCB(Self)^.wReserved1:=ui16;
    ndxXonLim:    PDCB(Self)^.XonLim:=ui16;         ndxXoffLim:     PDCB(Self)^.XoffLim:=ui16;
  end;
end;

procedure TDCBhelper.SetUI32(const ndx:integer; const ui32:longword); begin
  case ndx of
    ndxDCBLength: PDCB(Self)^.DCBlength:=ui32;      ndxBaudRate:    PDCB(Self)^.BaudRate:=ui32;
  end;
end;

  function GetParity(ui8:byte):AnsiString; const sParities:array[0..4]of AnsiString=('none','odd','even','mark','space');
  begin if ui8<=4then Result:=sParities[ui8]else Result:=IntToStr(ui8); end;

  function GetStopBits(ui8:byte):AnsiString; begin
    case ui8 of
      0: Result:='1';   1: Result:='1.5';   2: Result:='2';
    else Result:=IntToStr(ui8); end;
  end;

  function GetControlChar(c:AnsiChar):AnsiString;
  begin if(c<#33)or(c>'z')then Result:='"[0x'+IntToHex(byte(c),2)+']"'else Result:='"'+c+'"'; end;


{ TSerialMode }

function TSerialMode.DoGetAsText:AString; var v:variant; begin
    v:=_JsonFast(StringToUTF8(inherited DoGetAsText));
    with frCommState do begin
      v.DCBBaudRate:=BaudRate;        v.DCBFlags:=Flags;                v.DCBwReserved:=wReserved;
      v.DCBXonLim:=XonLim;            v.DCBXoffLim:=XoffLim;            v.DCBByteSize:=ByteSize;
      v.DCBParity:=Parity;            v.DCBStopBits:=StopBits;          v.DCBXonChar:=byte(XonChar);
      v.DCBXoffChar:=byte(XoffChar);  v.DCBErrorChar:=byte(ErrorChar);  v.DCBEofChar:=byte(EofChar);
      v.DCBEvtChar:=byte(EvtChar);    v.DCBwReserved1:=wReserved1;
    end;
    Result:=v; if bJSONHumanReadable then Result:=JSONReformat(Result);
    Result:=UTF8ToString(Result);
  end;

function TSerialMode.DoGetStateInfo:AnsiString; var iPos:integer; s:AnsiString; begin
  Result:=inherited DoGetStateInfo;
  with frCommState do s:=Format(',скорость=%d,биты данных=%d стоповые=%s,чётность=%s',
    [BaudRate,ByteSize,GetStopBits(StopBits),GetParity(Parity)],gfs);
  iPos:=Pos(',маска=',Result);
  if iPos=0then Result:=Result+','+s else try Insert(s,Result,iPos); except end;
  with frCommState do s:=Format(',символы Xon=%s Xoff=%s Error=%s Eof=%s Evt=%s,лимиты Xon=%d Xoff=%d,флаги=0x%.8x',
    [GetControlChar(XonChar),GetControlChar(XoffChar),GetControlChar(ErrorChar),
    GetControlChar(EofChar),GetControlChar(EvtChar),XonLim,XoffLim,Flags],gfs);
  iPos:=Pos(',имя=',Result);
  if iPos=0then Result:=Result+s else try Insert(s,Result,iPos); except end;
end;

procedure TSerialMode.DoSetAsText(const s:AString); var v:variant; dcb:TDCB; begin
  try try BeginUpdate; v:=_JsonFast({StringToUTF8(}s{)});
    dcb:=frCommState;
    with dcb do begin
      BaudRate:=GetVariantProperty(v,'DCBBaudRate',BaudRate); Flags:=GetVariantProperty(v,'DCBFlags',Flags);
      wReserved:=GetVariantProperty(v,'DCBwReserved',wReserved);
      XonLim:=GetVariantProperty(v,'DCBXonLim',XonLim); XoffLim:=GetVariantProperty(v,'DCBXoffLim',XoffLim);
      ByteSize:=GetVariantProperty(v,'DCBByteSize',ByteSize);
      Parity:=GetVariantProperty(v,'DCBParity',Parity); StopBits:=GetVariantProperty(v,'DCBStopBits',StopBits);
      wReserved1:=GetVariantProperty(v,'DCBwReserved1',wReserved1);
      byte(XonChar):=GetVariantProperty(v,'DCBXonChar',byte(XonChar));  byte(XoffChar):=GetVariantProperty(v,'DCBXoffChar',Byte(XoffChar));
      byte(ErrorChar):=GetVariantProperty(v,'DCBErrorChar',byte(ErrorChar)); byte(EofChar):=GetVariantProperty(v,'DCBEofChar',byte(EofChar));
      byte(EvtChar):=GetVariantProperty(v,'DCBEvtChar',byte(EvtChar));
    end;
    CommState:=dcb;
    inherited DoSetAsText(s);
  finally EndUpdate; end; except end;
end;

procedure TSerialMode.DoSetAString(const ndx:integer; const s:AString); var sNew:AnsiString; begin
  case ndx of
    ndxCommName: begin sNew:=AnsiUpperCase(s); if not AnsiStartsText('\\',sNew)then sNew:='\\.\'+sNew;
      inherited DoSetAString(ndx,sNew);
    end;
  else inherited DoSetAString(ndx,s); end;
end;

class function TSerialMode.GetClassCaption:AString;
begin Result:='настройки последовательного порта (TSerialMode)'; end;

class function TSerialMode.GetClassDescription:AString;
begin Result:='класс TSerialMode предоставляет набор свойств для управления режимом сокета последовательный порта'; end;

function TSerialMode.GetCommState:TDCB;
begin try Lock; Result:=frCommState; finally Unlock; end; end;

procedure TSerialMode.SetCommState(const dcb:TDCB); var ldcb:TDCB; begin
  try Lock; ldcb:=dcb; ldcb.DCBlength:=SizeOf(ldcb);
    if not CompareMem(@ldcb,@frCommState,SizeOf(ldcb))then begin frCommState:=ldcb; Changed; end;
  finally Unlock; end;
end;

procedure TSerialMode.SetDefault; begin
  try Lock; BeginUpdate; inherited SetDefault; SetDefaultSerialMode(Self); // перезаписываем необходимые
    fsCaption:='SerialMode_0x'+IntToHex(fhID,8); fsName:=fsCaption; fsDescription:=GetClassCaption;
  finally EndUpdate; Unlock; end;
end;

{ TSerialSocket }

constructor TSerialSocket.Create(sCommName:AnsiString; bOverlapped:boolean); var s:AnsiString; begin
  s:=AnsiUpperCase(sCommName); if Pos('=',s)<>0then SetLength(s,Pos('=',s)-1);
  if not AnsiStartsText('\\',s)then s:='\\.\'+s; 
  inherited Create(s,bOverlapped);
end;

function TSerialSocket.DoCreateHandle:THandle; var lwFlags:longword; begin {Result:=}inherited DoCreateHandle;
  if not fbOverlapped then lwFlags:=0 else lwFlags:=FILE_FLAG_OVERLAPPED;
  fhCommHandle:=CreateFileA(PAnsiChar(fsCommName),GENERIC_READ or GENERIC_WRITE,0,nil,OPEN_EXISTING,lwFlags,0);
  Result:=fhCommHandle; // fbConnected:=fhCommHandle<>INVALID_HANDLE_VALUE;
end;

procedure TSerialSocket.DoDestroyHandle;
begin inherited DoDestroyHandle; end;

function TSerialSocket.DoGetAsText:AString; var v:variant; begin
    v:=_JsonFast(StringToUTF8(inherited DoGetAsText));
    with CommState do begin
      v.DCBBaudRate:=BaudRate;        v.DCBFlags:=Flags;                v.DCBwReserved:=wReserved;
      v.DCBXonLim:=XonLim;            v.DCBXoffLim:=XoffLim;            v.DCBByteSize:=ByteSize;
      v.DCBParity:=Parity;            v.DCBStopBits:=StopBits;          v.DCBXonChar:=byte(XonChar);
      v.DCBXoffChar:=byte(XoffChar);  v.DCBErrorChar:=byte(ErrorChar);  v.DCBEofChar:=byte(EofChar);
      v.DCBEvtChar:=byte(EvtChar);    v.DCBwReserved1:=wReserved1;
    end;
    v.CommHandleInformation:=CommHandleInformation; v.CommModemStatus:=CommModemStatus;
    Result:=v; if bJSONHumanReadable then Result:=JSONReformat(Result);
    Result:=UTF8ToString(Result);
  end;

function TSerialSocket.DoGetStateInfo:AnsiString; var iPos:integer; s:AnsiString; begin
  Result:=inherited DoGetStateInfo;
  with CommState do s:=Format(',скорость=%d,биты данных=%d стоповые=%s,чётность=%s',
    [BaudRate,ByteSize,GetStopBits(StopBits),GetParity(Parity)],gfs);
  iPos:=Pos(',маска=',Result);
  if iPos=0then Result:=Result+','+s else try Insert(s,Result,iPos); except end;
  with CommState do s:=Format(',символы Xon=%s Xoff=%s Error=%s Eof=%s Evt=%s,лимиты Xon=%d Xoff=%d,флаги=0x%.8x,статус модема=%d',
    [GetControlChar(XonChar),GetControlChar(XoffChar),GetControlChar(ErrorChar),
    GetControlChar(EofChar),GetControlChar(EvtChar),XonLim,XoffLim,Flags,CommModemStatus],gfs);
  iPos:=Pos(',имя=',Result);
  if iPos=0then Result:=Result+s else try Insert(s,Result,iPos); except end;
end;

function TSerialSocket.DoGetUInt(const ndx:integer):UInt64; var lwErrors:longword; rStatistics:TComStat; begin
  case ndx of
    ndxBytesForRead:        if _ClearCommError(lwErrors,@rStatistics)then Result:=rStatistics.cbInQue else Result:=0;
    ndxBytesForWrite:       if _ClearCommError(lwErrors,@rStatistics)then Result:=rStatistics.cbOutQue else Result:=0;
  else Result:=inherited DoGetUInt(ndx); end;
end;

procedure TSerialSocket.DoSetAsText(const s:AString); var v:variant; dcb:TDCB; begin
  try try BeginUpdate; v:=_JsonFast(StringToUTF8(s));
    dcb:=CommState;
    with dcb do begin
      BaudRate:=GetVariantProperty(v,'DCBBaudRate',BaudRate); Flags:=GetVariantProperty(v,'DCBFlags',Flags);
      wReserved:=GetVariantProperty(v,'DCBwReserved',wReserved);
      XonLim:=GetVariantProperty(v,'DCBXonLim',XonLim); XoffLim:=GetVariantProperty(v,'DCBXoffLim',XoffLim);
      ByteSize:=GetVariantProperty(v,'DCBByteSize',ByteSize);
      Parity:=GetVariantProperty(v,'DCBParity',Parity); StopBits:=GetVariantProperty(v,'DCBStopBits',StopBits);
      wReserved1:=GetVariantProperty(v,'DCBwReserved1',wReserved1);
      byte(XonChar):=GetVariantProperty(v,'DCBXonChar',byte(XonChar));  byte(XoffChar):=GetVariantProperty(v,'DCBXoffChar',Byte(XoffChar));
      byte(ErrorChar):=GetVariantProperty(v,'DCBErrorChar',byte(ErrorChar)); byte(EofChar):=GetVariantProperty(v,'DCBEofChar',byte(EofChar));
      byte(EvtChar):=GetVariantProperty(v,'DCBEvtChar',byte(EvtChar));
    end;
    CommState:=dcb;
    inherited DoSetAsText(s);
  finally EndUpdate; end; except end;
end;

class function TSerialSocket.GetClassCaption:AString;
begin Result:='последовательный сокет (TSerialSocket)'; end;

class function TSerialSocket.GetClassDescription:AString;
begin Result:='класс TSerialSocket реализует доступ к последовательному COM-порту'; end;

function TSerialSocket.GetCommModemStatus:longword;
begin if not _GetCommModemStatus(Result)then Result:=0; end;

function TSerialSocket.GetCommProperties:TCommProp;
begin if not _GetCommProperties(Result)then ZeroMemory(@Result,SizeOf(Result)); end;

function TSerialSocket.GetCommState:TDCB;
begin if not _GetCommState(Result)then ZeroMemory(@Result,SizeOf(Result)); Result.DCBlength:=SizeOf(Result); end;

function TSerialSocket.GetHandleInformation:longword;
begin if not _GetHandleInformation(Result)then Result:=0; end;

procedure TSerialSocket.SetCommState(const dcb:TDCB);
begin _SetCommState(dcb); end;

procedure TSerialSocket.SetDefault; var sm:TSerialMode; begin
  try Lock; BeginUpdate; sm:=nil;
    inherited SetDefault; // просто изменяем все свойства
    try sm:=TSerialMode.Create; SetDefaultSerialMode(sm); AsText:=sm.AsText; // перезаписываем необходимые
    finally sm.Free; end;
    fsCaption:=CommName; fsName:=fsCaption; fsDescription:=GetClassCaption;
//    DoDestroyHandle;
  finally EndUpdate; Unlock; end;
end;

procedure TSerialSocket.SetHandleInformation(const lw:longword);
begin _SetHandleInformation(HANDLE_FLAG_INHERIT+HANDLE_FLAG_PROTECT_FROM_CLOSE,lw); end;

function TSerialSocket._ClearCommBreak: boolean;
begin try Lock; Result:=Windows.ClearCommBreak(fhCommHandle); finally Unlock; end; end;

function TSerialSocket._ClearCommError(var lwErrors:longword; const prStatistics:PComStat):boolean;
begin try Lock; Result:=Windows.ClearCommError(fhCommHandle,lwErrors,prStatistics); finally Unlock; end; end;

function TSerialSocket._EscapeCommFunction(const lwFunction:longword):boolean;
begin try Lock; Result:=Windows.EscapeCommFunction(fhCommHandle,lwFunction); finally Unlock; end; end;

function TSerialSocket._GetCommModemStatus(var lwModemStatus:longword):boolean;
begin try Lock; Result:=Windows.GetCommModemStatus(fhCommHandle,lwModemStatus); finally Unlock; end; end;

function TSerialSocket._GetCommProperties(var rCommProperties:TCommProp):boolean;
begin try Lock; Result:=Windows.GetCommProperties(fhCommHandle,rCommProperties); finally Unlock; end; end;

function TSerialSocket._GetCommState(var dcb:TDCB):boolean;
begin try Lock; Result:=Windows.GetCommState(fhCommHandle,dcb); dcb.DCBlength:=SizeOf(dcb); finally Unlock; end; end;

function TSerialSocket._GetHandleInformation(var lwHandleFlags:longword):boolean;
begin try Lock; Result:=Windows.GetHandleInformation(fhCommHandle,lwHandleFlags); finally Unlock; end; end;

function TSerialSocket._SetCommBreak: boolean;
begin try Lock; Result:=Windows.SetCommBreak(fhCommHandle); finally Unlock; end; end;

function TSerialSocket._SetCommState(const dcb:TDCB):boolean;
begin try Lock; Result:=Windows.SetCommState(fhCommHandle,dcb); finally Unlock; end; end;

function TSerialSocket._SetHandleInformation(const lwHandleMask,lwHandleFlags:longword):boolean;
begin try Lock; Result:=Windows.SetHandleInformation(fhCommHandle,lwHandleMask,lwHandleFlags); finally Unlock; end; end;

function TSerialSocket._TransmitCommChar(const c:AnsiChar): boolean;
begin try Lock; Result:=Windows.TransmitCommChar(fhCommHandle,c); finally Unlock; end; end;

{ TSerialConnection }

constructor TSerialConnection.Create; begin
  fCommunicationModeClass:=TSerialMode; fCommunicationSocketClass:=TSerialSocket;
  inherited Create;
end;

class function TSerialConnection.GetClassCaption:AString;
begin Result:='последовательное соединение (TSerialConnection)'; end;

class function TSerialConnection.GetClassDescription:AString;
begin Result:='коммуникационное соединение TSerialConnection позволяет открыть сокет класса TSerialSocket со своими настройками TSerialMode'; end;

function TSerialConnection.GetSerialMode:TSerialMode;
begin Result:=TSerialMode(CommunicationMode); end;

function TSerialConnection.GetSerialSocket:TSerialSocket;
begin Result:=TSerialSocket(CommunicationSocket); end;

procedure TSerialConnection.SetDefault; begin
  try Lock; BeginUpdate;
    inherited SetDefault; // просто изменяем все свойства
    fsCaption:='SerialConnection_0x'+IntToHex(fhID,8); fsName:=fsCaption; fsDescription:=GetClassCaption;
  finally EndUpdate; Unlock; end;
end;

procedure TSerialConnection.SetSerialMode(const sm:TSerialMode);
begin CommunicationMode:=sm; end;


initialization
  GetLocaleFormatSettings(SysLocale.DefaultLCID,gfs);
  RegisterClasses;

end.
