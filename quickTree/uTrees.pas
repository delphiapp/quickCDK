unit uTrees;

interface

uses SysUtils,ComCtrls,Windows,Controls,VirtualTrees,Messages,Classes,Types,Graphics,ExtCtrls,Menus,
  sPageControl,sPanel,sSpeedButton,sLabel,sEdit,sBitBtn,sCheckBox,sToolBar,acAlphaImageList,sDialogs,
  SynCommons,mORMot,sComboBox,sGroupBox,sSpinEdit,sColorSelect,sComboBoxes,Forms,
  uEditors,MenuBar;

type
  TEditLinkForString=class(VirtualTrees.TStringEditLink)
  public
    constructor Create; override;
    function PrepareEdit(Tree:TBaseVirtualTree; pn:PVirtualNode; Column:TColumnIndex):boolean; override;
  end;

  TCustomEditLink=class;
  TCustomEditor=class(TCustomPanel)
  private
    fRefLink:IVTEditLink;
    fLink:TCustomEditLink;
    fbModified:boolean; fsText:AnsiString;
  protected
    procedure SetText(const s:AnsiString); virtual;
  public
    procedure AutoAdjustSize; virtual;
    procedure SelectAll; virtual;

    property Modified:boolean read fbModified write fbModified;
    property Text:AnsiString read fsText write SetText;
  end;

  TCustomEditLink=class(TInterfacedObject,IVTEditLink)
  private
    fEditor:TCustomEditor;            // A normal custom edit control.
  protected
    fTree:TCustomVirtualStringTree;   // A back reference to the tree calling.
    fNode:PVirtualNode;               // The node to be edited.
    fColumn:TColumnIndex;             // The column of the node.
    fAlignment:TAlignment;
    fTextBounds:TRect;                // Smallest rectangle around the text.
    fStopping:boolean;                // Set to True when the edit link requests stopping the edit action.
    procedure CreateEditor; virtual;
  public
    constructor Create; virtual;
    destructor Destroy; override;
    property Column:TColumnIndex read fColumn;  // [IPK] Make Column(Index) accessible
    property Editor:TCustomEditor read fEditor;
    property Node:PVirtualNode read fNode;      // [IPK] Make FNode accessible

    function BeginEdit:boolean; virtual; stdcall;
    function CancelEdit:boolean; virtual; stdcall;
    function EndEdit:boolean; virtual; stdcall;
    function GetBounds:TRect; virtual; stdcall;
    function PrepareEdit(Tree:TBaseVirtualTree; Node:PVirtualNode; Column:TColumnIndex):boolean; virtual; stdcall;
    procedure ProcessMessage(var M:TMessage); virtual; stdcall;
    procedure SetBounds(r:TRect); virtual; stdcall;
  end;

  TEnumTreeNodesProc=procedure(n:PVirtualNode; pData:pointer); stdcall;

  TBaseVTHeader=class(TVTHeader)
  protected
    procedure DoAfterAutoFitColumn(Column:TColumnIndex); override;
    procedure DoAfterColumnWidthTracking(Column:TColumnIndex); override;
    procedure DoAfterHeightTracking; override;
  end;

  TBaseStringTree=class(TVirtualStringTree)
  private
    fsFilterString:AnsiString;
    fsFilterCategories:AnsiString;
    fiNodesVisibleCount,fiNodesTotalCount:integer;
    fsPathDelimiter:AnsiString; // WideChar и Char как сохранение рекорда не подходят
    fiSortColumn:integer; fiSortDirection:TSortDirection;
    fOnSortTree:TNotifyEvent;
    function GetHeaderState:AnsiString; virtual;
    function GetNodesState:AnsiString; virtual;
    procedure SetHeaderState(const s:AnsiString); virtual;
    procedure SetNodesState(const s:AnsiString); virtual;
    procedure SetFilterCategories(const s:AnsiString); virtual;
    procedure SetFilterText(const s:AnsiString); virtual;
    procedure WMVScroll(var Msg:TMessage); message WM_VSCROLL;
  protected
//    procedure DoAfterCellPaint(c:TCanvas; pn:PVirtualNode; Column:TColumnIndex; CellRect:TRect); override;
//    procedure DoBeforeItemErase(c:TCanvas; pn:PVirtualNode; ItemRect:TRect; var cl:TColor; var enEraseAction:TItemEraseAction); override;
//    procedure DoCanEdit(pn:PVirtualNode; Column:TColumnIndex; var bAllowed:boolean); override;
//    procedure DoChange(pn:PVirtualNode); override;
//    procedure DoChecked(pn:PVirtualNode); override;
//    procedure DoFreeNode(pn:PVirtualNode); override;
//    procedure DoGetText(pn:PVirtualNode; Column:TColumnIndex; TextType:TVSTTextType; var Text:UnicodeString); override;
//    procedure DoNewText(pn:PVirtualNode; Column:TColumnIndex; Text:UnicodeString); override;
//    procedure ValidateNodeDataSize(var i32Size:integer); override;
    procedure DblClick; override;
    procedure DoCanEdit(pn:PVirtualNode; Column:TColumnIndex; var bAllowed:boolean); override;
    function DoCompare(pNode1,pNode2:PVirtualNode; Column:TColumnIndex):integer; override;
    function DoCreateEditor(pn:PVirtualNode; Column:TColumnIndex):IVTEditLink; override;
    procedure DoFocusChange(pn:PVirtualNode; Column:TColumnIndex); override;
//    procedure DoHeaderClick(HitInfo:TVTHeaderHitInfo); override;
    procedure DoStructureChange(pn:PVirtualNode; enReason:TChangeReason); override;
    procedure DoTextDrawing(var PaintInfo:TVTPaintInfo; Text:UnicodeString; TextRect:TRect; DrawFormat:Cardinal); override;
    function GetHeaderClass:TVTHeaderClass; override;

    procedure WMKeyDown(var M:TWMKeyDown); message WM_KEYDOWN;

    function DoCountVisibleNode(pn:PVirtualNode):boolean; virtual; // считать ли узел видимым (если не самый ребёнок)
    function DoGetCategories(pn:PVirtualNode):AnsiString; virtual; // категории для узла в виде CommaText
    function DoGetNode(sPath:AnsiString; const bCreate:boolean=false):PVirtualNode; virtual; // узел по пути (узел из пути)
    function DoGetNodePath(pn:PVirtualNode):AnsiString; virtual;   // полный путь узла (путь из узла)
    procedure DoFilter; virtual;                                      // фильтрация узлов

  public
    constructor Create(aOwner:TComponent); override;
//    function AddNode(sNodePath:AnsiString; UserData:Pointer=nil):PVirtualNode; virtual;     

    procedure SortTree(Column:TColumnIndex; Direction:TSortDirection; DoInit:boolean=true); override;

    procedure EnumTreeNodes(nParent:PVirtualNode; EnumProc:TEnumTreeNodesProc; pData:pointer); virtual; // перечисление всех дочерних элементов

    property HeaderState:AnsiString read GetHeaderState write SetHeaderState; // позиция колонок, их ширина
    property NodesState:AnsiString read GetNodesState write SetNodesState;    // состояние узлов

    property FilterCategories:AnsiString read fsFilterCategories write SetFilterCategories; // фильтр узлов по категориям
    property FilterText:AnsiString read fsFilterString write SetFilterText;   // фильтр узлов по тексту

    property NodesTotalCount:integer read fiNodesTotalCount;      // количество всего узлов
    property NodesVisibleCount:integer read fiNodesVisibleCount;  // количество видимых узлов

    property PathDelimiter:AnsiString read fsPathDelimiter write fsPathDelimiter; // разделитель пути в иерархическом дереве

    property OnSortTree:TNotifyEvent read fOnSortTree write fOnSortTree; // событие опопещает о сортировке
  end;

  TTimedInvalidateTree=class(TBaseStringTree) // перерисовка узлов по таймеру
  private
    fTimer:TTimer; lInvalidateNodes:TList; // для обновления узлов тегов
  protected
    procedure DoFreeNode(pn:PVirtualNode); override;  
    function DoInvalidateNode(pn:PVirtualNode):TRect; virtual;
    procedure _OnTimer(Sender:TObject); virtual;
  public
    constructor Create(aOwner:TComponent); override;
    destructor Destroy; override;

    function InvalidateNode(pn:PVirtualNode):TRect; override;
  end;

  TCustomToolPanel=class(TsPanel)
  private
    fbCanClose:boolean;
    fsCaption:AnsiString;
    fOnClick:TNotifyEvent;
    fOnPropChanged:TNotifyEvent;
    procedure SetCanClose(const b:boolean);
    procedure SetCaption(const s:AnsiString);
  protected
    procedure DoChanged; virtual;
    procedure DoLoadFromString(const s:AnsiString); virtual; // загрузка состояния из строки
    function DoSaveToString:AnsiString; virtual; // запись состояния в виде строки
    procedure DoUpdateControls; virtual; // обновить размеры и т.д. контролов

    procedure _OnClick(Sender:TObject); virtual; // нажатие кнопок, изменение edit'а и т.д.
    procedure _OnMouseDown(Sender:TObject; btn:TMouseButton; setShift:TShiftState; x,y:integer); virtual;
  public
    constructor Create(aOwner:TComponent); override;
    procedure WndProc(var M:TMessage); override;

    procedure LoadFromStream(_s:TStream); virtual;  // загрузка состояния из потока данных
    procedure SaveToStream(_s:TStream); virtual;    // запись состояния в поток данных

    procedure UpdateStates; virtual; // изменение состояние контролов

    property CanClose:boolean read fbCanClose write SetCanClose; // можно ли закрыть панель
    property Caption:AnsiString read fsCaption write SetCaption; // имя панели (в главном меню)

    property OnClick:TNotifyEvent read fOnClick write fOnClick; // нажали или изменили значение
    property OnPropChanged:TNotifyEvent read fOnPropChanged write fOnPropChanged; // изменилось свойство (видимость, заголовок...)

{    class function ClassReader(const aValue:TObject; aFrom:PUTF8Char; var aValid:boolean; aOptions:TJSONToObjectOptions):PUTF8Char; virtual;  // через эту функцию будем читать в JSON-формате
    class procedure ClassWriter(const aSerializer:TJSONSerializer; aValue:TObject; aOptions:TTextWriterWriteObjectOptions); virtual;        // через эту процедуру будем писать в JSON-формате}
  end;

  TFilterToolPanel=class(TCustomToolPanel)  // панель для фильтрации узлов дерева
  private
    fTree:TBaseStringTree;
    fsNodesCountFormat:AnsiString;
    function GetCategories:AnsiString;
    function GetCategoriesList:AnsiString;
    function GetFilter:AnsiString;
    function GetNodePath:AnsiString;
    procedure SetCategories(const s:AnsiString);
    procedure SetCategoriesList(const s:AnsiString);
    procedure SetFilter(const s:AnsiString);
    procedure SetNodePath(const s:AnsiString);
    procedure SetNodesCountFormat(const s:AnsiString);
    procedure SetTree(const tv:TBaseStringTree); virtual;
  protected
    procedure DoLoadFromString(const s:AnsiString); override; // загрузка состояния из строки
    function DoSaveToString:AnsiString; override; // запись состояния в виде строки
    procedure DoUpdateControls; override;

    procedure UpdateNodesCount; virtual;
    procedure _OnClick(Sender:TObject); override;
  public
    edtNodePath:TsEdit; btnCopy2Clipboard:TsSpeedButton; lblNodesCount:TsLabel;
    edtNodeFilter:TsEdit; btnNodeFilterClear:TsSpeedButton; edtNodeCategories:TCheckListEdit;
    constructor Create(aOwner:TComponent); override;

    property Categories:AnsiString read GetCategories write SetCategories;  // фильтр по категориям
    property CategoriesList:AnsiString read GetCategoriesList write SetCategoriesList; // список возможных категорий как CommaText
    property Filter:AnsiString read GetFilter write SetFilter;              // фильтр по тексту
    property NodePath:AnsiString read GetNodePath write SetNodePath;        // путь текущего узла
    property NodesCountFormat:AnsiString read fsNodesCountFormat write SetNodesCountFormat; // формат для вывода количества узлов

    property TreeView:TBaseStringTree read fTree write SetTree;             // дерево, для которого используется фильтр
  end;

  TTreeHeaderToolPanel=class(TCustomToolPanel) // панель заголовка дерева
  private
    fTree:TBaseStringTree; bAdding:boolean;{флаг добавления}
    procedure SetTree(const tv:TBaseStringTree); virtual;
  protected
    procedure DoLoadFromString(const s:AnsiString); override; // загрузка состояния из строки
    function DoSaveToString:AnsiString; override; // запись состояния в виде строки
    procedure DoUpdateControls; override;

    procedure _OnClick(Sender:TObject); override;
  public
    gbxSort:TsGroupBox;
      cbxSortColumn,cbxSortOrder:TsComboBox; btnSortReset:TsSpeedButton;
    gbxColumns:TsGroupBox;
      edtColumnsVisibility:TCheckListEdit;
      cbxColumn:TsComboBox; edtWidth:TsSpinEdit; edtText:TsEdit;
      chkVisible:TsCheckBox;
      edtColor:TColorEdit;
    constructor Create(aOwner:TComponent); override;
    procedure UpdateStates; override; // изменение состояние контролов
    procedure WndProc(var M:TMessage); override;

    property TreeView:TBaseStringTree read fTree write SetTree; // дерево, свойства заголовка которого показываются
  end;

  TCustomTreeExplorer=class(TsPanel)
  private
    {mbr:TMenuItemBar;}
//    pc:TsPageControl;
    fTree:TBaseStringTree;
    function DoCreateClosePanel:TsPanel; virtual;             // панель с кнопкой закрытия для ToolPanel
    procedure SetTree(const tv:TBaseStringTree);
  protected
    lToolPanels,lToolMenuItems:TList;
    pnlFilter:TFilterToolPanel;
    pnlHeader:TTreeHeaderToolPanel;
    procedure CreateToolPanels; virtual;                      // все панели должны после создания быть записаны в lToolPanels
    procedure UpdateToolStates; virtual;                      // перераспределяет панели по их позиции, обновляет состояние меню

    procedure DoLoadFromString(const s:AnsiString); virtual; // загрузка состояния из строки
    function DoSaveToString:AnsiString; virtual; // запись состояния в виде строки

    procedure _OnCloseToolClick(Sender:TObject); virtual;     // инструментальную панель закрыли
    procedure _OnMenuToolClick(Sender:TObject); virtual;      // видимость инструментальной панели изменилась через меню
    procedure _OnMouseDown(Sender:TObject; btn:TMouseButton; setShift:TShiftState; x,y:integer); virtual;
    procedure _OnPropToolChanged(Sender:TObject); virtual; // изменилось свойство инструментальной панели

    procedure _OnChanged(Sender:TBaseVirtualTree; pn:PVirtualNode); virtual;
    procedure _OnStructureChanged(Sender:TBaseVirtualTree; pn:PVirtualNode; Reason:TChangeReason); virtual;
  public
    constructor Create(aOwner:TComponent); override;
    destructor Destroy; override;

    procedure LoadFromStream(_s:TStream); virtual;  // загрузка состояния из потока данных
    procedure SaveToStream(_s:TStream); virtual;    // запись состояния в поток данных

    property ToolPanels:TList read lToolPanels;                   // список всех панелей от класса TCustomToolPanel
    property TreeView:TBaseStringTree read fTree write SetTree;   // дерево, которое активно для эксплорера
  end;

  THostConnectionToolPanel=class(TCustomToolPanel) // панель для соединения с хостом
  protected
    procedure DoLoadFromString(const s:AnsiString); override; // загрузка состояния из строки
    function DoSaveToString:AnsiString; override; // запись состояния в виде строки
  public
    lblCaption:TsLabel; edtHost:TsEdit; btnConnect,btnDisconnect:TsBitBtn; // инфа о клиенте, адрес сервера, кнопки соединения
    lblExInfo,lblConnectionInfo:TsLabel; // информация любая, информация о соединении

    constructor Create(aOwner:TComponent); override;
  end;

  TUpdateRateToolPanel=class(TCustomToolPanel) // панель автообновления
  protected
    procedure DoLoadFromString(const s:AnsiString); override; // загрузка состояния из строки
    function DoSaveToString:AnsiString; override; // запись состояния в виде строки
  public
    chkAutoRefresh:TsCheckBox; edtRefreshTime:TsEdit; lblRefreshTime:TsLabel;

    constructor Create(aOwner:TComponent); override;
  end;

  TGroupedItemsToolPanel=class(TCustomToolPanel)
  public
    tbr:TsToolBar; il:TsAlphaImageList;
      btnRefresh,{btnSep0,}btnClear,{btnSep1,}btnGroupAdd,btnGroupDel,{btnSep2,}btnGroupUp,btnGroupDown,{btnSep3,}
      btnItemAdd,btnItemDel,{btnSep4,}btnItemUp,btnItemDown,{btnSep5,}btnRename,{btnSep6}
      btnOpen,btnSave:TToolButton;
    od:TsOpenDialog; sd:TsSaveDialog;
    constructor Create(aOwner:TComponent); override;
  end;

  PrPropertiesTreeNodeData=^TrPropertiesTreeNodeData;
  TrPropertiesTreeNodeData=packed record
    _sName,_sValue:AnsiString;
  end;

  TPropertiesTree=class(TBaseStringTree)
  protected
    procedure DoCanEdit(pn:PVirtualNode; Column:TColumnIndex; var bAllowed:boolean); override;
    procedure DoFreeNode(pn:PVirtualNode); override;
    procedure DoGetText(pn:PVirtualNode; Column:TColumnIndex; TextType:TVSTTextType; var Text:UnicodeString); override;
  public
    constructor Create(aOwner:TComponent); override;
  end;

  TPropertiesEditor=class(TCustomTreeExplorer)
  private
    fTV:TBaseStringTree;
    function GetAsText:AnsiString; virtual;
    procedure SetAsText(const s:AnsiString); virtual;
  public
    constructor Create(aOwner:TComponent); override;
    property AsText:AnsiString read GetAsText write SetAsText;
  end;

  function CreateEditorForm:TForm;

implementation

{$BOOLEVAL OFF}
{$RANGECHECKS OFF}
{$OVERFLOWCHECKS OFF}

uses StrUtils,Math,
  uUtilsFunctions, sMaskEdit,uExtClasses, StdCtrls;

type
  TLCustomVirtualStringTree=class(TCustomVirtualStringTree);
  TrToolPanelInfo=packed record
    _sClassName:String;     // имя класса
    _sToolCaption:String;   // название панели
    _vToolState:variant;    // состояние инструментальной панели
  end;
  TrToolsData=packed record
    _sClassName:String;     // имя класса чьи данные
    _arrToolsData:packed array of TrToolPanelInfo; // состояние всех панелей
  end;
  TrHeaderState=packed record
    _sClassName:String;     // имя класса чьи данные
    _iSortColumn:integer;   // индекс сортируемой колонки
    _iSortDirection:integer; // направление сортировки
    _arrColumnsData:packed array of variant; // состояние всех колонок
  end;
  TrNodesState=packed record
    _sClassName:String;       // имя класса чьи данные
    _sFocusedNodePath:String; // путь к сфокусированному узлу
    _sPathDelimiter:String;   // разделитель в имени пути узла
    _iFocusedColumn:integer;  // сфокусированная колонка
    _iScrollOffsetX,_iScrollOffsetY:integer; // смещение по скролликам
    _arrNodesState:packed array of variant; // состояние всех узлов
  end;

var gfs:TFormatSettings;

const
  __TrToolPanelInfo='ClassName string ToolCaption string ToolState variant';
  __TrToolsData='ClassName string ToolsData array of TrToolPanelInfo';
  __TrHeaderState='ClassName string SortColumn integer SortDirection integer ColumnsData array of variant';
  __TrNodesState='ClassName string FocusedNodePath string PathDelimiter string FocusedColumn integer ScrollOffsetX integer ScrollOffsetY integer NodesState array of variant';

  ndxName=0; ndxReadValue=1; ndxWriteValue=2;

  iOffs=4; sToolPanels='Панели';
  sCloseButton='424D96000000000000007600000028000000080000000800000001000400000000002000000000000000000000000000000000000000000000000000800000800000008080008000000080008000808000008080'+
    '8000C0C0C0000000FF0000FF000000FFFF00FF000000FF00FF00FFFF0000FFFFFF00FFFFFFFFFF0FFF0FFFF0F0FFFFFF0FFFFFF0F0FFFF0FFF0FFFFFFFFFFFFFFFFF';
  sCopy2Clipboard=
    '424D360400000000000036000000280000001000000010000000010020000000000000040000130B0000130B00000000000000000000000000000000000000000000000000000000000000000000110300432B18'+
    '0A6B0000002E0000000D000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000007432B1775FDDC8AFFCDAE6CF89D7C4DDA694B2DB344261692240D'+
    '036E0E0000500300003C0000001E000000000000000000000000000000001A140E56607873C3644A30ACF3D784FFF0DF8BFFF7E693FFFAE699FFFAE09AFFEDD297FFDFC28FFFE6C293FD442C1F8A000000000000'+
    '0000000000000000000052625BA3A3FFFFFFAEC8ACFFE9CB7CFFECDA90FFEDDF98FFF0E1A0FFF2E6A7FFF5EAB1FFFBF2BDFFFFFDCBFF453424810000000000000000000000000000001685BFB8E995FFFFFFAFCF'+
    'B6FFEECF88FFF0E09DFFF0E2A5FFF2E6ABFFF4E8B1FFF5EAB9FFFAF0C4FFFFF4CCFF32261B6E000000000000000000000000241F17639FFFFFFF93FFFFFFB8CDB0FFF3D997FFF3E3AAFFF3E7B1FFF5EAB8FFF7EC'+
    'BFFFF8F0C8FFFEF5D3FFFEF2D4FF21140E5B0000000000000000000000046D8B84C6A5FFFFFF9DFEFFFFC5CDACFFF8E6ABFFF5E9B7FFF7ECBFFFF8F0C5FFFBF3CCFFFDF4D4FFFFFDE1FFF4E9D3FE0A0000420000'+
    '00000000000013090246A6F0EEFFAAFFFFFFAAFAFEFFD3CCA9FFFBEEBDFFF7EDC4FFFAF2CCFFFBF4D3FFFEF7DAFFFFFAE1FFFFFFF3FFE3D5C5F7000000270000000000000000687772B9B7FFFFFFB3FFFFFFB8F7'+
    'F7FFE0CDA9FFFDF4CBFFFBF3CFFFFDF7D7FFFEFADFFFFFFDE7FFFFFFF5FFFFFFFFFFC8B6ABE70000001200000000130C064AB3EEECFDBAFFFFFFC0FFFFFFC1E2DDFFF2E1C0FFFEF7D6FFFEF8DDFFFFFBE6FFFFFE'+
    'EDFFFFFFF4FFEDE0CCFFF3E1CFFF907365CD000000050000000A879993D3C7FFFFFFC5FFFFFFCDFFFFFFCBCEC1FFF5E0C1FFFFFDE6FFFFFFF2FFFFFFF8FFFFFFFFFFFFFFFFFFEDDAC8FFECD9CEFD21120A5B0000'+
    '000050433991D2FFFFFFCBFFFFFFD2FFFFFFD9FFFFFFD3DAD4FFD6C8B9FFE3D4C7FFEADACDFFF2E1D7FFFFF4EEFFFFFBF7FFE2C8B8FA35262167000000000000000044281D76B0BAB1E8E2FFFFFFE2FFFFFFE3FF'+
    'FFFFEDFFFFFFF3FFFFFFF4FBFAFFFBFAF7FFFFFFFFFF997B6FCF210D085518070042000000000000000000000000000000000000002366584E96D9DFD7F7FFFFFFFFFEFFFFFFFFFFFFFFE3D2BEFFEDD9C8FFE8CE'+
    'C0FF0E06024600000000000000000000000000000000000000000000000000000000000000000E03003B958077B7F7EDE8FCFFFFFFFFF4DDCCFFDFCCC5EE4B2F2289000000000000000000000000000000000000'+
    '00000000000000000000000000000000000000000000000000001707033B7B5B4FA35B473C870000002400000000000000000000000000000000000000000000000000000000';
  sConnect=
    '424D360C000000000000360000002800000020000000200000000100180000000000000C000000000000000000000000000000000000C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8BBBBBBB7B7B7BCBCBCC8C8C8C8C8C8C8C8C8C8C8C8BBBBBBB7B7B7B7B7B7C4C4C4C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8818191494965383858575759AAAAAAC8C8C8C8C8C888889446466436365A61616DBABABAC8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C86262C92222CE2122CF222271595959A9A9A98686982726C52323D52828BF8D8D9BC8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B1B1B55555C52626CF2626D217174D23232D2525AB2827D62626C768687FB5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5'+
    'B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5C8C8C8B5B5B5575757454545454545454545454545454545454545454545454545454545424254243BD12D2DDF2629BF2428B62D2DE02C2CDD232246454545454545454545'+
    '454545454545454545454545454545454545454545454545454545C8C8C82626262626262626262626262626262626262626262626262626262626262626262626261999D92F46DF3232E83232EA3333E8133987'+
    '252525262626262626262626262626262626262626262626262626262626262626262626323232C8C8C8999999A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A624ACD7456ACB'+
    '3737F63837F73233D408344E8B8B8BA6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6262626323232C8C8C8999999FFF1DFFFF1DFFFF1DFFFF1E0FFF1E0FFF1DFFFF1DFFFF1DFFFF1E0'+
    'FFF1E0FFF1E02A79B24043F5595AFF4F4EFD3B3AFD232E9D746D67DED2C2FFF1DFFFF1DFFFF1DFFFF1DFFFF1DFFFF1DFFFF1DFFFF1DFFFF1DF262626454545C8C8C8999999999999999999999999999999999999'+
    '9999999999999999999999999999997979833940F45657FF6C6CE48484E55958FF4040FF2A2A7F5151518C8C8C999999999999999999999999999999999999999999999999999999B5B5B5C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8B1B1BA5353DB6C6CFF6162F63475A034A9D35278F26060FF6060F73E3E708A8A8AC4C4C4C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C88D8DDF5757F77171F66E6EA5FCEEDDA4A4A427273A4B4BC56767F26464E69C9CA6C5C5C5C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8959595ECDFCF8787871A1A1A343434A2A2A2C0C0C0C7C7C7C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C7C7C7C0C0C0B2B2B26F6F6F7B756D373737151515161616'+
    '505050828282A8A8A8BBBBBBC3C3C3C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C5C5C5BBBBBBA9A9A98282824E4E4E484848'+
    '888888A69F9F8E79794D47473030303B3B3B4A4A4A6F6F6F969696B2B2B2BEBEBEC5C5C5C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C0C0C0B7B7B7A0A0A06F6F6F'+
    '474747646464959595DCDCDCD7D7D7ACA3A37A6B6B534B4B7D6C6C685C5C3E3B3B3737374242425757577C7C7CA2A2A2B9B9B9C2C2C2C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C7C7C7BEBEBEB0B0B0'+
    '8A8A8A5F5F5F4E4E4E7B7B7BC9C9C9DADADA464646BDBDBD818181776E6E6C62623333333333333333337565656C5F5F6C5F5F3333333A3A3A484848696969919191B2B2B2BEBEBEC5C5C5C8C8C8C8C8C8C7C7C7'+
    'BBBBBBA7A7A77E7E7E535353595959A5A5A5D3D3D3D9D9D9D3D3D39A9A9A6161616C6C6C929292A19B9B625B5B4A4A4A6363636F6F6F6969696B6B6B6866668A7C7C6D5F5F4B45453636364141415757577C7C7C'+
    'A2A2A2BEBEBEC7C7C7AFAFAF7171714E4E4E7A7A7AB9B9B9DCDCDCD7D7D7BABABA7C7C7C646464909090B2B2B2B4B4B4AFAFAF8D8B8B5552524A4A4A6363636F6F6F7676767E7E7E8787877D7D7D4C4C4C7E6E6E'+
    '836F6F726363403C3C3A3A3A4E4E4E888888BABABA7474749A9A9ACCCCCCDBDBDBC6C6C69B9B9B6E6E6E7F7F7FAFAFAFB9B9B9B2B2B2ACACACA7A7A7B4B4B4A3A3A35757574949496363636F6F6F7676767E7E7E'+
    '878787777777333333333333464040BE9D9DEABDBDB19292383838757575939393C7C7C7909090AFAFAF8080807878789E9E9EBCBCBCB6B6B6B0B0B0AAAAAAB0B0B0D3D3D3EAEAEAD8D8D8848484CDCDCDABABAB'+
    '8282826060606464647A7A7A878787777777333333333333333333AB9090E0B7B7EBBFBF3737377373738F8F8F9696967C7C7C979797B9B9B9BABABAB4B4B4AFAFAFB2B2B2C6C6C6E2E2E2EAEAEAE3E3E3DEDEDE'+
    'DCDCDCDADADAD8D8D8D6D6D6D5D5D5D3D3D3B4B4B48D8B8B6C6B6B6463634C4C4C3A39393333339A8585C7A7A7D5B0B0373737737373909090B2B2B2BEBEBEBABABAB2B2B2B1B1B1C2C2C2DBDBDBEDEDEDEBEBEB'+
    'E7E7E7E0E0E0D0D0D0C9C9C9C7C7C7CECECECACACABFBFBFB8B8B8BCBCBCBDBDBDACACACC0BABAB6ADAD8C8787787171685A5A877878AF9797BB9F9F373737757575909090B7B7B7B1B1B1C1C1C1D2D2D2E0E0E0'+
    'DEDEDEE3E3E3E2E2E2D8D8D8CFCFCFD3D3D3E5E5E5F1F1F1F9F9F9FFFFFFF6F6F6EEEEEEE6E6E6DDDDDDE8E8E8F3F3F3F8F8F8E7E0E0E1CCCCE5C8C8BAB6B6AEA8A8988C8CA48F8F4343438A8A8A969696CBCBCB'+
    'E2E2E2E0E0E0E7E7E7D6D6D6A3A3A3CFCFCFEAEAEAE8E8E8DDDDDDE3E3E3EBEBEBF1F1F1F9F9F9FFFFFFF6F6F6EEEEEEE6E6E6DDDDDDE8E8E8F3F3F3FDFDFDF5F5F5E8E8E8E9D4D4DDD0D08787879A9A9A868686'+
    '828282C0C0C0C1C1C1A9A9A9B0B0B0C5C5C5F5F5F5A6A6A67373734040404B4B4B777777A8A8A8D8D8D8EBEBEBF1F1F1F9F9F9FFFFFFF6F6F6EEEEEEE6E6E6DDDDDDE8E8E8F3F3F3FDFDFDF5F5F5E7E7E7B4ACAC'+
    '8F8F8F8A8A8A9A9A9AC3C3C3C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C1C1C1A7A7A7A1A1A1B0B0B0D6D6D6C5C5C58E8E8EA8A8A8D8D8D8EBEBEBF1F1F1F9F9F9FFFFFFF6F6F6EEEEEEE6E6E6DDDDDDE8E8E8DBDBDB'+
    'BABABAA1A1A1959595AFAFAFC5C5C5C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8BABABA969696A0A0A0AEAEAECDCDCDECECECF1F1F1F9F9F9FFFFFFF6F6F6E4E4E4'+
    'B4B4B4999999919191A6A6A6C4C4C4C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8B2B2B2979797AAAAAA'+
    'BABABAB7B7B79F9F9F919191B9B9B9C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8';
  sDisconnect=
    '424D360C000000000000360000002800000020000000200000000100180000000000000C000000000000000000000000000000000000C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5A2A2A2575757454545454545454545454545575757A2A2A2B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5'+
    'B5B5B5B5B5B5B5B5B5B5B5B5B5B5B5C8C8C8B5B5B55757574545454545454545454545454545454545454545454545454545454545450176A90171A30171A30273A50275A8016FA2323232454545454545454545'+
    '454545454545454545454545454545454545454545454545454545C8C8C826262626262626262626262626262626262626262626262626262626262626262626262615ADD92BC1EB2AB8DF29B9DE28C0EA057EAF'+
    '262626262626262626262626262626262626262626262626262626262626262626262626323232C8C8C8999999A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A624ACD773D6EE'+
    '86EAFF7FE5FF6CD5F10F87B7A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6A6262626323232C8C8C8999999FFF1DFFFF1DFFFF1DFFFF1E0FFF1E0FFF1DFFFF1DFFFF1DFFFF1E0'+
    'FFF1E0FFF1E032ADD5BBE5EFCDF7FFC7F3FFAFE4F2198FBDFFF1DFFFF1DFFFF1DFFFF1DFFFF1DFFFF1DFFFF1DFFFF1DFFFF1DFFFF1DFFFF1DF262626454545C8C8C8999999999999999999999999999999999999'+
    '9999999999999999999999999999999999994DB6D8DAEBEFFFFFFFFFFFFFD4EEF51590BE999999999999999999999999999999999999999999999999999999999999999999999999B5B5B5C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C825A7D240B2D94BB7DB34AED62EABD547AED2A2A2A2C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8999999FFF1E0A4A4A4242424434343B5B5B5C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8959595ECDFCF8787871A1A1A343434A2A2A2C0C0C0C7C7C7C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C7C7C7C0C0C0B2B2B26F6F6F7B756D373737151515161616'+
    '505050828282A8A8A8BBBBBBC3C3C3C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C5C5C5BBBBBBA9A9A98282824E4E4E484848'+
    '888888A69F9F8E79794D47473030303B3B3B4A4A4A6F6F6F969696B2B2B2BEBEBEC5C5C5C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C0C0C0B7B7B7A0A0A06F6F6F'+
    '474747646464959595DCDCDCD7D7D7ACA3A37A6B6B534B4B7D6C6C685C5C3E3B3B3737374242425757577C7C7CA2A2A2B9B9B9C2C2C2C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C7C7C7BEBEBEB0B0B0'+
    '8A8A8A5F5F5F4E4E4E7B7B7BC9C9C9DADADA464646BDBDBD818181776E6E6C62623333333333333333337565656C5F5F6C5F5F3333333A3A3A484848696969919191B2B2B2BEBEBEC5C5C5C8C8C8C8C8C8C7C7C7'+
    'BBBBBBA7A7A77E7E7E535353595959A5A5A5D3D3D3D9D9D9D3D3D39A9A9A6161616C6C6C929292A19B9B625B5B4A4A4A6363636F6F6F6969696B6B6B6866668A7C7C6D5F5F4B45453636364141415757577C7C7C'+
    'A2A2A2BEBEBEC7C7C7AFAFAF7171714E4E4E7A7A7AB9B9B9DCDCDCD7D7D7BABABA7C7C7C646464909090B2B2B2B4B4B4AFAFAF8D8B8B5552524A4A4A6363636F6F6F7676767E7E7E8787877D7D7D4C4C4C7E6E6E'+
    '836F6F726363403C3C3A3A3A4E4E4E888888BABABA7474749A9A9ACCCCCCDBDBDBC6C6C69B9B9B6E6E6E7F7F7FAFAFAFB9B9B9B2B2B2ACACACA7A7A7B4B4B4A3A3A35757574949496363636F6F6F7676767E7E7E'+
    '878787777777333333333333464040BE9D9DEABDBDB19292383838757575939393C7C7C7909090AFAFAF8080807878789E9E9EBCBCBCB6B6B6B0B0B0AAAAAAB0B0B0D3D3D3EAEAEAD8D8D8848484CDCDCDABABAB'+
    '8282826060606464647A7A7A878787777777333333333333333333AB9090E0B7B7EBBFBF3737377373738F8F8F9696967C7C7C979797B9B9B9BABABAB4B4B4AFAFAFB2B2B2C6C6C6E2E2E2EAEAEAE3E3E3DEDEDE'+
    'DCDCDCDADADAD8D8D8D6D6D6D5D5D5D3D3D3B4B4B48D8B8B6C6B6B6463634C4C4C3A39393333339A8585C7A7A7D5B0B0373737737373909090B2B2B2BEBEBEBABABAB2B2B2B1B1B1C2C2C2DBDBDBEDEDEDEBEBEB'+
    'E7E7E7E0E0E0D0D0D0C9C9C9C7C7C7CECECECACACABFBFBFB8B8B8BCBCBCBDBDBDACACACC0BABAB6ADAD8C8787787171685A5A877878AF9797BB9F9F373737757575909090B7B7B7B1B1B1C1C1C1D2D2D2E0E0E0'+
    'DEDEDEE3E3E3E2E2E2D8D8D8CFCFCFD3D3D3E5E5E5F1F1F1F9F9F9FFFFFFF6F6F6EEEEEEE6E6E6DDDDDDE8E8E8F3F3F3F8F8F8E7E0E0E1CCCCE5C8C8BAB6B6AEA8A8988C8CA48F8F4343438A8A8A969696CBCBCB'+
    'E2E2E2E0E0E0E7E7E7D6D6D6A3A3A3CFCFCFEAEAEAE8E8E8DDDDDDE3E3E3EBEBEBF1F1F1F9F9F9FFFFFFF6F6F6EEEEEEE6E6E6DDDDDDE8E8E8F3F3F3FDFDFDF5F5F5E8E8E8E9D4D4DDD0D08787879A9A9A868686'+
    '828282C0C0C0C1C1C1A9A9A9B0B0B0C5C5C5F5F5F5A6A6A67373734040404B4B4B777777A8A8A8D8D8D8EBEBEBF1F1F1F9F9F9FFFFFFF6F6F6EEEEEEE6E6E6DDDDDDE8E8E8F3F3F3FDFDFDF5F5F5E7E7E7B4ACAC'+
    '8F8F8F8A8A8A9A9A9AC3C3C3C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C1C1C1A7A7A7A1A1A1B0B0B0D6D6D6C5C5C58E8E8EA8A8A8D8D8D8EBEBEBF1F1F1F9F9F9FFFFFFF6F6F6EEEEEEE6E6E6DDDDDDE8E8E8DBDBDB'+
    'BABABAA1A1A1959595AFAFAFC5C5C5C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8BABABA969696A0A0A0AEAEAECDCDCDECECECF1F1F1F9F9F9FFFFFFF6F6F6E4E4E4'+
    'B4B4B4999999919191A6A6A6C4C4C4C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8B2B2B2979797AAAAAA'+
    'BABABAB7B7B79F9F9F919191B9B9B9C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8'+
    'C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8C8';
  sRefresh=
    '424DC60700000000000036000000280000001600000016000000010020000000000000000000120B0000120B00000000000000000000000000000000000000000000000000000001000000040100000B02010015'+
    '0403001F050500270607002B0708002B0709002B07090029070700210606001C0504002E080900420B1000360909000D0201000000000000000000000000000000000000000000040100001B04030035080A0047'+
    '0B1500530D1F00590E29005C0F2F005E0F34005E0F36005E0F36005D0F34005A0F2E00580E2B005D0F3700621045005D0F2B002E0708000401000000000000000000000000000000000000110301004E0D0E0061'+
    '102A00631040006310490063104C0063104B0063104B0063104E006310570063106200631064006310630065116D016A157A0165125500510D1A001403020000000000010000000D0201001D050300320806005C'+
    '0F130063102D0063103D0064103D0167123B036C153B036D1641026E154A016D1459006812670064106500631062027A21820C9D3DC606741E77005B0F21001F0503000000000006010000390906005A0F18005F'+
    '0F260062102E00631038016A1549057C1F6F0991269E08A02ABF05A32AD103A42AD703A128D5039523C502821CA001721677079938AD13B74BF306781E8F003B0B12000E02010000000000070100003C0A080061'+
    '10240063103F00631049016F185F058F2BA507A22CE404B02DFA03BD34FF03C438FF03C437FF03BF33FF03B72FFE03A929F9029820E809A22FF10BAB30FE048520BE011B071F0001000000000000000100000017'+
    '0402004E0D110062102D026E184E089330AA0FA636F208AE2FFF03BD34FF03CE42FF03D547FF03D240FF03C836FF03BA2FFF03A826FF029A1EFF029B1EFF03A524FF04A22AE50339114900010001000000000000'+
    '000000020000001F0503014A0D100E7F276924AE46E933BC54FF2AC955FF17D655FF09D950FE06D145FB06C83BFA05C135FD03B32CFF02A422FF029E1EFF02A422FF03B02BFF06BB37F8066A2482000703080000'+
    '0000000000000000000000020000000C0202083E164129A146D756CB72FE56DC7FFD42D172EC26A74FBE157A328F126C2A85168732AD0D9C2CE8039B1FFE03A121FF06B02BFF0CC13CFF16D14FFE14A245BA031B'+
    '0C1C0000000000000000000000000000000000000000010A040B0D5C267848B464E650AA6AC1285D38620F211520050A0709030704070A180E1916662D861FA63DF62FB349FF36C357FF3DD568FF3FE277FF34CE'+
    '71E20D412245000101010000000000000000000000000000000000000000011407191244215513291A2C03070507010402030000000000000000000E06110B7D3B9A44C56DFB78D48DFF77DD93FF6DE292FD5DE0'+
    '8CF745CA75E116562C5F01040203000000000000000000000000000000000000000001040204030F061104220B2A084116540E4D2459010E070F0000000001210C3420A352D476D190F688CD99E768B87CCC4597'+
    '5BA728703B7C15492251071C0C1C0001010100000000000000000106020504150817083012380B551F680B7A2A9D0A952ECC10A93BEA0F9E48C601220F27000000000212061D2161337B3B68457325482C4B102D'+
    '172F051309130207030600020101000000000000000000000000010301030C3F1B48158B37AC0EAA3ED80ABB41F007BD3EFB07B637FE13B646FB09803B9B000E0610000000000001010103080408070F090F143B'+
    '1F480A561F7E01210B2A0001000100000000000000000000000000000000000301030E50275F24C059ED11CC50FE06CB47FF05C43FFF06B735FF10A938F513642D7E07130B1303060405050B070A0E251528195E'+
    '2C78128B2FD7058D24F40467209B0113071900000000000000000000000000000000000000000826152B36AD61CB34D76CFE12D654FF06CB42FF06B834FF07A82CFD109932DF167B32A015662D7E167230911492'+
    '36C50AA331F1039C26FE028F1FFF048821EB034618620004020400000000000000000000000000000000020B060B347E508D63DC8CF93FDC73FF13CC4AFF07B935FF07AE2EFF05B030FF06B735FC07B737F906B8'+
    '36FB03B732FE03B12DFF03A628FF049822FE079028E007481B5701040203000000000000000000000000000000000001010120452E4A7ECF99E47BE29AFF46CF6BFF15B43BFF07A92BFF05B530FF04C438FF04CC'+
    '40FF03CF44FF03CA3DFF03BB2EFF04A525FE0A982AE70E6C287E041408120000000000000000000000000000000000000000000000000B19111A75A987B5A0E7B6FE55CE79FB32B251F213AA35FA05B631FF04C7'+
    '39FF04D346FF04D74DFF04CF43FE07B931F70F9A2CD211642571061A0B1600010000000000000000000000000000000000000000000000000000020503054B6B57708FDDADF324B25ED30E53226E0D62208D0584'+
    '24BB049D2BD203A831D805A532D108932BB70D6E23820C3A163A030D050A000000000000000000000000000000000000000000000000000000000000000000000000192D223040A76BC10B7A3F83000C050C0007'+
    '020A0113051A0120092902250A2E02200928031607180209030800010101000000000000000000000000000000000000000000000000000000000000000000000000000000000209050A08371B43022612260001'+
    '01010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
  sClear=
    '424DC60700000000000036000000280000001600000016000000010020000000000000000000120B0000120B00000000000000000000FFFFFF00FFFFFF00222222530808085A0808085808080858080808580808'+
    '0858070707580606065806060658060606580606065806060658060606580505055804040458040404580505055C00000029FFFFFF00FFFFFF00FFFFFF00FFFFFF00DADADAF6C0C0C0FFBFBFBFFFBEBEBEFFBEBE'+
    'BEFFBDBDBDFFBCBCBCFFBBBBBBFFB9B9B9FFB8B8B8FFB7B7B7FFB6B6B6FFB6B6B6FFB3B3B3FFB1B1B1FFB1B1B1FFC2C2C2FF383838A2FFFFFF00FFFFFF00FFFFFF00FFFFFF00DEDEDEF6F6F6F6FFE9E9E9FFECEC'+
    'ECFFECECECFFECECECFFECECECFFECECECFFECECECFFECECECFFECECECFFECECECFFECECECFFECECECFFECECECFFEBEBEBFFFEFEFEFF535353AEFFFFFF00FFFFFF00FFFFFF00FFFFFF00DDDDDDF6EEEEEEFFE0E0'+
    'E0FFE1E1E1FFE1E1E1FFE1E1E1FFE1E1E1FFE1E1E1FFE1E1E1FFE1E1E1FFE1E1E1FFE1E1E1FFE1E1E1FFE1E1E1FFE1E1E1FFE0E0E0FFFDFDFDFF515151ACFFFFFF00FFFFFF00FFFFFF00FFFFFF00DDDDDDF6EEEE'+
    'EEFFE1E1E1FFE2E2E2FFE2E2E2FFE2E2E2FFE2E2E2FFE2E2E2FFE2E2E2FFE2E2E2FFE2E2E2FFE2E2E2FFE2E2E2FFE2E2E2FFE2E2E2FFE1E1E1FFFEFEFEFF515151ACFFFFFF00FFFFFF00FFFFFF00FFFFFF00DDDD'+
    'DDF6F0F0F0FFE2E2E2FFE3E3E3FFE3E3E3FFE3E3E3FFE3E3E3FFE3E3E3FFE3E3E3FFE3E3E3FFE3E3E3FFE3E3E3FFE3E3E3FFE3E3E3FFE3E3E3FFE2E2E2FFFEFEFEFF535353ACFFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00DDDDDDF6F1F1F1FFE4E4E4FFE6E6E6FFE6E6E6FFE6E6E6FFE6E6E6FFE6E6E6FFE6E6E6FFE6E6E6FFE7E7E7FFE7E7E7FFE7E7E7FFE7E7E7FFE7E7E7FFE6E6E6FFFEFEFEFF545454ACFFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00DCDCDCF6F5F5F5FFEBEBEBFFECECECFFECECECFFECECECFFECECECFFECECECFFECECECFFECECECFFE9E9E9FFE9E9E9FFE9E9E9FFE9E9E9FFE9E9E9FFE8E8E8FFFEFEFEFF545454ACFFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00DCDCDCF6F7F7F7FFEEEEEEFFF0F0F0FFF0F0F0FFF0F0F0FFF0F0F0FFF0F0F0FFF0F0F0FFF0F0F0FFEEEEEEFFEDEDEDFFEBEBEBFFECECECFFECECECFFEBEBEBFFFEFEFEFF555555ACFFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00DCDCDCF6F9F9F9FFF3F3F3FFF3F3F3FFF3F3F3FFF3F3F3FFF3F3F3FFF3F3F3FFF3F3F3FFF3F3F3FFF3F3F3FFF3F3F3FFF2F2F2FFEEEEEEFFEEEEEEFFEDEDEDFFFEFEFEFF5656'+
    '56ACFFFFFF00FFFFFF00FFFFFF00FFFFFF00DCDCDCF6F9F9F9FFF5F5F5FFF5F5F5FFF5F5F5FFF5F5F5FFF5F5F5FFF5F5F5FFF5F5F5FFF5F5F5FFF5F5F5FFF5F5F5FFF5F5F5FFF3F3F3FFF0F0F0FFEEEEEEFFFEFE'+
    'FEFF575757ACFFFFFF00FFFFFF00FFFFFF00FFFFFF00DCDCDCF6FCFCFCFFF7F7F7FFF7F7F7FFF7F7F7FFF7F7F7FFF7F7F7FFF7F7F7FFF7F7F7FFF7F7F7FFF7F7F7FFF7F7F7FFF7F7F7FFF7F7F7FFF6F6F6FFF2F2'+
    'F2FFFEFEFEFF585858ACFFFFFF00FFFFFF00FFFFFF00FFFFFF00DCDCDCF6FCFCFCFFF8F8F8FFF8F8F8FFF8F8F8FFF8F8F8FFF8F8F8FFF8F8F8FFF8F8F8FFF8F8F8FFF8F8F8FFF8F8F8FFF8F8F8FFF8F8F8FFF9F9'+
    'F9FFF8F8F8FFFEFEFEFF585858ACFFFFFF00FFFFFF00FFFFFF00FFFFFF00DCDCDCF6FDFDFDFFF9F9F9FFF9F9F9FFF9F9F9FFF9F9F9FFF9F9F9FFF9F9F9FFF9F9F9FFF9F9F9FFF9F9F9FFF9F9F9FFF9F9F9FFFBFB'+
    'FBFFF9F9F9FFF9F9F9FFFEFEFEFF595959ACFFFFFF00FFFFFF00FFFFFF00FFFFFF00DCDCDCF6FDFDFDFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFF9F9'+
    'F9FFF6F6F6FFF0F0F0FFE9E9E9FFFEFEFEFF595959ACFFFFFF00FFFFFF00FFFFFF00FFFFFF00DCDCDCF6FDFDFDFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFF9F9'+
    'F9FFF6F6F6FFEDEDEDFFE3E3E3FFDBDBDBFFFBFBFBFF5E5E5EB0FFFFFF00FFFFFF00FFFFFF00FFFFFF00DCDCDCF6FDFDFDFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFB'+
    'FBFFF8F8F8FFD7D7D7FFBEBEBEFFBBBBBBFFB9B9B9FFDCDCDCFF3F3F3F89FFFFFF00FFFFFF00FFFFFF00FFFFFF00DCDCDCF6FDFDFDFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFB'+
    'FBFFFBFBFBFFEEEEEEFFBDBDBDFFDDDDDDFFEDEDEDFFF0F0F0FF616161A70000000BFFFFFF00FFFFFF00FFFFFF00FFFFFF00DCDCDCF6FDFDFDFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFB'+
    'FBFFFBFBFBFFF9F9F9FFECECECFFC6C6C6FFF6F6F6FFFEFEFEFF757575AB0000000901010100FFFFFF00FFFFFF00FFFFFF00FFFFFF00DCDCDCF6FDFDFDFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFB'+
    'FBFFFBFBFBFFFBFBFBFFF9F9F9FFEDEDEDFFCECECEFFF7F7F7FF707070A9000000090404040002020200FFFFFF00FFFFFF00FFFFFF00FFFFFF00DCDCDCF6FEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFE'+
    'FEFFFEFEFEFFFEFEFEFFFEFEFEFFFDFDFDFFF7F7F7FFECECECFF747474AB0000000B050505000606060002020200FFFFFF00FFFFFF00FFFFFF00FFFFFF00D2D2D27ADCDCDCFBDBDBDBEDDBDBDBEDDBDBDBEDDBDB'+
    'DBEDDBDBDBEDDBDBDBEDDBDBDBEDDBDBDBEDDBDBDBEDE2E2E2F48F8F8FB80606061104040400060606000505050002020200FFFFFF00FFFFFF00';
  sGroupAdd=
    '424DC60700000000000036000000280000001600000016000000010020000000000000000000120B0000120B00000000000000000000FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF001918191522211F2C137F349611903BBA108D39B8136C326E1B181A1A09090908FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00090909051C1C1C162323231F2424241F16161616121212191E1C1E3D23241E670DA84CFC0AFF9CFF0CF385FF137636BF261E244D1C1D1C2002000202FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF001F1F'+
    '1F2C505050796D6D6DBB656565D6535353E25A5A5AE1707070D3707070B4403E3F791E21194F08A74BF600FF9DFF00F885FF0E7F36A11D0C1A1413081306FFFFFF00FFFFFF00FFFFFF00FFFFFF000E0E0E0C5252'+
    '5270B4B4B4E8C1C1C1FFBBBBBBFFB6B6B6FFA8A8A8FFAEABAEFFBCB5BAFFC1BCBFFF958D92FF534E4DD00EA64DFA0CFE9BFF10F085FF0A943685FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00040404037272'+
    '7284DDDDDDFFC3C3C3FFBEBEBEFFC4C4C4FFC1C1C1FFA5A2A5FF849A88FF708F77FF758A79FF708777FF6E8674FF3DDB88FF1EF89AFF2FE98AFF15A53EC114A33AB114A33AB114A139B10998296DFFFFFF003333'+
    '332BCCCCCCF2797578FF959595FFA6A6A6FF9D9D9DFF848484FF5C545AFF367543FF58DE7EFF57DD87FF55E08BFF54E38FFF4BE08BFF44E28AFF45E68EFF57EA99FF56E591FF53DC85FF51D67BFF0F9F33C7FFFF'+
    'FF005C5C5C577B777AFF858585FFBFBFBFFFBBBBBBFFB6B6B6FFB4B4B4FFA1989EFF438151FF6ED78FFF98E7B8FF97EABBFF97ECBCFF80E9ABFF4FDC87FF4FDE88FF3CD57EFF3ED580FF3CD47CFF3DD47CFF0FA0'+
    '37C4FFFFFF0032323255ACACACFFDADADAFFC0C0C0FFC0C0C0FFC1C1C1FFC2C2C2FFC6C0C4FF7DA688FF19923EFF189E4AFF129D48FF0C963EFF46CB74FF61F5B3FF53D67FFF00A731DA00A830D000AD33D000AF'+
    '37D000A11870FFFFFF003E3E3E54D1D1D1FF767275FF817F81FFA1A1A1FF9C9C9CFF878787FF6D6D6DFF797778FF999496FFACA7A9FF928B8FFF4F6656FF48B166FF81FBC8FF62D27EFF0B9538AAFFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00E4E4E454736F72FF7C7C7CFFB5B5B5FFB8B8B8FFAEAEAEFFA8A8A8FFA5A5A5FFA9A9A9FFAFAFAFFFBBBABBFFABA9ABFF7A7F7BFF52B169FFC7FEE9FF54DC87FF0B9438ABFFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF005B5B5B549D9D9DFFD6D6D6FFC5C5C5FFC9C9C9FFD1D1D1FFD5D5D5FFD9D9D9FFD8D8D8FFD4D4D4FFD4D4D4FFB8B7B8FF959995FF7BCA90FFB3FEE2FF7CDA97FF0B94'+
    '38ACFFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF0036363654D8D8D8FFA0A0A0FFA3A3A3FFBCBCBCFFCBCBCBFFD3D3D3FFD6D6D6FFD5D5D5FFD2D2D2FFC9C9C9FFB3B2B3FF787477FF149B48FF0BC25CFF0CB5'+
    '4EFF0B9438ABFFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00DEDEDE53858384FF716F71FFA6A6A6FFBDBDBDFFCBCBCBFFD4D4D4FFD7D7D7FFD7D7D7FFD2D2D2FFC9C9C9FFBABABAFFA1A1A1FF647567FF7890'+
    '7CF61282399900320106FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00CECECE547A787AFF949494FF9D9D9DFFB4B4B4FFC4C4C4FFCECECEFFD2D2D2FFD2D2D2FFCDCDCDFFC1C1C1FFAFAFAFFF989898FF9591'+
    '94FF9A9599F62B262A18FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF0089898955A2A2A2FFACACACFFAFAFAFFFB8B8B8FFC3C3C3FFCCCCCCFFCFCFCFFFCFCFCFFFCACACAFFC1C1C1FFB6B6B6FFAEAE'+
    'AEFFABABABFFA5A5A5F79595951FFFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00C1C1C151BFBFBFFFCECECEFFCCCCCCFFCBCBCBFFCBCBCBFFCCCCCCFFCDCDCDFFCDCDCDFFCCCCCCFFCBCBCBFFCCCC'+
    'CCFFCCCCCCFFCDCDCDFFBCBCBCF4D6D6D615FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00E5E5E516D2D2D2EADEDEDEFFDDDDDDFFDDDDDDFFDDDDDDFFDDDDDDFFDDDDDDFFDDDDDDFFDDDDDDFFDDDD'+
    'DDFFDDDDDDFFDDDDDDFFDDDDDDFFCBCBCBBBD1D1D102FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00DDDDDD53E5E5E5F8F0F0F0FFEEEEEEFFEDEDEDFFEDEDEDFFEDEDEDFFEDEDEDFFEDED'+
    'EDFFEDEDEDFFEEEEEEFFEFEFEFFFDDDDDDE0D1D1D128FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00D4D4D438E2E2E2CCF6F6F6FFFEFEFEFFFFFFFFFFFFFFFFFFFFFF'+
    'FFFFFFFFFFFFFDFDFDFFF2F2F2FBDADADAAECECECE19FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00BBBBBB3FC2C2C277CBCBCBAFCACA'+
    'CAC6CDCDCDC2CBCBCBA1C5C5C56AC0C0C02CFFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00';
  sGroupDel=
    '424DC60700000000000036000000280000001600000016000000010020000000000000000000120B0000120B00000000000000000000FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00000000001111110004040400121212000F0F0F000A0A'+
    '0A001C1C1C0021212100222222000F0F0F0001010100090909070C0C0C0B0C0C0C0B0F0F0F0B1616160A0B0B0B090B0B0B09090909060303030200000000FFFFFF000000000011111100020202000A0A0A000A0A'+
    '0A00181818102E2E2E272E2E2E303131312F2727272017171719191919252222223D24242443232323432323234324242442242424402323232D1414140F03030301FFFFFF00000000000C0C0C00040404004E4E'+
    '4E58828282B58C8C8CEA797979FE666666FF737373FF919191F88E8E8ED66D6D6D9B282828491A1A1A282020202A2323232C1E1E1B281E1C151D19170E0E0504000200000000FFFFFF00000000002525251EA2A2'+
    'A2BCCCCCCCFFC7C7C7FFC1C1C1FFC8C8C8FFCACACAFFCCCCCCFFC9C8C5FFCECDC9FFD0CFCCFFBCBAB7E85554507214120F0BFFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF0015151510BEBE'+
    'BECDCCCCCCFFB0B0B0FFB6B6B6FFB4B4B4FFABABABFF9F9F9FFF979797FF6A71ADFF6770AFFF616BA9FF646EACFF636EACFC14249EB50518B687041BCC82041BCF82041ACF820419CD820418CD49FFFFFF006A6A'+
    '6A63BABABAFF747474FF9F9F9FFFA4A4A4FF949494FF7E7E7EFF676661FF545776FF3C53D6FF4564DEFF4367E1FF436BE4FF4772EBFF4774EFFF4370EFF8426EEFF64269E9F64464E4F73E58DCF60B1FCCC2FFFF'+
    'FF008F8F8F8C777777FFB6B6B6FFC6C6C6FFBDBDBDFFC0C0C0FFCDCDCDFFD4D4CDFF9093BCFF2045DFFF2D5CEAFF2D63F0FF2D68F5FF2D6CF7FF2D6EF9FF2E6FF9FF2E6CF6FF2E68F3FF2F63EEFF2C58E7FF0922'+
    'CFCCFFFFFF008080808DCFCFCFFFC6C6C6FFAEAEAEFFB3B3B3FFB4B4B4FFAEAEAEFFAFAFA8FF8182A9FF0419CDFF0522D2FF0526D4FF0729D9FF082CDBFF0529D9FF0B2FDEFF0C2FD8FF0C2DD5FF0D2AD3FF0B24'+
    'CFFF0317C6CEFFFFFF00BCBCBC8BADADADFF737373FF949494FFA1A1A1FF949494FF7B7B7BFF626260FF6C6C75FF5B5B9BFF696BAEFF6669ACFF4E5295FF45498CFF5A62C1F00717AFA90312C6A70312C5A70311'+
    'C2A70311C0A70310BA69FFFFFF00D3D3D38A6C6C6CFFA7A7A7FFC0C0C0FFBDBDBDFFBDBDBDFFB9B9B9FFB8B8B8FFBBBBBAFFC7C6BDFFCBCBC2FFCAC9C0FFBEBDB4FF838279FF9A998FDD1A190C00000041000000'+
    'B1000000A50000009A0000009500FFFFFF007B7B7B8CC5C5C5FFCECECEFFB9B9B9FFC6C6C6FFCFCFCFFFD1D1D1FFD2D2D2FFD2D2D2FFCFCFCFFFCBCBCBFFBDBDBDFFC0C0C0FFCFCFCFFF868686DF080807070000'+
    '0000000059000000B00000009D0000009600FFFFFF00ADADAD8BC0C0C0FF808080FF989898FFBFBFBFFFCCCCCCFFD3D3D3FFD5D5D5FFD5D5D5FFD0D0D0FFC5C5C5FFB3B3B3FF888888FF929292FFBCBCBCDF1111'+
    '1107000000000000000000004D000000A00000009C00FFFFFF00DCDCDC866E6E6EFF818181FF999999FFBDBDBDFFCACACAFFD2D2D2FFD5D5D5FFD4D4D4FFCECECEFFC3C3C3FFB2B2B2FF8D8D8DFF717171FF8E8E'+
    '8EE71919190700000000000000000000000000003D0000008D00FFFFFF00B6B6B68D838383FF8B8B8BFF9F9F9FFFB5B5B5FFC3C3C3FFCCCCCCFFCFCFCFFFCECECEFFC8C8C8FFBBBBBBFFA8A8A8FF969696FF8C8C'+
    '8CFF7C7C7CE7060606060000000000000000000000000000000000000B00FFFFFF00BDBDBD8EA9A9A9FFB3B3B3FFB6B6B6FFBBBBBBFFC3C3C3FFCACACAFFCCCCCCFFCBCBCBFFC6C6C6FFBEBEBEFFB7B7B7FFB4B4'+
    'B4FFB0B0B0FFA6A6A6DFA1A1A1069C9C9C009B9B9B009B9B9B009B9B9B009B9B9800FFFFFF00CECECE7BC8C8C8FFCFCFCFFFCECECEFFCDCDCDFFCDCDCDFFCDCDCDFFCECECEFFCDCDCDFFCDCDCDFFCDCDCDFFCECE'+
    'CEFFCECECEFFCFCFCFFFBCBCBCDAD6D6D603DADADA00DADADA00DADADA00DADADA00DADADA00FFFFFF00DCDCDC2CD4D4D4FCE0E0E0FFDEDEDEFFDEDEDEFFDEDEDEFFDEDEDEFFDEDEDEFFDEDEDEFFDEDEDEFFDEDE'+
    'DEFFDEDEDEFFE0E0E0FFDADADAFFCBCBCB7FD0D0D000CFCFCF00CFCFCF00CFCFCF00CFCFCF00CFCFCF00FFFFFF00DFDFDF00DADADA62E4E4E4FAEFEFEFFFEEEEEEFFECECECFFECECECFFECECECFFECECECFFECEC'+
    'ECFFEDEDEDFFEFEFEFFFEAEAEAFFD5D5D5A6CFCFCF04CFCFCF00CFCFCF00CFCFCF00CFCFCF00CFCFCF00CFCFCF00FFFFFF00DFDFDF00DBDBDB00CDCDCD34DBDBDBB8F0F0F0F9FAFAFAFFFEFEFEFFFFFFFFFFFEFE'+
    'FEFFFCFCFCFFF5F5F5FFE4E4E4D6CDCDCD66CCCCCC00D0D0D000CFCFCF00CFCFCF00CFCFCF00CFCFCF00CFCFCF00CFCFCF00FFFFFF00DFDFDF00DBDBDB00CACACA00BABABA00B1B1B123AEAEAE50B2B2B282ACAC'+
    'AC9AB8B8B891B6B6B664B4B4B436B5B5B503C3C3C300CECECE00D0D0D000CFCFCF00CFCFCF00CFCFCF00CFCFCF00CFCFCF00CFCFCF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00';
  sGroupUp=
    '424DC60700000000000036000000280000001600000016000000010020000000000000000000120B0000120B00000000000000000000FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF000000000000000000191919000F0F0F00151515001111'+
    '1100171717002424240026262600111111000101010108090A061C130B182A190A2528190A2427170824130E0A0E0405050301010101FFFFFF00FFFFFF00FFFFFF000000000000000000191919000F0F0F001212'+
    '12000D0D0D001414140D2020201A2222221C17171715121313151D1D1E26B96E1CC3DE821AE7DB811BE2E38419EAB5641CC112181F1706060604FFFFFF00FFFFFF00FFFFFF000000000000000000181818000B0B'+
    '0B042C2C2C415555558E656565C3585858D44B4B4BD9616161D1646566BA47433C84E98E1CF4FFA71DFFFFA61DFFFFAB1DFFD27A1CD1FFFFFF0000000200FFFFFF00FFFFFF00FFFFFF0000000000000000001B1B'+
    '1B1773737399B7B7B7F9B8B8B8FFB3B3B3FFAAAAAAFFA2A2A2FFB4B4B4FFAAADB3FF7E7C7AFFE8962DFFFFBD3BFFFFBB36FFFFB831FFEA911FD4FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00000000001212'+
    '120DA8A8A8BDD8D8D8FFBEBEBEFFC0C0C0FFC4C4C4FFC4C4C4FFC5C5C5FFAAAAABFFCE9760FFCE9B50FFE69433FFFFCF5CFFFFCD59FFFFCD57FFEC9B30ECEEA1289CE1862798FFFFFF00FFFFFF00FFFFFF002020'+
    '200E7A7A7A72C9C9C9FF808080FF9D9D9DFFA3A3A3FF939393FF7A7A7AFF6A6A6AFF636366FFDA9B45FFFFED99FFFFDB75FFFFDC75FFFFDC72FFFFDA6EFFFFD765FFFFEBB4FFE89F4BC9FFFFFF00FFFFFF00FFFF'+
    'FF00A7A7A736B5B5B5B46D6D6DFFA2A2A2FFBCBCBCFFB2B2B2FFB0B0B0FFABABABFFA4A4A4FF9DA0A5FFC59453FFFFD279FFFFE4B0FFFFDD87FFFFE087FFFFE081FFFFE7ACFFFFF2C7FFE48F28A8FFFFFF00FFFF'+
    'FF00FFFFFF005E5E5E46888888C4C0C0C0FFCFCFCFFFBFBFBFFFC1C1C1FFC2C2C2FFC3C3C3FFC4C4C4FFC6C7C7FF9D9EA4FFCB8D45FFFFC97AFFFFE4BBFFFFDC98FFFFE4B9FFFFE7ADFFE99831D0FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF0041414144A9A9A9C2BBBBBBFF7E7E7EFF989898FFA0A0A0FF949494FF7C7C7CFF6B6B6BFF888888FF9B9DA0FF86817DFFD27E28FFFABF78FFFFE5BCFFFFD791FFEB9730E2FFAF1B09FFB0'+
    '2000FFFFFF00FFFFFF00FFFFFF00E2E2E243C8C8C8C1676767FF989898FFB5B5B5FFB0B0B0FFA5A5A5FF9E9E9EFF9A9A9AFFA3A3A3FFB1B0B0FFADB1B5FF958275FFD76F1BFFF2B47BFFE28C2BEBBB720E24BE74'+
    '1200BE741200FFFFFF00FFFFFF00FFFFFF006A6A6A44878787C2B6B6B6FFD1D1D1FFC1C1C1FFCECECEFFD1D1D1FFD4D4D4FFD7D7D7FFD3D3D3FFD2D2D2FFD0D0D0FFABB2B7FFAC836DFFE4854CFF77563D950000'+
    '00000000000000000000FFFFFF00FFFFFF00FFFFFF003C3C3C44A3A3A3C2CBCBCBFF898989FFAFAFAFFFC2C2C2FFCDCDCDFFD2D2D2FFD4D4D4FFD2D2D2FFCBCBCBFFBFBFBFFFACACACFF949799FFC6B9B5FF6B6E'+
    '7092FFFFFF000000000000000000FFFFFF00FFFFFF00FFFFFF00CACACA3FC9C9C9BE737373FF8E8E8EFFAFAFAFFFC2C2C2FFCECECEFFD4D4D4FFD6D6D6FFD3D3D3FFCCCCCCFFC0C0C0FFACACACFF878787FF8486'+
    '87FF787878AAFFFFFF000000000000000000FFFFFF00FFFFFF00FFFFFF00DCDCDC44A4A4A4C2878787FF939393FFA5A5A5FFBBBBBBFFC7C7C7FFCECECEFFD0D0D0FFCECECEFFC6C6C6FFB8B8B8FFA1A1A1FF9292'+
    '92FF919191FF5E5E5EAEFFFFFF000000000000000000FFFFFF00FFFFFF00FFFFFF00A3A3A3459C9C9CC3A8A8A8FFABABABFFB0B0B0FFBCBCBCFFC5C5C5FFCCCCCCFFCDCDCDFFCBCBCBFFC4C4C4FFBABABAFFAFAF'+
    'AFFFAAAAAAFFADADADFF636363AEFFFFFF001F1F1F001F1F1F00FFFFFF00FFFFFF00FFFFFF00CECECE3ABEBEBEB8C7C7C7FFCACACAFFCACACAFFC9C9C9FFC9C9C9FFCBCBCBFFCBCBCBFFCBCBCBFFC9C9C9FFC9C9'+
    'C9FFCACACAFFCBCBCBFFC4C4C4FFB6B6B680BEBEBE00BDBDBD00BDBDBD00FFFFFF00FFFFFF00FFFFFF00E2E2E20CD6D6D670D5D5D5FFDCDCDCFFDBDBDBFFDBDBDBFFDBDBDBFFDBDBDBFFDBDBDBFFDBDBDBFFDBDB'+
    'DBFFDBDBDBFFDBDBDBFFDDDDDDFFD2D2D2FFCECECE34D5D5D500D4D4D400D4D4D400FFFFFF00FFFFFF00FFFFFF00E0E0E000DFDFDF00D9D9D9AEE9E9E9FFECECECFFEAEAEAFFEAEAEAFFEAEAEAFFEAEAEAFFEAEA'+
    'EAFFEAEAEAFFEAEAEAFFEDEDEDFFE7E7E7FFD2D2D28ACFCFCF00CFCFCF00CFCFCF00CFCFCF00FFFFFF00FFFFFF00FFFFFF00DFDFDF00DFDFDF00D6D6D601D3D3D379E9E9E9F1F8F8F8FFFDFDFDFFFDFDFDFFFEFE'+
    'FEFFFCFCFCFFFBFBFBFFF6F6F6FFE5E5E5E4CDCDCD5BCECECE00CFCFCF00CFCFCF00CFCFCF00CFCFCF00FFFFFF00FFFFFF00FFFFFF00DFDFDF00DFDFDF00D7D7D700C7C7C700B9B9B915BCBCBC5ABFBFBF8BC7C7'+
    'C7B9C1C1C1C6CCCCCCB3C7C7C782BBBBBB4DBBBBBB09C6C6C600CFCFCF00CFCFCF00CFCFCF00CFCFCF00CFCFCF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00';
  sGroupDown=
    '424DC60700000000000036000000280000001600000016000000010020000000000000000000120B0000120B00000000000000000000FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF000000000000000000141414000C0C0C000C0C0C000F0F'+
    '0F0014141400222222002323230019191900030303000606060014141415171B2229694620646B472065161B22281A1A191405050501FFFFFF00FFFFFF00FFFFFF000000000000000000141414000C0C0C000909'+
    '09000C0C0C001818180D2A2A2A1F2B2B2B232424241A080808060F0F0F061D1F22422D24216FDCAA3CF2E2AF3CF7392B21751B1F25441212120DFFFFFF00FFFFFF00FFFFFF000000000000000000101010000E0E'+
    '0E074848485C787878BA7A7A7AE16A6A6AF45B5B5BF8777777F0868686D7636465A52C2A2F4DC18C39D0FFFF4BFFFFFF4DFFCF9B3BE12E221717FFFFFF00FFFFFF00FFFFFF00FFFFFF0000000000000000003232'+
    '322EA5A5A5C9C5C5C5FFC4C4C4FFBFBFBFFFB9B9B9FFBABABAFFBFBFBFFFB7B7B7FF868A93FFC09559F8FFE848FCFFF253FFFFF353FFFFEE4FFFE19B3BADFFFFFF00FFFFFF00FFFFFF00FFFFFF00000000001D1D'+
    '1D15CACACADBCDCDCDFFB5B5B5FFBCBCBCFFBABABAFFB3B3B3FFB1B1B1FFB9B9B9FF94959AFFAE906FFFFFDA5AFFFFE760FFFFE65CFFFFE75BFFFFE85DFFFFDB57FFE39A4185FFFFFF00FFFFFF00FFFFFF004242'+
    '4206A4A4A48DAAAAAAFF7F7F7FFFA2A2A2FFA1A1A1FF8E8E8EFF737373FF636363FF828282FF897776FFD2AB47FFFFC447FFFCD662FFFFE068FFFFE066FFFFDF67FFFFE37BFFFFCE53BACD724A73FFFFFF00FFFF'+
    'FF00E0E0E01FBBBBBBBF767676FFB8B8B8FFC2C2C2FFBDBDBDFFBCBCBCFFC3C3C3FFC3C3C3FFC5C5C5FFBE9B90FFD48F57FFE09330FFF8C564FFFFD674FFFFD571FFFFD36BFFE9A257EDDF8F3EC0CD724A73FFFF'+
    'FF00FFFFFF007F7F7F208A8A8AC1D1D1D1FFBFBFBFFFB3B3B3FFB7B7B7FFB5B5B5FFB0B0B0FFAEAEAEFFB4B4B4FFBFAAA2FFB09D9BFFC2744DFFF1B15BFFFCC371FFFBC370FFFBBF67FFD5773BB5C6765B42C676'+
    '5B42FFFFFF00FFFFFF0055555520BCBCBCC19E9E9EFF797979FF9A9A9AFF9D9D9DFF8D8D8DFF707070FF5F5F5FFF7F7F7FFF9D9D9DFF959799FFBF6E45FFE59850FFEEA763FFEDA760FFEDA35AFFD2713AB6FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00D7D7D720B3B3B3C1707070FFAFAFAFFFBFBFBFFFB9B9B9FFB6B6B6FFB9B9B9FFB9B9B9FFBBBBBBFFBEBEBEFFB6B8B9FFC9744AFFDE8949FFE49453FFE89856FFE69856FFCD6B'+
    '3AB6FFFFFF00FFFFFF00FFFFFF00FFFFFF0073737320868686C1CDCDCDFFC7C7C7FFBCBCBCFFCBCBCBFFCFCFCFFFD2D2D2FFD4D4D4FFD1D1D1FFCDCDCDFFC9CACBFFCC7F5AFFBD725BFFC97453FFB9623FE7C85B'+
    '30CACE6C3EBCFFFFFF00FFFFFF00FFFFFF00FFFFFF004F4F4F20B8B8B8C1ADADADFF8A8A8AFFAFAFAFFFC4C4C4FFCFCFCFFFD5D5D5FFD5D5D5FFD3D3D3FFCDCDCDFFBFBFBFFFA8A9A9FF878E90FFBEC5C7FF666F'+
    '737E2F040000700C01005D000000FFFFFF00FFFFFF00FFFFFF00E4E4E420C2C2C2C0717171FF919191FFAEAEAEFFC2C2C2FFCDCDCDFFD3D3D3FFD4D4D4FFD2D2D2FFCBCBCBFFBEBEBEFFA9A9A9FF888888FF8282'+
    '82FF7777777E000000000000000000000000FFFFFF00FFFFFF00FFFFFF00C3C3C320949494C1929292FF969696FFA6A6A6FFBABABAFFC7C7C7FFCECECEFFD0D0D0FFCDCDCDFFC4C4C4FFB5B5B5FFA0A0A0FF9696'+
    '96FF939393FF79797981373737003939390039393900FFFFFF00FFFFFF00FFFFFF0081818120979797C1B3B3B3FFB6B6B6FFB9B9B9FFBEBEBEFFC6C6C6FFCBCBCBFFCCCCCCFFCACACAFFC4C4C4FFBCBCBCFFB9B9'+
    'B9FFB4B4B4FFABABABFFA6A6A681CBCBCB00C8C8C800C8C8C800FFFFFF00FFFFFF00FFFFFF00D8D8D817C2C2C2B3CECECEFFD0D0D0FFCFCFCFFFCECECEFFCECECEFFCECECEFFCECECEFFCECECEFFCECECEFFCFCF'+
    'CFFFCFCFCFFFD1D1D1FFC9C9C9FFC5C5C568D6D6D600D4D4D400D4D4D400FFFFFF00FFFFFF00FFFFFF00D4D4D400D2D2D24ED9D9D9FFE2E2E2FFE0E0E0FFE0E0E0FFE0E0E0FFE0E0E0FFE0E0E0FFE0E0E0FFE0E0'+
    'E0FFE0E0E0FFE0E0E0FFE2E2E2FFD1D1D1E9CFCFCF17D1D1D100D1D1D100D1D1D100FFFFFF00FFFFFF00FFFFFF00C5C5C500C8C8C800D6D6D67BE8E8E8FFF2F2F2FFEFEFEFFFEDEDEDFFEDEDEDFFEDEDEDFFEDED'+
    'EDFFEEEEEEFFF0F0F0FFF2F2F2FFDDDDDDF0C8C8C83DCCCCCC00CCCCCC00CCCCCC00CCCCCC00FFFFFF00FFFFFF00FFFFFF00C5C5C500C8C8C800CDCDCD00C8C8C834D6D6D6B8F1F1F1FBFCFCFCFFFEFEFEFFFFFF'+
    'FFFFFDFDFDFFFAFAFAFFECECECF2CDCDCD90AEAEAE18BCBCBC00CDCDCD00CCCCCC00CCCCCC00CCCCCC00FFFFFF00FFFFFF00FFFFFF00C5C5C500C8C8C800CECECE00C2C2C2009D9D9D009F9F9F1A9393934AA0A0'+
    'A07898989884A7A7A76D9292923AA7A7A70FA4A4A400ADADAD00BDBDBD00CDCDCD00CCCCCC00CCCCCC00CCCCCC00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00';
  sItemAdd=
    '424DC60700000000000036000000280000001600000016000000010020000000000000000000120B0000120B00000000000000000000FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF000000000000000000000000000000000000000000000000000000'+
    '000000000000000B002E005F20AA005F22A7005F22A7005F21A9000B002DFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'+
    '00000000000000000000006E26A600B045FF00B851FF00B953FF00B347FF007023AFFFFFFF0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'+
    '00000000000000000000000000000D7532A868E0A0FF67E4A8FF67E5A9FF68E1A1FF0D782EB2FFFFFF00000000000000000000000000000000000000000000000000000000000000000000000000000000000000'+
    '000000000000000000000000000000000000067A34A89AFECFFF9BF8CFFF9BF8CFFF9BFCCEFF077B2FB2FFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000'+
    '00000000000000000000000000000000000000000000007A32A800F282FF00E881FF00E881FF00EF7FFF007A2BB2FFFFFF0000000000000000000000000000000000000000000000000000000000000000000000'+
    '0000000000000000000000000000000000000000000000000000007931A800EA7AFF00E078FF00E078FF00E878FF00792AB2FFFFFF00000000000000000000000000000000000000000000000000000000000000'+
    '000000000000000000000000000000000000000000000000000000000000007730A500E471FF04D86FFF05D870FF07E171FF007729AFFFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF000000'+
    '0000000100080013014B0022057800210573002106730021067300210673001A036B007A2DCD2CDF7BFF32D77CFF31D77CFF2DDD7AFF037A2AD3005D2394005E239A005E239A005E239A005E239A005D229D0016'+
    '015100050019000C0027006C1ECF009B39FF009D3DFF00A242FF00A546FF00A747FF00A446FF02AD4AFF3DD479FF41D47CFF3ED37BFF3AD277FF05A94AFF00A746FF00A847FF00A746FF00A343FF009E3EFF009B'+
    '3AFF007920E300290662000C0029147B30D232BB69FF30BC6BFF2EC270FF2EC674FF2DC976FF2CC876FF2EC870FF4CCF7AFF4BCF7AFF48CF79FF47CE77FF30C673FF28C873FF29C672FF28C46FFF28C06BFF27BA'+
    '65FF27B760FF0D862CE7002D0667000B00292E7F33D185D38CFF7FCC89FF7DCE8BFF7BD08DFF7AD38EFF79D491FF63CF81FF56CC7AFF55CC7AFF53CC78FF52CB77FF6AD087FF6CCF86FF6ACD82FF68CA7DFF66C6'+
    '77FF65C372FF64C46EFF238829E7002B0367000B0029237B27D27ACD7FFF74C87DFF72CA7FFF70CC80FF6ECD82FF6CCE83FF6CD084FF62CA7CFF5FCA7AFF5DC979FF5BC877FF60CC7AFF5ECA77FF5CC672FF5AC3'+
    '6DFF57C067FF56BB61FF58BC5FFF27882AE7002B046700070017116115B15CAE5DF95DAB60F05CAB61F05BAD63F05BAE64F05BB166EF52AE61F864C677FF6AC87DFF68C67BFF64C678FF56AF63F955B161EF55AC'+
    '5EF054AB5CF053AA59F054A956F050AA51F7116F14C10021004600000000003C060A006D0617006606160065071600650716006D0716002C000A016822AF6ACC76FF75C880FF72C67DFF6BCB78FF076A24B8002E'+
    '000900710716006A0616006B0616006C0516007505170045040B000C010100000000003D090000720F00006B0E00006A0F000072100000380A0000000000016A25A672CB78FF7FC683FF7CC580FF75CA7BFF086B'+
    '28B0FFFFFF00003B090000770E00006F0D0000700C0000790C0000470600000C010000000000003D090000720F00006B0E0000721000003809000000000000000000016924A87BCA7AFF88C687FF85C583FF7FCA'+
    '7DFF086A28B2FFFFFF0000000000003C090000780E0000710C0000790C0000470600000C010000000000003D090000720F0000750F0000380A00000000000000000000000000026723A883CA7DFF92C88CFF8FC6'+
    '89FF88CA82FF086928B2FFFFFF000000000000000000003B0700007A0D0000790C0000470600000C010000000000003D0900007B0F00003A090000000000000000000000000000000000026723A88FCF87FF9ECE'+
    '97FF9ACC94FF94CF8DFF096828B3FFFFFF00000000000000000000000000003C070000810D0000470600000B0100000000000041090000430A000000000000000000000000000000000000000000066727A193CE'+
    '8DFFA1CD9CFF9FCC99FF96CE91FF0B682BABFFFFFF000000000000000000000000000000000000450700004B0600000D010000020000003E0900001003000000000000000000000000000000000000000000041A'+
    '0A32216E2FA6236C309F236C2F9F21702DA504190B310000000000000000000000000000000000000000001403000048060000100100FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00';
  sItemDel=
    '424DC60700000000000036000000280000001600000016000000010020000000000000000000120B0000120B00000000000000000000FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF000000'+
    '000000000018000000270000002600000026000000260000002600000026000000260000002600000026000000260000002600000026000000260000002600000026000000260000002600000028000000160000'+
    '000100000918000271C4000495F4000594F3000596F3000597F3000698F3000699F300079AF300079BF300079BF300079BF300079BF300079BF300069AF300069AF3000598F3000598F3000596F3000497F50002'+
    '70BD0000152C0000172B0110B7F1021AD0FF021DCFFF0220D1FF0222D3FF0224D5FF0226D6FF0227D7FF0228D8FF0229D8FF0229D8FF0229D8FF0228D7FF0226D6FF0225D5FF0223D3FF0220D1FF021ECFFF021B'+
    'D0FF0211BBF200023B52000017290F2EC5ED7B95F0FF7A95EFFF7A97F1FF7A99F2FF7A9BF3FF7A9CF4FF7A9DF6FF7A9EF6FF7A9EF6FF7A9EF6FF7A9DF6FF7A9CF5FF7A9BF3FF7A9AF3FF7A98F1FF7A96F0FF7A93'+
    'EEFF7D95EEFF243BC9EE01023C4F000018290B2EC8ED2050E9FF1F52E9FF1F56ECFF1F5AEFFF1F5DF2FF1F60F4FF1F62F5FF1F63F7FF1F63F7FF1F63F7FF1F62F6FF1F60F4FF1F5DF2FF1F5AEFFF1F56ECFF1F52'+
    'E8FF1F4DE4FF214AE3FF0A25C7EE00013E4F0000192A1B35C7EE4F6FE9FF4B6EE8FF4B71EAFF4B74EDFF4B76EFFF4B78F0FF4B79F1FF4B7AF2FF4B7AF2FF4B7AF2FF4B79F1FF4B77F0FF4B76EEFF4B73ECFF4B71'+
    'EAFF4B6DE7FF4B6AE5FF4F6BE5FF1C33C9F0000241510000151B1225BAE45C71E5FF5B73E3FF5A76E6FF5A79E9FF5A7BEAFF5A7DECFF5A7EEDFF5A7FEEFF5A80EEFF5A80EFFF5A7FEEFF5A7EEDFF5A7CECFF5A7B'+
    'EAFF5A78E8FF5A75E6FF5A72E3FF5E72E5FF2437BDDA0003333100000807020F9F7C122AD39F1330D39F1236D89F123BDC9F1240E09F1243E39F1246E69F1249E89F124AE89F124BE99F124BE99F1249E89F1247'+
    'E69F1244E39F1241E19F123BDD9F1237D99F1333DB9F071A9E730002190EFFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFF'+
    'FF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00';
  sItemUp=
    '424DC60700000000000036000000280000001600000016000000010020000000000000000000120B0000120B00000000000000000000000000000000000000000000000000000000000001020100070F08020B18'+
    '0E090D1C100F0D1D11100E1D11100E1D11100E1D11110E1D11100C1A0F0B071009030103020000000000000000000000000000000000000000000000000000000000000000000000000000000000060C07011833'+
    '1E121E41263F1F4528642046296D2048296D20482A6E20482A6E1F4729691D41254917331D1907100902000000000000000000000000000000000000000000000000000000000000000000000000000000000912'+
    '0B021D4025221C56288E176127D3186E2CDA187B33DA187C33DB187731DC17732ED81A632BA5193D223009150C040000000000000000000000000000000000000000000000000000000000000000000000000000'+
    '0000060D080217391E2316702AB4138F2FFD139732FE14A338FE14A539FE14A137FE149D35FE21893BD2193D2135060F080300000000000000000000000000000000000000000000000000000000000000000000'+
    '00000000000003080401102D161D096C1FB0029323FE029722FF029D25FF02A126FF029E24FF039D25FF198733CF15351C2D03080401000000000000000000000000000000000000000000000000000000000000'+
    '00000000000000000000020502010D25111708681DA6019422FD019D24FF01AA28FF01B028FF01AE25FF03AD29FF188832C6102A1524020402010000000000000000000000000000000000000000000000000000'+
    '000000000000000000000000000002030200102213110A621D9C019020FD019F24FF02B029FF01B627FF01B526FF04B42BFF17832FBD0C20101C0102010000000000000000000000000000000000000000000000'+
    '000000000000000000000000000000000000030303001C2A1E0D1665259302891DFC029923FF02A625FF01A822FF01A922FF04A725FE1A7A2DB3101E121601010100000000000000000000000000000000000000'+
    '000000000000000000000000000003040300171C180229302A07404E41132870358E02841BFB02911EFF02951EFF01931BFF02951CFF04931EFE217631AD26362819161C16040709070100000000000000000000'+
    '0000000000000000000000000000000000000D100E014451450B606F622265776739357A409A028319FA018B19FF018A18FF018717FF018817FF04881AFE277736B3425645353A493C141A211A03010201000000'+
    '00000000000000000000000000000000000000000000080A080038423907606F611C687A6A393B7C4597048319F9008817FF018917FF018817FF018B18FF058F1DFD277636AD3F52423132403310111612020101'+
    '0100000000000000000000000000000000000000000000000000010101000C0E0C0131393206536254163A78437E0B8921F7028E1BFF02961EFF029B1FFF02A122FF05A427FC1E6F2F96243225130F1410020203'+
    '020000000000000000000000000000000000000000000000000000000000000200050018062F052F10461948254B26733593229C3BF710A130FF04AA2BFF02B52CFF03BD2FFF06B932FC0F722AA207412141033B'+
    '1D3B011E0E20000201020000000000000000000000000000000000000000000000000109021106591DA00B9D3DE70CA443E9199E40F039AF55FE35B956FF1FC049FF0CCA3EFF05D03EFF06C93EFE0DA53EF00DB8'+
    '57E30DBB5AE00868307F010703070000000000000000000000000000000000000000000000000108030C135C278834B85FF440C76EFF42BD67FF51C06EFF51CB73FF4AD674FF3BDE6FFF27E369FF1BDD60FF1DC4'+
    '52FF1EC254FF1BB44DEE0F54256F0105030600000000000000000000000000000000000000000000000000010001061A0B24348047A669C984F770D08BFF6DD38AFF69DC8DFF64E591FF60EC96FF5AF099FF51EF'+
    '94FF48E684FF3AD16EF4167833960214071A0000000000000000000000000000000000000000000000000000000000000000000100020B25122E49955EB481D69AFA85E1A2FF81E9A7FF7CEEAAFF78F3ADFF74F5'+
    'AEFF6FF3A9FF64E899F8339756A907200E250001000100000000000000000000000000000000000000000000000000000000000000000000000000020103112E19395DA471C096E5B0FC99EEB9FF94F2B9FF90F4'+
    'BBFF8BF4B9FF81EDADFB4DAA6DBA0D2C163100020102000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001030104193A224473B687CCA9EBBFFDAAF0'+
    'C3FFA7F2C3FF9FEFBCFD6AB983C91739214001030103000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000105020623472D5189C2'+
    '99D6BCEECBFEB9EFCAFE89C79BD625492E51010502060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000208'+
    '04093054395F9DCCA9DEA5D2B0E1385A4063030804090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'+
    '000000000000050D070F3F6948774971517D070F0911000000000000000000000000000000000000000000000000000000000000000000000000';
  sItemDown=
    '424DC60700000000000036000000280000001600000016000000010020000000000000000000120B0000120B00000000000000000000000000000000000000000000000000000000000000000000000000000006'+
    '01000028070300560E12006511340066123A005C0F1900320806000A0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008'+
    '0100002E070400570E160064114903791FA0048429A800681456005B0F1F00380908000F020100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000010'+
    '030100390906005B0F1A0064104502741A9B0BA037EE12B84EF1058B2FA600661351005F0F2200440B0A001804010002000000000000000000000000000000000000000000000000000000000000000200000018'+
    '040100460B0900600F20006310480170188A079930E10AB337FE12C146FE13C258E604852A930065115000611026004F0D0D0023060200050100000000000000000000000000000000000000000000020000001F'+
    '0502004E0D0B0061102300631049016B157F059830D309B73DFC08BF3BFF0AC640FF17D157FD12C25AD9027B22840064104D0062102800570E0E002B07030005010000000000000000000000000000000000000A'+
    '020000470B05006210160063103400691360048F2BBC08B840F908C743FF09D14AFF0AD54EFF0DD551FF1BDA65FB0EB14DC4016F1965006310370063101A00510D07001103010000000000000000000000000000'+
    '00000009010000400A04005B0F0E006110260281228A07B23EF007C848FF08D653FF09DE5CFF0AE263FF0AE263FF10DD5FFF1BD364F40A9D3D960169162C005D0F1000480C05000F020000000000000000000000'+
    '00000000000000010000000F02010021060701501254059A31DC05B33AFE06C747FF08D756FF08DF60FF09E66BFF0AE76CFF09E264FF12D65BFF1ACC62E407813764002B0A0A0012030100020000000000000000'+
    '000000000000000000000000000000010001001A0634037021C404A534FD04AC35FF04B63AFF06C948FF07D652FF08E05FFF09E364FF08DB59FF08CE4CFF15C953FE18BB5FD2043E1E4200020102000000000000'+
    '00000000000000000000000000000000000000050108014A158204932BF505A230FC04A431FD04A530FF05B739FF06C942FF07D349FF08D84FFF07CE46FF06BE3CFD09B63CFC18BB50F711713985010703070000'+
    '0000000000000000000000000000000000000000000000060209013D1164025C189903711D9C038B24C0039828FA04A72EFF06B936FF06C238FF07C53AFF06BD36F7059928BA0477219B076620980C431D590105'+
    '030600000000000000000000000000000000000000000000000000010001000501080007020B001A050D025A1362038B20F1039926FF05A92CFF06B12DFF06B12DFF06AC2BEB037419540021060C0007020B0004'+
    '0206000000000000000000000000000000000000000000000000000000000000000000000000000000000002000101310A53037F1BEE038E1FFF049A23FF059F24FF05A024FF059C24E802521346000801000000'+
    '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010329094F0A7A1DEC05871DFF038F1EFF04921EFF04921EFF048D1FE602320D420001'+
    '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005280B491C7E2DE9178E2CFF088E20FF048E1CFF048F1CFF04891EE3022E'+
    '0D3D000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007250C442E853DE7379F4CFF28A240FF139D2DFF079A23FF048D'+
    '20E0022C0D39000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009260F403F914FE551AF65FF4DBC65FF42BF5BFF2EB9'+
    '4BFF169C34DE03280D3500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000B27113B519E62E26ABE7DFF66CA7DFF62D1'+
    '7AFF5BCF74FF3AAC56DB072A113200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C23123762A571DF83CA93FF7FCF'+
    '91FF7AD38FFF75D089FF4BAC64D80829132E00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E21123371A97EDC9BD2'+
    'A8FF97D2A4FF92D3A1FF8DCF9CFF59A36CD00921102700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E21132E7CAC'+
    '87D6ACD8B6FDA9D6B3FDA4D5B0FD9FD2ABFD639D72C40A190E1F00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000916'+
    '0C1F5077599B6E9477BB6C9374BB689171BB64906EBB3D6A488C0610091400000000000000000000000000000000000000000000000000000000';
  sRename=
    '424DC60700000000000036000000280000001600000016000000010020000000000000000000120B0000120B0000000000000000000000000000000000000000000200000005000000060000000600000006000'+
    '00006010101090000000C0000000C0000000C0000000B0000000B0000000A0000000900000009000000080000000600000003000000000000000000000000000000010000000A00000016000000190000001A00'+
    '00001B03030320262625433A3A39583736355934333159302F2D582C2B29562A2927522726254E242423492322214420201F381B1B1A270707070B0000000000000000000000010000000400000007000000090'+
    '000000A0000000B0909091679787667C3C2BFB5C5C3C0C7C2BFBAC9BEBAB4CABAB5AFCAB8B4AEC5B7B3AEBDB6B3AFB4B6B4B2ACB4B3B1A19F9E9B7A2F2E2D2A0000000100000001030303060303030601010104'+
    '0101010300000002000000010A0A0A0C88878567E6E5E3DFE3E0DDFDD6D1CDFDDAD4CFFDE4DED8FDE3DCD7FCD8D2CDFBD6D1CDFADEDAD7F9EBEAE9F1CBC9C7A13C3B3A30000000010D0C0C0F4D4C4B435D5C5A5'+
    '551504D514544414B3A393645312F2D3C302F2D3C8E8D8A81E4E4E3E5CAC9C9FF8A8887FFC1C0BFFFF5F4F3FFF2F1F0FFB5B4B2FF787673FFA6A5A3FFE8E7E7F8CCCAC8A43C3B3A2F000000011A1A1A19A09E9C'+
    '76D9D8D6C5D9D7D5D1D2D0CCCECBC7C3CBC3BFBAC5B9B6B1BEC0BEBAD1E8E8E7F5F0F0F0FFAAA8A5FFC4C2C0FFF7F7F6FFF7F7F6FFB8B6B3FF68655FFFCECDCBFFF4F4F4F8CCCBC8A43C3B3A2F000000011B1B1'+
    'A1AA5A3A17EECEAE9EAF1EEEBFEEDE8E5FEEBE6E2FDEBE6E2FDE6E2DFFCDBD8D5FCEDECEBFEFAFAFAFFDBD9D7FFA19B94FFBBB7B1FFBEBAB4FF858175FF818475FFE5E8E3FFF5F5F4F8CCCBC8A43C3B3A2F0000'+
    '00011B1B1B19A5A4A17DECEBEBEAE9E7E6FFDFDDDBFFDFDCD9FFE0DCD9FFDED9D6FFD8D5D2FFECECEBFFFBFBFBFFF5F4F4FFBAB3ACFFBAB3ABFFC2BFB7FF797B63FF90A387FFD8E5D8FFEEF1EEF8CBCAC8A43C3'+
    'B3A2F000000011B1B1B19A5A4A27DEAEAE9EACACACAFF817F7EFF8D8C8BFFAAAAA9FF9F9E9DFFAEACABFFE6E6E5FFFBFBFBFFFBFBFBFFE5E1DEFFCAC3B9FFC2C6B7FF65855AFF55A262FFACD5B3FFDFE8DFF8C7'+
    'C7C3A43B3B3A2F000000011B1B1B19A5A4A27DEEEEEEEBE9E9E8FF7C7873FFA4A19EFFEAEAE9FFD1D0D0FF9F9C99FFDAD9D8FFFBFBFBFFFBFBFBFFF6F6F4FFD0CDC1FF8FA784FF2E8F41FF10A535FF58C473FFC'+
    '2DDC7F9BEC3BBA63A3A382F000000011B1B1B19A5A4A27DEFEEEEEBEEEDECFF8A8279FFB0AAA4FFF7F7F6FFE9E8E7FFAFAAA5FFD9D8D6FFFAFAFAFFFAFAFAFFF7F8F7FFC7D8C5FF4FA560FF0FAC3CFF03B533FF'+
    '14C143FF7BD394F9B2BFB1A7393A3730000000011B1B1B19A5A4A27DEFEEEEEBF0EFEDFFA19183FFA89A8DFFCBC3BBFFACA196FF9E9389FFDDDBD9FFF7F7F7FFF7F7F7FFE5EEE7FF80C190FF1BB149FF04B339F'+
    'F01BD39FF02CA41FF24CA58FA82B98FAD36393631000000011B1B1B19A5A4A27DEFEEEEEBF3F1EFFFBDAD9FFFC6B8ACFFDDD7D1FFC4BAB0FFB5AAA0FFE1DFDDFFF5F5F5FFF2F3F2FFADCFB4FF2DA34BFF07AD38'+
    'FF01AF35FF00B939FF00C740FF03C43CFE2AAD4ED41D3D2844000100021B1B1B19A5A4A17DEDEDECEBF3F1EFFFD2C6BAFFE0D9D2FFF8F8F7FFEEECEAFFCFC8C2FFE1DFDDFFF1F1F1FFEDEFEEFF9ACDA6FF31B05'+
    '0FF11A83AFF01A32DFF00A92DFF00B42FFF07B131FE159934E907481A66000502051B1B1B19A5A3A17DEAEAE9EBECE7E3FFDED3C9FFE4DCD4FFEDE8E3FFE5DFD9FFD2CBC4FFE0DEDDFFEEEEEEFFEDEEEDFFDBE8'+
    'DEFFBCDDC4FF61B77BFF089D2CFF009B23FF009E23FF2B9F42F74F7356A10B1A0E27000100021B1B1B19A4A3A17DE8E7E6EBEBE7E3FFE8E3DDFFE8E3DDFFE8E2DCFFE3DED8FFD8D5D1FFE2E1E0FFECECEBFFECE'+
    'CEBFFECECEBFFE7EAE7FE8AC69EFF129A2FFF01911CFF018E1AFE1A6F27C01B221C3601010103000000001B1B1B19A4A2A07EE6E5E5EBF0F0F0FFF0F0F0FFF0F0F0FFF0F0EFFFEBEAEAFFDBDBDAFFD3D3D2FFD1'+
    'D0CFFFD0CFCEFECFCDCAF2CACBC5E17BBB8EED29A746FE12952BFF04871AF601480B770105010600000000000000001B1B1B19A3A29F7EE4E4E3EBEEEEEEFFEEEEEEFFEEEEEEFFEEEEEEFFEAEAEAFFDBDBDAFFD'+
    '7D6D4FFD5D5D3FFC9C7C5F7AAA8A3C19BA894995AB071D249B866FD47B05EFF26943BE004390A410002000100000000000000001B1B1A19A3A19F7DE0E0DFE7E9E9E8FBE9E9E8FBE9E9E8FCE9E9E8FDE8E8E7FD'+
    'DDDDDCFDDBDBDAFED7D6D6F1828281A22B362D3B216C344836AD5BCA73CB8BFE71C285F93784449E041D06140000000000000000000000001B1B1A19A4A29F6FD6D5D2AAD5D4D1B6D3D1CDBCD1CEC9C4CFCCC5C'+
    'BCECAC3D1C5C2BBD4BAB8B5CF6D6D6D85161616220319080511782F445EBF7FD88FCAA0EF5C9068B3132D183500040102000000000000000000000000111010106A696746918F8C57918F8C59908D895E8F8B85'+
    '66908B8470908A827787837B784F4E4B530D0D0D130000000101090301113F202B416C537837513F5F101C13230102010300000000000000000000000000000000020202020A0A0A090E0E0E0C0F0F0F0D0F0F0'+
    'F0E100F0F0E111110101211101211100F1106050507000000000000000000000000010302040306040801020203000000000000000000000000000000000000000000000000';
  sOpen=
    '424DC60700000000000036000000280000001600000016000000010020000000000000000000120B0000120B00000000000000000000000000000000000000000000000000000000000000000000000000000000'+
    '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'+
    '000000000002000000090000000C00000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'+
    '00000000000401040219081A0B4C0A220E5C020A042D0000000B00000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'+
    '0000000000060207032213361A72298044D0208943E218562AA40A190D4B010201160000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'+
    '000100000008040B052B1D4526853A985EE028B167FD19A957FF36A362F74C7C5ACA1A321E7103080428000000090000000100000000000000000000000000000000000000000000000000000000000000000000'+
    '00010001000B061107372B5835984AAB74EA28BC75FE13B262FF15AB59FF34B572FF9AC0ADFD7D9881E53250369B09150A4301020113000000030000000000000000000000000000000000000000000000000000'+
    '00020001000F0A190C453A6B46AA59BC89F126C681FF0EBB6DFF10B463FF14AD5BFF40BE7FFFC0E0D3FFCBCECCFF9DAE9FF4527255C1162A18670206032300000008000000010000000000000000000000000000'+
    '000301030114102212544C7F59BB74CEA3F649D7A0FF1FC983FF0EBE70FF0FB666FF13AF5EFF4FC287FFD2ECE1FFE8EBE9FFD8D8D8FFB6BFB8FC769179DF2C482F900711083C0001001000000003000000000000'+
    '00000206021E172F1A6560926DCB8BDAB6FA65E2B5FF4CDBA6FF3FD398FF24C680FF11B96BFF12B261FF45C081FFA1DBBEFFAEE1C7FFE1EDE7FFE2E3E2FFC9CCC9FE97AA99F24B6B4EB81324145D0204021E0000'+
    '0006000000002243267776A581D8A6E4C8FC8AEAC7FF67E4B7FF51DEAAFF49D79FFF3ECF92FF21C078FF12B465FF31BD79FF7DD4AAFF49C285FF7AD1A4FFCDE8DAFFE7EAE8FFD6D7D6FFB2BCB3FB6F8B71D92741'+
    '2985050D062F00000009679B6ECBC0E9D5FDAEF0D9FF91EBCBFF73E6BDFF58E0AFFF4DDAA4FF47D399FF39C989FF1DBA6FFF27B971FF88D7B0FF5CC891FF2EB871FF50C185FFACDDC1FFE3ECE7FFE1E1E1FFC6CA'+
    'C6FE8FA592ED38573B9B061107307AB081D8CCF1E1FEB6F2DDFF9BEDD1FF7EE8C3FF62E3B5FF52DDA8FF4BD69EFF45CE93FF35C380FF2DB76FFF92D3ADFF8BD6AFFF53C489FF27B368FF33B36BFF83CBA0FDD4E8'+
    'DCF9E7E9E8FDD3D5D4FF92A994EA26472A7969A370C4C5E8D4FBC0F3E0FFA6EFD5FF8AEAC8FF6CE5BAFF57DFADFF50D9A3FF49D298FF42CA8CFF3BBC79FF87C99DFFA4DCBDFF83D3A8FF53C286FF25AF64F91DA7'+
    '5FD654B88AB8B6DDCBDBE7ECEAF9CAD5CBF94D7451A72046244E629369AEA5D4B6EEACE9CFFE8AE1BDFC65D0A0F44DC187E95FCA96F35FD4A2FE4BCE94FF41C484FF52BB7EFF86C99CFF9DD7B3FF88D0A7F65EBF'+
    '90D31FAB739E0BA1648830A873968DCAADC4C5DDCDEC5B825FAE010502040B1D0D1F315B376C568D62A93E7E5098225A306C1743204C2D6137765DA674CA6AC997F654CA91FF42BF7FFF3FAD68F75CA46BDB9AC7'+
    'A8D79AD0BBBB65C2A1A624AC78930A9E60871B9C608B51A978AD3C75479B00000000000100000207030606130811050E060D0106020400020101030A0409122E1632396F43885EAC78D74AAE70E82373389C143D'+
    '1A4A628C699FAED2C2C496CFBBB369C3A3A92FAE7D970F9C5F8911904E9018642C89000000000000000000000000000000000000000000000000000000000000000001010101050E060D16351A3F1C4422570818'+
    '0A1A020602052A4A2D559FC2A9C3AFD4C6BE8FCDB7B36AC4A3AA3CB1829B1C985D9716642E8900000000000000000000000000000000000000000000000000000000000000000000000000000000000100010102'+
    '0102000000000000000009130A144D71527A9DC2A8C6A8D2C0C589CBB4B669C3A2AC4BAF81A9236C398F000000000000000000000000000000000000000000000000000000000000000000000000000000000000'+
    '000000000000000000000000000000010001081308132C513056709D79A899C8AEC887CBB1BC61BA93B42C7141930000000000000000000000000000000000000000000000000000000000000000000000000000'+
    '0000000000000000000000000000000000000000000000000000020502040F2111233D66447079AD89B77CBF9BC73575479800000000000000000000000000000000000000000000000000000000000000000000'+
    '0000000000000000000000000000000000000000000000000000000000000000000000000000040B040919331C3543744B822D5F3572000000000000000000000000000000000000000000000000000000000000'+
    '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010201020610070F07120812';
  sSave=
    '424DC60700000000000036000000280000001600000016000000010020000000000000000000120B0000120B000000000000000000000101000113100D1D3D342C61453B3273443A317349413B73605F5E735E5E'+
    '5E73585858735C5C5C7362626273656565736262627360606073626262736261617346403B73393027733A3128733C332B73352D2667120F0D2816120F205D4F448C94806EE6998472F1978370F1A59689F1DBD9'+
    'D7F1C7C3C0F1B8B2AEF1CAC8C6F1E1E1E1F1EAEAEAF1E3E3E3F1DCDCDCF1E2E2E2F1E2E1E0F1A3968CF186715FF1887361F1897563F17E6B5AE0352D26665E5044889B8674EDA38E7AFFA38D7AFFA18C78FFB1A1'+
    '93FFE4E0DCFFAA9C90FF998675FFC4BCB5FFEEEEEEFFF9F9F9FFF3F3F3FFEBEBEBFFF0F0F0FFF1F0EFFFAFA296FF8F7966FF917B68FF937D6AFF887462F13C332B737B6A5BB3A58F7CFCA58F7CFFA48E7BFFA28D'+
    '79FFB2A294FFE4DFDCFFA49587FF927D6BFFC1B8B0FFECECECFFF9F9F9FFF4F4F4FFEBEBEBFFEEEEEEFFF0EFEEFFAFA297FF8F7966FF917B68FF947E6BFF897563F13C332B737C6B5CB4A6907DFCA6907DFFA58F'+
    '7CFFA38E7AFFB3A395FFE4E0DCFFA59588FF927D6BFFC4BAB3FFEEEEEDFFF9F9F9FFF7F7F7FFEDEDEDFFEEEEEEFFEFEEEDFFAFA297FF8F7966FF917B68FF957F6CFF8A7664F13C332B737C6B5CB4A7917EFCA791'+
    '7EFFA6907DFFA48F7BFFB3A496FFE4E0DCFFA59588FF927D6BFFC5BCB4FFEFEFEFFFF9F9F9FFFAFAFAFFF3F3F3FFF2F2F2FFF0EFEEFFAFA297FF8F7966FF917B69FF96806DFF8B7765F13D342C737D6C5DB4A892'+
    '7FFCA8927FFFA7917EFFA5907CFFB3A496FFE5E1DEFFB1A49AFF9E8E80FFC8C1BBFFEDEDEDFFF8F8F7FFFAFAFAFFF4F3F3FFF2F2F2FFEFEEEDFFAFA296FF8F7966FF927C69FF96816EFF8C7866F13D342C738271'+
    '62B4AB9582FCA99380FFA8927FFFA6917EFFAB9A8AFFCCC2BAFFC6BCB3FFBDB2A9FFC2B9B2FFCCC5BEFFD2CBC4FFD4CCC6FFD0C9C2FFCFC7C0FFCCC3BCFFA49385FF907B69FF937E6CFF97826FFF8D7867F13D34'+
    '2D73867667B4B29D89FCAB9682FFA99481FFA99480FFA89380FFA89482FFA89482FFA79381FFA59180FFA5917FFFA4907FFFA4907EFFA28F7DFFA18D7CFFA08C7AFF9C8875FF9A8572FF998471FF98826FFF8E7A'+
    '68F13E352D73887768B4B8A38FFCB3A08EFFC2B5AAFFC9BDB4FFC8BDB4FFC8BCB3FFC7BBB3FFC6BBB2FFC6BAB1FFC5BAB1FFC5B9B0FFC4B8B0FFC4B8AFFFC3B7AFFFC2B7AEFFC2B6ADFFC1B5ACFFB0A194FF9B86'+
    '74FF8F7B69F13E352D73887768B4B9A491FCBCAC9EFFE6E4E6FFF2F3F9FFF2F3F9FFF2F3F9FFF2F3F8FFF2F3F8FFF2F3F8FFF2F3F8FFF2F3F8FFF2F3F8FFF2F3F8FFF2F3F8FFF2F3F8FFF1F3F8FFF0F2F7FFD1CA'+
    'C6FF9F8B79FF907B6AF13E352E73887768B4BAA491FCBEAEA0FFEAE8ECFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F6'+
    'FDFFD5CECCFFA08C7BFF917C6AF13F362E73897869B4BAA592FCBEAEA0FFE9E9ECFFF4F7FEFFF4F7FEFFF4F7FEFFF4F7FEFFF4F7FEFFF4F7FEFFF4F7FEFFF4F7FEFFF4F7FEFFF4F7FEFFF4F7FEFFF4F7FEFFF4F7'+
    'FEFFF4F6FDFFD5CFCCFFA18D7CFF927D6BF13F362E73897869B4BBA592FCBFAFA1FFEAE9ECFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7'+
    'FEFFF5F7FEFFF5F6FDFFD5CFCDFFA28E7CFF937E6CF13F362E738A7969B4BBA693FCBFAFA1FFEAE9ECFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7'+
    'FEFFF5F7FEFFF5F7FEFFF5F6FDFFD6CFCDFFA48F7EFF947F6DF140372F738A796AB4BCA793FCC0AFA2FFEAE9ECFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7'+
    'FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F6FDFFD6D0CDFFA4907EFF95806EF140372F738A796AB4BCA794FCC0B0A2FFEAE9ECFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7'+
    'FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F6FDFFD6D0CEFFA5917FFF95816FF140372F738A7A6AB4BDA894FCC1B0A2FFEAE9ECFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7'+
    'FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F6FDFFD7D1CEFFA69280FF968270F1403830738B7A6BB4BDA894FAC1B0A3FEEAE9ECFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7'+
    'FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FEFFF5F7FDFFD7D1CEFFA89382FF988472F141383073857466AC938374BFAA9D94DDD9DCEBFFE1E8FCFFE1E8FCFFE1E8FCFFE1E8FCFFE1E8FCFFE1E8'+
    'FCFFE1E8FCFFE1E8FCFFE1E8FCFFE1E8FCFFE1E8FCFFE1E8FCFFE1E8FCFFE1E8FBFFC9C6CDFFA38F7EFF9C8673F142393173817163A78A7A6CBBA0958FDAC2CAE6FCC6D3F7FCC6D3F7FCC6D3F7FCC6D3F7FCC6D3'+
    'F7FCC6D3F7FCC6D3F7FCC5D3F7FCC5D3F7FCC5D3F7FCC5D3F7FCC5D3F7FCC5D3F7FCC5D2F6FCB6B8C9FC998676FC937E6CED4037306E5B4E426D857466AC847870B28A8D9CB48C92A7B48C92A7B48B91A7B48B91'+
    'A6B48B91A6B48B91A6B48A90A6B48A90A6B48A90A6B48990A6B48990A5B48990A5B4898FA5B4898FA5B4818089B475675BB4685A4DA226211C3F';
  sNodeFilterClear=
    '424D360400000000000036000000280000001000000010000000010020000000000000040000130B0000130B0000000000000000000000000000757575588C8C8C828A8A8A828787878284848482818181827E7'+
    'E7E827B7B7B827979798276767682747474827171718261616165000000010000000000000000D8D8D8C8E3E3E3FFE3E3E3FFE3E3E3FFE2E2E2FFE2E2E2FFE2E2E2FFE2E2E2FFE2E2E2FFE2E2E2FFE1E1E1FFE1'+
    'E1E1FFC4C4C4E6000000020000000000000000D9D9D9C8E6E6E6FFE6E6E6FFE6E6E6FFE6E6E6FFE6E6E6FFE6E6E6FFE6E6E6FFE6E6E6FFE6E6E6FFE6E6E6FFE6E6E6FFCCCCCCE6000000020000000000000000D'+
    'BDBDBC8E8E8E8FFE8E8E8FFE8E8E8FFE8E8E8FFE8E8E8FFE8E8E8FFE8E8E8FFE8E8E8FFE8E8E8FFE8E8E8FFE8E8E8FFD0D0D0E6000000020000000000000000DDDDDDC8EBEBEBFFEBEBEBFFEBEBEBFFEBEBEBFF'+
    'EBEBEBFFEBEBEBFFEBEBEBFFEBEBEBFFEBEBEBFFEBEBEBFFEBEBEBFFD5D5D5E6000000020000000000000000DFDFDFC8F0F0F0FFF1F1F1FFF1F1F1FFF1F1F1FFF0F0F0FFF0F0F0FFEEEEEEFFEEEEEEFFEEEEEEF'+
    'FEEEEEEFFEEEEEEFFDADADAE6000000020000000000000000E1E1E1C8F4F4F4FFF4F4F4FFF4F4F4FFF4F4F4FFF4F4F4FFF4F4F4FFF4F4F4FFF3F3F3FFF1F1F1FFF1F1F1FFF1F1F1FFDFDFDFE600000002000000'+
    '0000000000E3E3E3C8F6F6F6FFF6F6F6FFF6F6F6FFF6F6F6FFF6F6F6FFF6F6F6FFF6F6F6FFF6F6F6FFF6F6F6FFF4F4F4FFF3F3F3FFE3E3E3E6000000020000000000000000E5E5E5C8F9F9F9FFF9F9F9FFF9F9F'+
    '9FFF9F9F9FFF9F9F9FFF9F9F9FFF9F9F9FFF9F9F9FFF9F9F9FFF9F9F9FFF6F6F6FFE6E6E6E6000000020000000000000000E7E7E7C8FBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFB'+
    'FBFFFBFBFBFFFBFBFBFFFAFAFAFFE8E8E8E6000000020000000000000000E9E9E9C8FBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFFBFBFBFFF9F9F9FFF4F4F4FFF0F0F0FFDFDFDFE6000'+
    '000020000000000000000EAEAEAC8FCFCFCFFFCFCFCFFFCFCFCFFFCFCFCFFFCFCFCFFFCFCFCFFFCFCFCFFF9F9F9FFEEEEEEFFE4E4E4FFDFDFDFFFD1D1D1E5000000020000000000000000EBEBEBC8FCFCFCFFFC'+
    'FCFCFFFCFCFCFFFCFCFCFFFCFCFCFFFCFCFCFFFCFCFCFFF3F3F3FFDEDEDEFFE6E6E6FFD7D7D7FEB3B3B36D000000000000000000000000ECECECC8FCFCFCFFFCFCFCFFFCFCFCFFFCFCFCFFFCFCFCFFFCFCFCFFF'+
    'BFBFBFFF0F0F0FFEDEDEDFFEBEBEBFEC2C2C26E00000000000000000000000000000000EDEDEDC8FCFCFCFFFCFCFCFFFCFCFCFFFCFCFCFFFCFCFCFFFCFCFCFFFBFBFBFFF2F2F2FFE3E3E3FFC9C9C97000000000'+
    '00000000000000000000000000000000EDEDEDBAF7F7F7FFF7F7F7FFF7F7F7FFF7F7F7FFF7F7F7FFF7F7F7FFF6F6F6FFF2F2F2FED6D6D6750000000000000000000000000000000000000000';

{  '424D360400000000000036000000280000001000000010000000010020000000000000040000130B0000130B0000000000000000000000000000000000000000000000000000000000000000000000000000000'+
    '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000E3E2E403ABAAAE799F9EA19BA5A5A797B1B0B37DBCBDC06EC4C3C76ECBCACE6ED2D0D46ED8D7DB6EE0'+
    'DFE239EAE9EB0100000000000000000000000000000000E1E0E10A7E7D7FF4575759FF454574FF11119FFF515297FF9E9E9FFFAFAFB0FFC0BFC0FFCECECFFFDCDCDDEFE6E5E81F0000000000000000000000000'+
    '0000000000000009898B16A272892FF0101C0FF0101C7FF0303C0FF8485B0EEC1C1C2D6CCCCCECFD6D6D8C7DFDEE085E8E7E906000000000000000000000000DFE9F3023535A8500C0CBBF00101CEFF0000CFFF'+
    '0000CFFF0001CFFF0D0CC4E87172BF18000000000000000000000000000000000000000000000000000000007372CD120A0AC4F90202C2FF0100D7FF0100D8FF0100D8FF0100D8FF0100D8FF2222C7ADE8F0F30'+
    '2000000000000000000000000000000000000000000000000B3B6EB100B0AD9F90402BAFF0202C7FF0000DCFF0000DCFF0000DCFF0100DBFF06049CFF3F3EC35800000000000000000000000000000000000000'+
    '0000000000F1F7EB001D1DD4AC0201D4FF0303BBFF0101D4FF0000DCFF0000DCFF0101C7FF05039BFF1918C4E8ACADB6120000000000000000000000000000000000000000000000005A5AD11F0C0CDAF10302C'+
    'AFF0302C1FF0000DAFF0000DBFF0000DBFF2B26D4FFAE6F78FFC46241A0000000000000000000000000000000000000000000000000F5EAFE003E3ED56B0202DBFF0303B7FF0101D0FF0302D7FF5C46B5FFC869'+
    '49FFD45B2FFFD0582DFDC47E6654E3EDED000000000000000000000000000000000000000000E4EBEC021E1ED9B90202D1FF1614C8FF935E86FFD05D32FFD35A2EFFD35A2EFFD35A2EFFCD613BDCE6EFEF03000'+
    '000000000000000000000000000000000000000000000696AD7212726DCF0BB6B5EFFD1592CFFD2592CFFD2592CFFD2592CFFD35B2EFFCD5327FFC87E6A24000000000000000000000000000000000000000000'+
    '000000000000007A74D166D66438FFD1582BFFD1582BFFD1582BFFD45D2FFFD15A2CFFC85A35C6C8C0BB0D00000000000000000000000000000000000000000000000000000000E7ECEB02DA744CB9D35B2EFFD'+
    '2582BFFD96333FFD76335FBCE6B4984E5D7D309000000000000000000000000000000000000000000000000000000000000000000000000DDA1902FDB6B3DF5DC6A3AFFD96E42E0D78E7645E6F3F70200000000'+
    '000000000000000000000000000000000000000000000000000000000000000000000000E3EEF102DA896B52DA7C588CE1C3BA1EEFE6F0010000000000000000000000000000000000000000';}


  function CreateEditorForm:TForm; begin
    Result:=TDeactivateForm.Create(Application);
    with Result do begin 
      Width:=670; Height:=410; FormStyle:=fsNormal;
      Left:=(Screen.Width-Width)div 2; Top:=(Screen.Height-Height)div 2;
      Tag:=integer(TPropertiesEditor.Create(Result));
      with TPropertiesEditor(Tag)do begin Parent:=Result; Align:=alClient; OnMouseDown:=TDeactivateForm(Result)._OnMouseDown;
        {pnlFilter.CanClose:=false; pnlHeader.CanClose:=false;}
      end;
    end;
  end;

  procedure LoadBitmap(s:AnsiString; il:TImageList; bmpTo:TBitmap=nil); var ms:TMemoryStream; bmp:TBitmap; begin ms:=nil; bmp:=nil;
    try ms:=TMemoryStream.Create; bmp:=TBitmap.Create;
      s:=Text_Hex2String(s); ms.Clear; ms.Write(s[1],Length(s)); ms.Position:=0;
      bmp.LoadFromStream(ms); if bmpTo=nil then il.AddMasked(bmp,bmp.TransparentColor)else bmpTo.Assign(bmp);
    finally ms.Free; bmp.Free; end;
  end;

  procedure _EnumNodesToList(n:PVirtualNode; pData:pointer); stdcall;
  begin TList(pData).Add(n); end;

{ TEditLinkForString }

constructor TEditLinkForString.Create;
begin inherited; Edit.Height:=0; end;

function TEditLinkForString.PrepareEdit(Tree:TBaseVirtualTree; pn:PVirtualNode; Column:TColumnIndex):boolean; begin
  Result:=inherited PrepareEdit(Tree,pn,Column);
  if Result then;
end;

{ TCustomEditor }

procedure TCustomEditor.AutoAdjustSize;
begin

end;

procedure TCustomEditor.SelectAll;
begin

end;

procedure TCustomEditor.SetText(const s:AnsiString);
begin if fsText<>s then begin fsText:=s; fbModified:=true; end; end;

{ TCustomEditLink }

function TCustomEditLink.BeginEdit:boolean; begin // Notifies the edit link that editing can start now. descendants may cancel node edit by returning False.
  Result:=not fStopping;
  if Result then begin fEditor.Show; fEditor.SelectAll; fEditor.SetFocus; fEditor.AutoAdjustSize; end;
end;

function TCustomEditLink.CancelEdit:boolean; begin
  Result:=not fStopping;
  if Result then begin fStopping:=true; fEditor.Hide; fTree.CancelEditNode;
    fEditor.fLink:=nil; fEditor.fRefLink:=nil;
  end;
end;

constructor TCustomEditLink.Create; begin inherited; CreateEditor;
  if fEditor<>nil then with fEditor do begin Visible:=false; BorderStyle:=bsSingle; AutoSize:=false; end;
end;

procedure TCustomEditLink.CreateEditor;
begin end;

destructor TCustomEditLink.Destroy;
begin fEditor.Free; inherited; end;

function TCustomEditLink.EndEdit:boolean; begin
  Result:=not fStopping;
  if Result then try fStopping:=true;
    if fEditor.Modified then fTree.Text[fNode,fColumn]:=fEditor.Text;
    fEditor.Hide; fEditor.fLink:=nil; fEditor.fRefLink:=nil;
  except fStopping:=false; raise; end;
end;

function TCustomEditLink.GetBounds:TRect;
begin Result:=fEditor.BoundsRect; end;

function TCustomEditLink.PrepareEdit(Tree:TBaseVirtualTree; Node:PVirtualNode; Column:TColumnIndex):boolean; // Retrieves the true text bounds from the owner tree.
var Text:UnicodeString;
begin Result:=(Tree is TCustomVirtualStringTree)and(fEditor<>nil);
  if Result then begin
    fTree:=Tree as TCustomVirtualStringTree; fNode:=Node; fColumn:=Column;
    // Initial size, font and text of the node.
    fTree.GetTextInfo(Node,Column,fEditor.Font,fTextBounds,Text);
//    fEditor.Font.Color:=clWindowText;
    fEditor.Parent:=Tree; fEditor.RecreateWnd; fEditor.HandleNeeded; fEditor.Text:=Text;
    if Column<=NoColumn then begin fEditor.BidiMode:=fTree.BidiMode; fAlignment:=TLCustomVirtualStringTree(fTree).Alignment; end
    else begin fEditor.BidiMode:=TLCustomVirtualStringTree(fTree).Header.Columns[Column].BidiMode;
      fAlignment:=TLCustomVirtualStringTree(fTree).Header.Columns[Column].Alignment;
    end;
    if fEditor.BidiMode<>bdLeftToRight then ChangeBidiModeAlignment(fAlignment);
  end;
end;

procedure TCustomEditLink.ProcessMessage(var M:TMessage);
begin fEditor.WindowProc(M); end;

procedure TCustomEditLink.SetBounds(r:TRect); // Sets the outer bounds of the edit control and the actual edit area in the control.
var lOffset:integer; begin
  if not fStopping then begin
    // Set the edit's bounds but make sure there's a minimum width and the right border does not extend beyond the parent's left/right border.
    if r.Left<0then r.Left:=0;
    if r.Right-r.Left<30then
      if fAlignment=taRightJustify then r.Left:=r.Right-30
      else r.Right:=r.Left+30;
    if r.Right>fTree.ClientWidth then r.Right:=fTree.ClientWidth;
    fEditor.BoundsRect:=r;

    // The selected text shall exclude the text margins and be centered vertically.
    // We have to take out the two pixel border of the edit control as well as a one pixel "edit border" the control leaves around the (selected) text.
    r:=fEditor.ClientRect;
    lOffset:=IfThen(vsMultiline in fNode.States,0,2);
    if tsUseThemes in fTree.TreeStates then Inc(lOffset);
    InflateRect(r,-TLCustomVirtualStringTree(fTree).TextMargin+lOffset,lOffset);
    if not(vsMultiline in fNode.States)then OffsetRect(r,0,fTextBounds.Top-fEditor.Top);
    r.Top:=Max(-1,r.Top); // A value smaller than -1 will prevent the edit cursor from being shown by Windows, see issue #159
    r.Left:=Max(-1,r.Left);
    SendMessage(fEditor.Handle,EM_SETRECTNP,0,LPARAM(@r));
  end;
end;

{ TBaseVTHeader }

procedure TBaseVTHeader.DoAfterAutoFitColumn(Column:TColumnIndex);
begin TBaseStringTree(TreeView).DoChange(nil); end;

procedure TBaseVTHeader.DoAfterColumnWidthTracking(Column:TColumnIndex);
begin TBaseStringTree(TreeView).DoChange(nil); end;

procedure TBaseVTHeader.DoAfterHeightTracking;
begin TBaseStringTree(TreeView).DoChange(nil); end;

{ TBaseStringTree }

constructor TBaseStringTree.Create(aOwner:TComponent); const clBtnShadow=$A19D9D; clBtnFace=$E3DFE0; clHighlight=$BFB4B2; clWindowText=$0; clHighlightText=$0; begin
  inherited Create(aOwner);
  with Colors do begin // серая гамма - не зависит от системных цветов, т.к. заданы в RGB
    DisabledColor:=clBtnShadow; {index 0}
    DropMarkColor:=clHighlight; {index 1}
    DropTargetColor:=clHighLight; {index 2}
    FocusedSelectionColor:=clHighLight; {index 3}
    GridLineColor:=clBtnFace; {index 4}
    TreeLineColor:=clBtnShadow; {index 5}
    UnfocusedSelectionColor:=clBtnFace; {index 6}
    BorderColor:=clBtnFace; {index 7}
    HotColor:=clWindowText; {index 8}
    FocusedSelectionBorderColor:=clHighLight; {index 9}
    UnfocusedSelectionBorderColor:=clBtnFace; {index 10}
    DropTargetBorderColor:=clHighlight; {index 11}
    SelectionRectangleBlendColor:=clHighlight; {index 12}
    SelectionRectangleBorderColor:=clHighlight; {index 13}
    HeaderHotColor:=clBtnShadow; {index 14}
    SelectionTextColor:=clBlue; {clHighlightText}; {index 15}
    UnfocusedColor:=clBtnFace; {index 16}
  end;
  TreeOptions.AutoOptions:=TreeOptions.AutoOptions-[toAutoChangeScale];
  with Self do begin if aOwner is TWinControl then Parent:=TWinControl(aOwner); DoubleBuffered:=true;
    Header.Options:=[hoAutoResize,hoColumnResize,hoDblClickResize,hoDrag,hoShowSortGlyphs,hoVisible,hoHeaderClickAutoSort];
    Header.Style:=hsPlates; Header.SortColumn:=-1; Header.AutoSizeIndex:=0;
    IncrementalSearch:=isAll; IncrementalSearchStart:=ssAlwaysStartOver;
    TreeOptions.MiscOptions:=TreeOptions.MiscOptions+[toCheckSupport,toEditable,toEditOnDblClick];
    TreeOptions.PaintOptions:=TreeOptions.PaintOptions+[toShowHorzGridLines,toShowVertGridLines,toFullVertGridLines,toHideFocusRect];
    TreeOptions.SelectionOptions:=TreeOptions.SelectionOptions+[toExtendedFocus,toFullRowSelect];
    {FocusedColumn:=lwColumnValue; }LineMode:=lmBands; IncrementalSearch:=isNone;
    HintMode:=hmTooltip; CheckImageKind:=ckDarkTick; TextMargin:=2;
  end;
  fsPathDelimiter:='\';
  fiSortColumn:=Header.SortColumn; fiSortDirection:=fiSortDirection;
  TreeOptions.AutoOptions:=TreeOptions.AutoOptions+[toAutoChangeScale];
end;

procedure TBaseStringTree.DblClick;
begin inherited; PostMessageA(Handle,WM_KEYDOWN,VK_F2,0); end;

procedure TBaseStringTree.DoCanEdit(pn:PVirtualNode; Column:TColumnIndex; var bAllowed:boolean);
begin bAllowed:=false; end;

function TBaseStringTree.DoCompare(pNode1,pNode2:PVirtualNode; Column:TColumnIndex):integer; var ws1,ws2:WideString; begin
  DoGetText(pNode1,Column,ttNormal,ws1); DoGetText(pNode2,Column,ttNormal,ws2);
  Result:=CompareText(ws1,ws2);
end;

function TBaseStringTree.DoCountVisibleNode(pn:PVirtualNode):boolean;
begin Result:=true; end;

function TBaseStringTree.DoCreateEditor(pn:PVirtualNode; Column:TColumnIndex):IVTEditLink; begin
  if@OnCreateEditor<>nil then OnCreateEditor(Self,pn,Column,Result);
  if Result=nil then Result:=TEditLinkForString.Create;
end;

procedure TBaseStringTree.DoFilter; var p,pn:PVirtualNode; i,j:integer; bFound:boolean; Text:UnicodeString;
  slFilterCategories,slNodeCategories:TStringList;
begin slFilterCategories:=nil; slNodeCategories:=nil; fiNodesVisibleCount:=0; fiNodesTotalCount:=0;
  try BeginUpdate; pn:=GetFirst;
    slNodeCategories:=TStringList.Create; slFilterCategories:=TStringList.Create; slFilterCategories.CommaText:=fsFilterCategories;
    while pn<>nil do begin bFound:=fsFilterString='';
{      DoGetText(pNode,0,ttNormal,Text); if Text<>''then;}
      if not bFound then for i:=0to Header.Columns.Count-1do begin
        DoGetText(pn,i,ttNormal,Text); bFound:=AnsiContainsText(Text,fsFilterString); if bFound then break;
      end;
      if bFound then begin bFound:=slFilterCategories.Count=0;
        if not bFound then begin slNodeCategories.CommaText:=DoGetCategories(pn);
          for j:=0to slNodeCategories.Count-1do begin
            bFound:=slFilterCategories.IndexOf(slNodeCategories[j])<>-1; if not bFound then break;
          end;
        end;
      end;
      IsFiltered[pn]:=not bFound; p:=pn.Parent;
      if bFound then begin
        if DoCountVisibleNode(pn)then inc(fiNodesVisibleCount);
        while p<>nil do begin if p=RootNode then break;
          IsFiltered[p]:=false; p:=p.Parent; // если не отфильтрован узел, родительские тоже не должны быть отфильтрованы
        end;
      end;
      if DoCountVisibleNode(pn)then inc(fiNodesTotalCount);
      pn:=GetNext(pn);
    end;
  finally EndUpdate; slFilterCategories.Free; slNodeCategories.Free; end;
end;

procedure TBaseStringTree.DoFocusChange(pn:PVirtualNode; Column:TColumnIndex);
begin inherited DoFocusChange(pn,Column); DoChange(pn); end;

function TBaseStringTree.DoGetCategories(pn:PVirtualNode):AnsiString;
begin Result:=''; end;

function TBaseStringTree.DoGetNode(sPath:AnsiString; const bCreate:boolean=false):PVirtualNode;
var ndx:integer; p:PVirtualNode; s:AnsiString; ws:WideString; begin Result:=nil;
  if AnsiStartsStr(fsPathDelimiter,sPath)then sPath:=Copy(sPath,Length(sPath)+1,MaxInt); p:=RootNode;
  while sPath<>''do begin ndx:=AnsiPos(fsPathDelimiter,sPath);
    if ndx=0then begin s:=sPath; sPath:=''; end else begin s:=Copy(sPath,1,ndx-1); sPath:=Copy(sPath,ndx+Length(fsPathDelimiter),MaxInt); end;
    p:=p.FirstChild;
    while p<>nil do begin DoGetText(p,0,ttNormal,ws); if AnsiSameText(s,ws)then break; p:=p.NextSibling; end;
    if p=nil then exit;
  end;
  Result:=p;
end;

function TBaseStringTree.DoGetNodePath(pn:PVirtualNode):AnsiString; var ws:WideString; begin
  Result:=''; if pn=nil then exit;
  while pn<>RootNode do begin DoGetText(pn,0,ttNormal,ws);
    if Result<>''then Result:=fsPathDelimiter+Result;
    Result:=ws+Result; pn:=pn.Parent;
  end;
end;

procedure TBaseStringTree.DoStructureChange(pn:PVirtualNode; enReason:TChangeReason); begin inherited;
  if enReason in[crChildAdded,crChildDeleted,crNodeAdded,crNodeCopied,crNodeMoved]then begin Header.SortColumn:=-1; DoFilter; end;
end;

procedure TBaseStringTree.DoTextDrawing(var PaintInfo:TVTPaintInfo; Text:UnicodeString; TextRect:TRect; DrawFormat:Cardinal);
var s,sFilter:AnsiString; ndx:integer; begin
  with PaintInfo do begin
    if Column<>Header.MainColumn then Canvas.FillRect(CellRect);
//    inherited DoTextDrawing(PaintInfo,Text,TextRect,DrawFormat);
    Canvas.TextOut(TextRect.Left,TextRect.Top+2,Text);
    if Node=FocusedNode then begin Canvas.Brush.Color:=Colors.FocusedSelectionColor; Canvas.FrameRect(CellRect); end;
    if fsFilterString<>''then begin s:=AnsiUpperCase(Text); // рисуем по фильтруемой строке найденные символы
      sFilter:=AnsiUpperCase(fsFilterString);
      Canvas.Font.Color:=clFuchsia; Canvas.Brush.Color:=clYellow; ndx:=PosEx(sFilter,s);
      while ndx<>0do begin
        Canvas.TextOut(TextRect.Left+Canvas.TextWidth(Copy(Text,1,ndx-1)),TextRect.Top+2,Copy(Text,ndx,Length(sFilter)));
        ndx:=PosEx(sFilter,s,ndx+Length(sFilter));
      end;
    end;
  end;
end;

procedure TBaseStringTree.EnumTreeNodes(nParent:PVirtualNode; EnumProc:TEnumTreeNodesProc; pData:pointer); var n:PVirtualNode; begin
  if(@EnumProc=nil)or(nParent=nil)then exit; n:=nParent;
  while true do begin
    while n.ChildCount<>0do n:=n.FirstChild;
    if n<>RootNode then EnumProc(n,pData); if n=nParent then break;
    while true do begin
      if(n.NextSibling<>nil)and(n.NextSibling<>n.Parent.FirstChild)then begin n:=n.NextSibling; break; end
      else begin n:=n.Parent; if n<>RootNode then EnumProc(n,pData); if n=nParent then exit; end;
    end;
  end;
end;

function TBaseStringTree.GetHeaderClass:TVTHeaderClass;
begin Result:=TBaseVTHeader; end;

function TBaseStringTree.GetHeaderState:AnsiString; {var sl,slRes:TStringList; i:integer; begin sl:=nil; slRes:=nil;
  with Header do try sl:=TStringList.Create; slRes:=TStringList.Create;
    for i:=0to Columns.Count-1do sl.Add(Columns[i].Text+'='+IntToStr(Columns[i].Width));
    slRes.Add('ColumnsWidths='+sl.CommaText); sl.Clear;
    for i:=0to Columns.Count-1do sl.Add(Columns[i].Text+'='+IntToStr(Columns[i].Position));
    slRes.Add('ColumnsPositions='+sl.CommaText); sl.Clear;
    Result:=slRes.CommaText;
  finally sl.Free; slRes.Free; end;
end;}
var rHeaderState:TrHeaderState; i:integer; utf:RawUTF8; begin
  with Header do begin rHeaderState._sClassName:=Self.ClassName;
    rHeaderState._iSortColumn:=SortColumn; rHeaderState._iSortDirection:=ord(SortDirection);
    SetLength(rHeaderState._arrColumnsData,Columns.Count);
    for i:=0to Columns.Count-1do with Columns[i]do
      rHeaderState._arrColumnsData[i]:=_ObjFast(['Text',AnsiString(Text),'Width',Width,'Position',Position,'Visible',ord(coVisible in Options),
        'Color',integer(Color)]);
    utf:=RecordSaveJSON(rHeaderState,TypeInfo(TrHeaderState)); Result:=utf; //Result:=UTF8ToString(utf);
  end;
end;

function TBaseStringTree.GetNodesState:AnsiString; var rNodesState:TrNodesState; i:integer; utf:RawUTF8; l:TList; begin
  rNodesState._sClassName:=Self.ClassName; SetLength(rNodesState._arrNodesState,0); l:=nil;
  rNodesState._sFocusedNodePath:=DoGetNodePath(FocusedNode);
  rNodesState._sPathDelimiter:=PathDelimiter; rNodesState._iFocusedColumn:=FocusedColumn;
  rNodesState._iScrollOffsetX:=OffsetX; rNodesState._iScrollOffsetY:=OffsetY;
  try l:=TList.Create; EnumTreeNodes(RootNode,_EnumNodesToList,l);
    if l.Count<>0then begin SetLength(rNodesState._arrNodesState,l.Count);
      for i:=0to l.Count-1do
        rNodesState._arrNodesState[i]:=_ObjFast([
          'Text',AnsiString(Text[l[i],0]),'Path',DoGetNodePath(l[i]),
          'Selected',ord(Selected[l[i]]),'Visible',ord(IsVisible[l[i]]),
          'Expanded',ord(Expanded[l[i]]),'Disabled',ord(IsDisabled[l[i]]),
          'CheckState',ord(CheckState[l[i]])
        ]);
    end;
    utf:=RecordSaveJSON(rNodesState,TypeInfo(TrNodesState)); Result:=utf; // Result:=UTF8ToString(utf);
  finally l.Free; end;
end;

procedure TBaseStringTree.SetFilterCategories(const s:AnsiString);
begin if s<>fsFilterCategories then begin fsFilterCategories:=s; DoFilter; end; end;

procedure TBaseStringTree.SetFilterText(const s:AnsiString);
begin if s<>fsFilterString then begin fsFilterString:=s; DoFilter; end; end;

procedure TBaseStringTree.SetHeaderState(const s:AnsiString); {var sl,slIn:TStringList; i,ndx:integer; begin sl:=nil; slIn:=nil;
  with Header do try sl:=TStringList.Create; slIn:=TStringList.Create;
    slIn.CommaText:=s; sl.CommaText:=slIn.Values['ColumnsWidths'];
    for i:=0to Columns.Count-1do begin ndx:=sl.IndexOfName(Columns[i].Text);
      if ndx<>-1then if TryStrToInt(sl.ValueFromIndex[ndx],ndx)then Columns[i].Width:=ndx;
    end;
    sl.CommaText:=slIn.Values['ColumnsPositions'];
    for i:=0to Columns.Count-1do begin ndx:=sl.IndexOfName(Columns[i].Text);
      if ndx<>-1then if TryStrToInt(sl.ValueFromIndex[ndx],ndx)then Columns[i].Position:=ndx;
    end;
  finally sl.Free; slIn.Free; end;
end;}
var rHeaderState:TrHeaderState; utf:RawUTF8; i,j:integer; Values:TPUtf8CharDynArray; s1:AnsiString;
begin if s=''then exit;
  utf:=StringToUTF8(s); ZeroMemory(@rHeaderState,SizeOf(rHeaderState)); SetLength(rHeaderState._arrColumnsData,0);
  rHeaderState._iSortColumn:=-1; rHeaderState._iSortDirection:=ord(sdAscending);
  RecordLoadJSON(rHeaderState,PUTF8Char(@utf[1]),TypeInfo(TrHeaderState));
  Header.SortColumn:=-1; i:=integer(High(TSortDirection))+1;
  Header.SortDirection:=TSortDirection((i+rHeaderState._iSortDirection)mod(i));
  Header.SortColumn:=rHeaderState._iSortColumn;
  if Length(rHeaderState._arrColumnsData)<>0then for i:=0to High(rHeaderState._arrColumnsData)do begin
    utf:=rHeaderState._arrColumnsData[i];
    JSONDecode(PUTF8Char(utf),['Text','Width','Position','Visible','Color'],Values);
    if Length(Values)=0then continue;
    s1:=UTF8DecodeToString(Values[0],StrLen(Values[0]));
    for j:=0to Header.Columns.Count-1do with Header.Columns[j]do if AnsiSameText(Text,s1)then begin
      Width:=GetIntegerDef(Values[1],Width); Position:=GetIntegerDef(Values[2],Position);
      Options:=Options-[coVisible]; if GetIntegerDef(Values[3],1)=1then Options:=Options+[coVisible];
      Color:=TColor(GetIntegerDef(Values[4],integer(clWhite)));
    end;
  end;
end;

procedure TBaseStringTree.SetNodesState(const s:AnsiString);
var rNodesState:TrNodesState; utf:RawUTF8; i:integer; Values:TPUtf8CharDynArray; s1:AnsiString; p:PVirtualNode;
begin if s=''then exit;
  utf:=StringToUTF8(s); ZeroMemory(@rNodesState,SizeOf(rNodesState)); SetLength(rNodesState._arrNodesState,0);
  RecordLoadJSON(rNodesState,PUTF8Char(@utf[1]),TypeInfo(TrNodesState));
  PathDelimiter:=rNodesState._sPathDelimiter;
  FocusedNode:=DoGetNode(rNodesState._sFocusedNodePath); FocusedColumn:=rNodesState._iFocusedColumn;
  OffsetX:=rNodesState._iScrollOffsetX; OffsetY:=rNodesState._iScrollOffsetY;
  if Length(rNodesState._arrNodesState)<>0then for i:=0to High(rNodesState._arrNodesState)do begin
    utf:=rNodesState._arrNodesState[i];
    JSONDecode(PUTF8Char(utf),['Text','Path','Selected','Visible','Expanded','Disabled','CheckState'],Values);
    if Length(Values)=0then continue;
    s1:=UTF8DecodeToString(Values[1],StrLen(Values[1]));
    p:=DoGetNode(s1); if p=nil then Continue;
    Selected[p]:=GetInteger(Values[2])<>0; IsVisible[p]:=GetIntegerDef(Values[3],1)<>0;
    Expanded[p]:=GetIntegerDef(Values[4],1)<>0; IsDisabled[p]:=GetInteger(Values[5])<>0;
    CheckState[p]:=TCheckState(GetIntegerDef(Values[6],integer(CheckState[p]))mod(integer(High(TCheckState))+1));
  end;
end;

procedure TBaseStringTree.SortTree(Column:TColumnIndex; Direction:TSortDirection; DoInit:boolean); begin
  if@fOnSortTree<>nil then fOnSortTree(Self);
  if(fiSortColumn=Header.SortColumn)and(Column=Header.SortColumn)then
    if(fiSortDirection<>Header.SortDirection)and(fiSortColumn>=0)and(Header.SortDirection=Header.Columns[fiSortColumn].DefaultSortDirection)
      then begin Header.SortColumn:=-1; exit; end;
  fiSortColumn:=Header.SortColumn; fiSortDirection:=Header.SortDirection;
  DoChange(nil);
  inherited;
end;
procedure TBaseStringTree.WMKeyDown(var M:TWMKeyDown);
begin if M.CharCode=VK_RETURN then M.CharCode:=VK_F2; inherited; end;

procedure TBaseStringTree.WMVScroll(var Msg:TMessage); begin
  inherited;
  if IsEditing then begin CancelEditNode; EditNode(FocusedNode,EditColumn); UpdateEditBounds; end;
end;

{ TTimedInvalidateTree }

constructor TTimedInvalidateTree.Create(aOwner:TComponent); begin
  inherited Create(aOwner); lInvalidateNodes:=TList.Create;
  fTimer:=TTimer.Create(nil); fTimer.Interval:=42; fTimer.Enabled:=false; fTimer.OnTimer:=_OnTimer;
end;

destructor TTimedInvalidateTree.Destroy;
begin FreeAndNil(fTimer); FreeAndNil(lInvalidateNodes); inherited; end;

procedure TTimedInvalidateTree.DoFreeNode(pn:PVirtualNode); var ndx:integer; begin
  ndx:=lInvalidateNodes.IndexOf(pn); if ndx<>-1then lInvalidateNodes.Delete(ndx);
  inherited;
end;

function TTimedInvalidateTree.DoInvalidateNode(pn:PVirtualNode):TRect;
begin Result:=inherited InvalidateNode(pn); end;

function TTimedInvalidateTree.InvalidateNode(pn:PVirtualNode):TRect; var ndx:integer;
begin {Result:=inherited InvalidateNode(pn); exit;} ndx:=lInvalidateNodes.IndexOf(pn); if ndx=-1then lInvalidateNodes.Add(pn); fTimer.Enabled:=true; end;

procedure TTimedInvalidateTree._OnTimer(Sender:TObject); var pn:PVirtualNode; lwTicks:longword; begin
  try lwTicks:=GetTickCount;
    while(GetTickCount-lwTicks<1)and(lInvalidateNodes.Count<>0)do begin
      pn:=lInvalidateNodes[0]; lInvalidateNodes.Delete(0); DoInvalidateNode(pn);
    end;
  except end;
  fTimer.Enabled:=lInvalidateNodes.Count<>0;
end;

{ TCustomToolPanel }

{class function TCustomToolPanel.ClassReader(const aValue:TObject; aFrom:PUTF8Char; var aValid:boolean;
  aOptions:TJSONToObjectOptions):PUTF8Char; var v:TCustomToolPanel absolute aValue;
  Values:TPUtf8CharDynArray;
begin aValid:=false;
  aFrom:=JSONDecode(aFrom,['CanClose','Caption'],Values); if aFrom=nil then exit;
  v.CanClose:=GetInteger(Values[0])=1;
  v.Caption:=UTF8DecodeToString(Values[1],StrLen(Values[1]));
  aValid:=true; Result:=aFrom;
end;}

{class procedure TCustomToolPanel.ClassWriter(const aSerializer:TJSONSerializer; aValue:TObject;
  aOptions:TTextWriterWriteObjectOptions); var v:TCustomToolPanel absolute aValue;
begin aSerializer.AddJSONEscape(['CanClose',ord(v.fbCanClose),'Caption',v.Caption]); end;}

constructor TCustomToolPanel.Create(aOwner:TComponent); begin inherited;
  if aOwner is TWinControl then Parent:=TWinControl(aOwner); DoubleBuffered:=true; Align:=alTop; fbCanClose:=true;
end;

procedure TCustomToolPanel.DoChanged;
begin if(@fOnPropChanged<>nil)then fOnPropChanged(Self); end;

procedure TCustomToolPanel.DoLoadFromString(const s:AnsiString); var Values:TPUtf8CharDynArray; begin
  JSONDecode(PUTF8Char(StringToUTF8(s)),['CanClose','Caption','Visible'],Values);
  if Length(Values)<>0then begin
    CanClose:=GetInteger(Values[0])<>0;
    Caption:=UTF8DecodeToString(Values[1],StrLen(Values[1]));
    if CanClose then Visible:=GetInteger(Values[2])<>0;
  end;
end;

function TCustomToolPanel.DoSaveToString:AnsiString;
begin Result:=JSONEncode(['CanClose',ord(fbCanClose),'Caption',fsCaption,'Visible',ord(Visible)]); end;

procedure TCustomToolPanel.DoUpdateControls;
begin end;

procedure TCustomToolPanel.LoadFromStream(_s:TStream); var iPos:integer; s:AnsiString; begin
  iPos:=_s.Position;
  try s:=TExStream(_s).ReadString;
    if(s<>'')and(Length(s)>Length(ClassName)+1)and AnsiStartsText(ClassName,s)then begin
      s:=Copy(s,Length(ClassName)+2,MaxInt); DoLoadFromString(s);
    end else _s.Position:=iPos;
  except _s.Position:=iPos; end;
end;

procedure TCustomToolPanel.SaveToStream(_s:TStream); var {utf:RawUTF8;} s:AnsiString;
{begin utf:=ObjectToJSON(Self); TExStream(_s).WriteString(utf); end;}
begin s:=DoSaveToString; s:=Self.ClassName+': '+s; TExStream(_s).WriteString(s); {_s.Write(s[1],Length(s));} end;

procedure TCustomToolPanel.SetCanClose(const b:boolean);
begin if fbCanClose<>b then begin fbCanClose:=b; DoChanged; Visible:=not fbCanClose; end; end;

procedure TCustomToolPanel.SetCaption(const s:AnsiString);
begin if fsCaption<>s then begin fsCaption:=s; DoChanged; end; end;

procedure TCustomToolPanel.UpdateStates;
begin end;

procedure TCustomToolPanel.WndProc(var M:TMessage); begin
  if(M.Msg=CM_VISIBLECHANGED)then DoChanged; 
  if M.Msg=CM_SHOWINGCHANGED then if Showing then DoUpdateControls;
  if M.Msg=WM_SIZE then DoUpdateControls;
//  if(M.Msg=CM_Changed)and(@fOnPropChanged<>nil)then fOnPropChanged(Self);
  inherited;
end;

procedure TCustomToolPanel._OnClick(Sender:TObject);
begin if@fOnClick<>nil then fOnClick(Sender); end;

procedure TCustomToolPanel._OnMouseDown(Sender:TObject; btn:TMouseButton; setShift:TShiftState; x,y:integer);
begin if@OnMouseDown<>nil then OnMouseDown(Sender,btn,setShift,x,y); end;

{ TFilterToolPanel }

constructor TFilterToolPanel.Create(aOwner:TComponent); var bmp:TBitmap; begin inherited;
  Caption:='Панель фильтрации узлов дерева'; Width:=600;
  edtNodePath:=TsEdit.Create(Self);
  with edtNodePath do begin Parent:=Self;
    BoundLabel.Caption:='Путь тега:'; BoundLabel.Active:=true; BoundLabel.FTheLabel.AutoSize:=true;
    Top:=iOffs; Left:=iOffs+BoundLabel.FTheLabel.Width+iOffs;
    ReadOnly:=true; Width:=Self.ClientWidth-180-27; //SkinData.CustomColor:=true; Color:=$E0E0E0;
    BoundLabel.FTheLabel.OnMouseDown:=_OnMouseDown;
  end;
  btnCopy2Clipboard:=TsSpeedButton.Create(Self);
  with btnCopy2Clipboard do begin Parent:=Self; Anchors:=[akTop,akRight]; Flat:=true;
    Hint:='скопировать путь тега в буфер обмена';
    bmp:=Graphics_CreateBitmap(sCopy2Clipboard); Glyph:=bmp; bmp.Free;
    Width:=21; Height:={21}edtNodePath.Height; Top:=edtNodePath.Top; ShowHint:=false;
    Left:=edtNodePath.Left+edtNodePath.Width+1; OnClick:=_OnClick;
  end;
  lblNodesCount:=TsLabel.Create(Self);
  with lblNodesCount do begin Parent:=Self; Top:=edtNodePath.Top+iOffs; Caption:='Тегов: 0/0'; // 'Узлов: 99999/99999';
    Left:=btnCopy2Clipboard.Left+btnCopy2Clipboard.Width+iOffs; Anchors:=[akTop,akRight];
    OnMouseDown:=_OnMouseDown;
  end;
  edtNodePath.Width:=btnCopy2Clipboard.Left-edtNodePath.Left-1;

  edtNodeFilter:=TsEdit.Create(Self);
  with edtNodeFilter do begin Parent:=Self;
    BoundLabel.Caption:='Фильтр:'; BoundLabel.Active:=true; BoundLabel.FTheLabel.AutoSize:=true;
    Left:=iOffs+BoundLabel.FTheLabel.Width+iOffs; Top:=edtNodePath.Top+edtNodePath.Height+iOffs;
    {Width:=Parent.ClientWidth-Left-4-280;} Anchors:=[akLeft,akTop{,akRight}]; OnChange:=_OnClick;
    BoundLabel.FTheLabel.OnMouseDown:=_OnMouseDown;
  end;
  btnNodeFilterClear:=TsSpeedButton.Create(Self);
  with btnNodeFilterClear do begin Parent:=Self; Flat:=true;
    Hint:='очистить фильтр тегов';
    bmp:=Graphics_CreateBitmap(sNodeFilterClear); Glyph:=bmp; bmp.Free;
    Width:=21; Height:={21}edtNodeFilter.Height; Top:=edtNodeFilter.Top; ShowHint:=false;
    Left:=edtNodeFilter.Left+edtNodeFilter.Width+1; OnClick:=_OnClick;
  end;
  edtNodeCategories:=TCheckListEdit.Create(Self);
  with edtNodeCategories do begin Parent:=Self;
    BoundLabel.Caption:='Категории:'; BoundLabel.Active:=true; BoundLabel.FTheLabel.AutoSize:=true;
    {ReadOnly:=true;} Top:=edtNodeFilter.Top; Left:=Self.ClientWidth-Width-iOffs+30{-BoundLabel.FTheLabel.Width-iOffs};
    Width:=Width-30;
    Anchors:=[akTop,akLeft,akRight]; OnChange:=_OnClick; {SkinData.CustomColor:=true; Color:=$E0E0E0;}
    BoundLabel.FTheLabel.OnMouseDown:=_OnMouseDown;
  end;

  edtNodeFilter.Width:=edtNodeCategories.Left-edtNodeFilter.Left-iOffs-edtNodeCategories.BoundLabel.FTheLabel.Width-iOffs-btnNodeFilterClear.Width-iOffs;
  btnNodeFilterClear.Left:=edtNodeFilter.Left+edtNodeFilter.Width+iOffs;

  ClientHeight:=edtNodeFilter.Top+edtNodeFilter.Height+iOffs;

  fsNodesCountFormat:='Тегов: %d/%d'; 
end;

procedure TFilterToolPanel.DoLoadFromString(const s:AnsiString); var Values:TPUtf8CharDynArray; sEnabled:AnsiString; i:integer; begin
  inherited DoLoadFromString(s);
  JSONDecode(PUTF8Char(StringToUTF8(s)),['Filter','Categories','CategoriesList','CategoriesEnabled'],Values);
  if Length(Values)<>0then begin
    edtNodeFilter.Text:=UTF8DecodeToString(Values[0],StrLen(Values[0]));
    edtNodeCategories.CheckListBox.Items.CommaText:=UTF8DecodeToString(Values[2],StrLen(Values[2]));
    edtNodeCategories.Text:=UTF8DecodeToString(Values[1],StrLen(Values[1]));
    sEnabled:=UTF8DecodeToString(Values[3],StrLen(Values[3]));
    for i:=0to edtNodeCategories.CheckListBox.Items.Count-1do
      if i<=Length(sEnabled)-1then edtNodeCategories.CheckListBox.ItemEnabled[i]:=sEnabled[i+1]<>'0';
  end;
end;

function TFilterToolPanel.DoSaveToString:AnsiString; var s:AnsiString; i:integer;
const cBool:array[boolean]of AnsiChar=('0','1'); begin
  Result:=inherited DoSaveToString; SetLength(Result,Length(Result)-1);
  s:=''; for i:=0to edtNodeCategories.CheckListBox.Items.Count-1do s:=s+cBool[edtNodeCategories.CheckListBox.ItemEnabled[i]];
  s:=JSONEncode(['Filter',edtNodeFilter.Text,'Categories',edtNodeCategories.Text,
    'CategoriesList',edtNodeCategories.CheckListBox.Items.CommaText,'CategoriesEnabled',s]);
  s[1]:=','; Result:=Result+s;
end;

procedure TFilterToolPanel.DoUpdateControls; var s:AnsiString; i:integer; begin inherited;
  if(lblNodesCount<>nil)and(btnCopy2Clipboard<>nil)then begin
    if fTree=nil then i:=0 else i:=fTree.fiNodesTotalCount;
    s:=Format(fsNodesCountFormat,[i,i],gfs);
    lblNodesCount.Left:=Self.ClientWidth-Canvas.TextWidth(s)-iOffs-3*iOffs;
    btnCopy2Clipboard.Left:=lblNodesCount.Left-btnCopy2Clipboard.Width-iOffs;
  end;
  if(edtNodePath<>nil)and(btnCopy2Clipboard<>nil)then with edtNodePath do begin 
    Width:=btnCopy2Clipboard.Left-edtNodePath.Left -iOffs; Anchors:=[akLeft,akTop,akRight];
  end;
end;

function TFilterToolPanel.GetCategories:AnsiString;
begin Result:=edtNodeCategories.Text; end;

function TFilterToolPanel.GetCategoriesList: AnsiString;
begin Result:=edtNodeCategories.CheckListBox.Items.CommaText; end;

function TFilterToolPanel.GetFilter:AnsiString;
begin Result:=edtNodeFilter.Text; end;

function TFilterToolPanel.GetNodePath:AnsiString;
begin Result:=edtNodePath.Text; end;

procedure TFilterToolPanel.SetCategories(const s:AnsiString);
begin edtNodeCategories.Text:=s; end;

procedure TFilterToolPanel.SetCategoriesList(const s:AnsiString);
begin edtNodeCategories.CheckListBox.Items.CommaText:=s; end;

procedure TFilterToolPanel.SetFilter(const s:AnsiString);
begin edtNodeFilter.Text:=s; end;

procedure TFilterToolPanel.SetNodePath(const s:AnsiString);
begin edtNodePath.Text:=s; end;

procedure TFilterToolPanel.SetNodesCountFormat(const s:AnsiString);
begin fsNodesCountFormat:=s; UpdateNodesCount; end;

procedure TFilterToolPanel.SetTree(const tv:TBaseStringTree);
begin if tv<>fTree then begin fTree:=tv; _OnClick(edtNodeFilter); end; end;

procedure TFilterToolPanel.UpdateNodesCount; begin
  if fTree=nil then lblNodesCount.Caption:=''
  else lblNodesCount.Caption:=Format(fsNodesCountFormat,[fTree.fiNodesVisibleCount,fTree.fiNodesTotalCount],gfs);
end;

procedure TFilterToolPanel._OnClick(Sender:TObject); begin
  case IndexOfObject(Sender,[btnCopy2Clipboard,edtNodeFilter,edtNodeCategories,btnNodeFilterClear])of
    0{копировать}: begin edtNodePath.SelectAll; edtNodePath.CopyToClipboard; end;
    1,2{фильтровать}: begin
      if fTree<>nil then begin
        fTree.fsFilterString:=edtNodeFilter.Text; fTree.fsFilterCategories:=edtNodeCategories.Text;
        fTree.DoFilter;
      end;
      UpdateNodesCount;
    end;
    3{очистить фильтр}: edtNodeFilter.Text:='';
  end;
  inherited _OnClick(Sender);
end;

{ TTreeHeaderToolPanel }

constructor TTreeHeaderToolPanel.Create(aOwner:TComponent); var al:TAlign; begin inherited;
  Align:=alNone; Width:=800; Height:=50; DisableAlign; al:=Align;
  Caption:='Панель заголовка дерева';
  gbxSort:=TsGroupBox.Create(Self);
  with gbxSort do begin Parent:=Self; Caption:='Параметры сортировки'; CaptionLayout:=clTopCenter;
    Top:=iOffs; Left:=iOffs; OnMouseDown:=_OnMouseDown;
  end;
  cbxSortColumn:=TsComboBox.Create(Self);
  with cbxSortColumn do begin Parent:=gbxSort; OnChange:=_OnClick;
    BoundLabel.Caption:='Колонка:'; BoundLabel.Active:=true; BoundLabel.FTheLabel.AutoSize:=true;
    Style:=csDropDownList; Left:=BoundLabel.FTheLabel.Width+iOffs*2; Top:=18;
    Items.Add('Не выбрана'); ItemIndex:=0;
    BoundLabel.FTheLabel.OnMouseDown:=_OnMouseDown;
  end;
  cbxSortOrder:=TsComboBox.Create(Self);
  with cbxSortOrder do begin Parent:=gbxSort; OnChange:=_OnClick;
    BoundLabel.Caption:='Направление:'; BoundLabel.Active:=true; BoundLabel.FTheLabel.AutoSize:=true;
    Left:=BoundLabel.FTheLabel.Width+iOffs*2; Top:=cbxSortColumn.Top+cbxSortColumn.Height+iOffs;
    Style:=csDropDownList; Width:=cbxSortColumn.Left+cbxSortColumn.Width-Left;
    Items.Add('Вверх'); Items.Add('Вниз'); ItemIndex:=0;
    BoundLabel.FTheLabel.OnMouseDown:=_OnMouseDown;
  end;
  btnSortReset:=TsSpeedButton.Create(Self);
  with btnSortReset do begin Parent:=gbxSort; OnClick:=_OnClick;
    Caption:='Сбросить'; Left:=2*iOffs; Width:=cbxSortColumn.Left+cbxSortColumn.Width-iOffs-Left;
    Top:=cbxSortOrder.Top+cbxSortOrder.Height+iOffs;
  end;

  gbxSort.Width:=cbxSortColumn.Left+cbxSortColumn.Width+iOffs;
  gbxSort.Height:=btnSortReset.Top+btnSortReset.Height+iOffs;
  Self.Height:=gbxSort.Top*2+gbxSort.Height;

  gbxColumns:=TsGroupBox.Create(Self);
  with gbxColumns do begin Parent:=Self; Caption:='Параметры колонок'; Top:=gbxSort.Top; Left:=gbxSort.Left+gbxSort.Width+2;
    CaptionLayout:=clTopCenter; Width:=Self.ClientWidth-Left-iOffs; Anchors:=[akLeft,akRight,akTop];
    Height:=gbxSort.Height; OnMouseDown:=_OnMouseDown;
  end;
  edtColumnsVisibility:=TCheckListEdit.Create(Self);
  with edtColumnsVisibility do begin Parent:=gbxColumns;
    BoundLabel.Caption:='Видимость:'; BoundLabel.Active:=true; BoundLabel.FTheLabel.AutoSize:=true;
    {ReadOnly:=true;} Left:=BoundLabel.FTheLabel.Width+iOffs*2; Top:=cbxSortColumn.Top; Width:=gbxColumns.ClientWidth-Left-iOffs;
    Anchors:=[akTop,akLeft,akRight]; OnChange:=_OnClick;
    SkinData.CustomColor:=true; //Color:=$E0E0E0;
    BoundLabel.FTheLabel.OnMouseDown:=_OnMouseDown;
  end;
  cbxColumn:=TsComboBox.Create(Self);
  with cbxColumn do begin Parent:=gbxColumns; OnChange:=_OnClick;
    BoundLabel.Caption:='Колонка:'; BoundLabel.Active:=true; BoundLabel.FTheLabel.AutoSize:=true;
    Left:=BoundLabel.FTheLabel.Width+iOffs*2; Top:=cbxSortColumn.Top+cbxSortColumn.Height+iOffs;
    Style:=csDropDownList; Left:=BoundLabel.FTheLabel.Width+iOffs*2; Top:=edtColumnsVisibility.Top+edtColumnsVisibility.Height+iOffs;
    Items.Add('Не выбрана'); ItemIndex:=0;
    BoundLabel.FTheLabel.OnMouseDown:=_OnMouseDown;
  end;
  edtWidth:=TsSpinEdit.Create(Self);
  with edtWidth do begin Parent:=gbxColumns; OnChange:=_OnClick; AllowNegative:=false; Width:=80;
    BoundLabel.Caption:='Ширина:'; BoundLabel.Active:=true; BoundLabel.FTheLabel.AutoSize:=true;
    Left:=cbxColumn.Left+cbxColumn.Width+iOffs+BoundLabel.FTheLabel.Width+iOffs; Top:=cbxColumn.Top;
    BoundLabel.FTheLabel.OnMouseDown:=_OnMouseDown;
  end;
  edtText:=TsEdit.Create(Self);
  with edtText do begin Parent:=gbxColumns; OnChange:=_OnClick;
    BoundLabel.Caption:='Текст:'; BoundLabel.Active:=true; BoundLabel.FTheLabel.AutoSize:=true;
    Left:=edtWidth.Left+edtWidth.Width+iOffs+BoundLabel.FTheLabel.Width+iOffs; Top:=edtWidth.Top;
    Width:=gbxColumns.ClientWidth-Left-iOffs-500; Anchors:=[akLeft,akRight,akTop];
    BoundLabel.FTheLabel.OnMouseDown:=_OnMouseDown;
  end;
  chkVisible:=TsCheckBox.Create(Self);
  with chkVisible do begin Parent:=gbxColumns; Left:=cbxColumn.Left; Top:=edtWidth.Top+edtWidth.Height+iOffs;
    Checked:=true; DoubleBuffered:=true;
    Caption:='Видимая'; OnClick:=_OnClick;
  end;
  edtColor:=TColorEdit.Create(Self);
  with edtColor do begin Parent:=gbxColumns; OnChange:=_OnClick;
    BoundLabel.Caption:='Цвет:'; BoundLabel.Active:=true; BoundLabel.FTheLabel.AutoSize:=true;
    Left:=cbxColumn.Left+cbxColumn.Width+iOffs+BoundLabel.FTheLabel.Width+iOffs; Top:=edtWidth.Top+edtWidth.Height+iOffs;
    Width:=200;
    BoundLabel.FTheLabel.OnMouseDown:=_OnMouseDown;
  end;
  Align:=al; EnableAlign;
end;

procedure TTreeHeaderToolPanel.DoLoadFromString(const s:AnsiString); var Values:TPUtf8CharDynArray; s1:AnsiString; ndx:integer; begin
  inherited DoLoadFromString(s);
  JSONDecode(PUTF8Char(StringToUTF8(s)),['EditColumn'],Values);
  if Length(Values)<>0then begin
    s1:=UTF8DecodeToString(Values[0],StrLen(Values[0]));
    ndx:=cbxColumn.Items.IndexOf(s1); if ndx<>-1then begin cbxColumn.ItemIndex:=ndx; _OnClick(cbxColumn); end;
  end;
end;

function TTreeHeaderToolPanel.DoSaveToString:AnsiString; var s:AnsiString; 
const cBool:array[boolean]of AnsiChar=('0','1'); begin
  Result:=inherited DoSaveToString; SetLength(Result,Length(Result)-1);
  s:=JSONEncode(['EditColumn',cbxColumn.Items[cbxColumn.ItemIndex]]);
  s[1]:=','; Result:=Result+s;
end;

procedure TTreeHeaderToolPanel.DoUpdateControls; begin inherited;
  if(edtText<>nil)and(gbxColumns<>nil)then with edtText do begin
    Width:=gbxColumns.ClientWidth-Left-iOffs; Anchors:=[akLeft,akRight,akTop];
  end;
end;

procedure TTreeHeaderToolPanel.SetTree(const tv:TBaseStringTree); var i:integer; begin
  if fTree<>tv then begin fTree:=tv;
    if csDestroying in ComponentState then exit;
    while cbxSortColumn.Items.Count>1do cbxSortColumn.Items.Delete(1);
    edtColumnsVisibility.CheckListBox.Items.Clear;
    while cbxColumn.Items.Count>1do cbxColumn.Items.Delete(1);
    if fTree<>nil then try bAdding:=true;
      for i:=0to fTree.Header.Columns.Count-1do begin
        cbxSortColumn.Items.Add(fTree.Header.Columns[i].Text);
        edtColumnsVisibility.CheckListBox.Items.Add(fTree.Header.Columns[i].Text);
        cbxColumn.Items.Add(fTree.Header.Columns[i].Text);
        cbxColumn.ItemIndex:=0; _OnClick(cbxColumn);
      end;
    finally bAdding:=false; end;
  end;
  UpdateStates;
end;

procedure TTreeHeaderToolPanel.UpdateStates; var i:integer; begin
    if fTree<>nil then with fTree do begin
    if Header.SortColumn>=0then cbxSortColumn.ItemIndex:=fTree.Header.SortColumn+1 else cbxSortColumn.ItemIndex:=0;
    cbxSortOrder.ItemIndex:=integer(Header.SortDirection);
    for i:=0to Header.Columns.Count-1do
      if coVisible in Header.Columns[i].Options then edtColumnsVisibility.CheckListBox.Checked[i]:=true;
    edtColumnsVisibility.CheckListBox.Perform(CM_CHANGED,0,0);
    _OnClick(cbxColumn);
  end;
end;

procedure TTreeHeaderToolPanel.WndProc(var M:TMessage); var tv:TBaseStringTree; begin inherited;
  if(M.Msg=CM_VISIBLECHANGED)then begin tv:=fTree; TreeView:=nil; TreeView:=tv; end;
end;

procedure TTreeHeaderToolPanel._OnClick(Sender:TObject); var i,col,sd:integer; begin
  if fTree<>nil then with fTree,Header do case IndexOfObject(Sender,[cbxSortColumn,cbxSortOrder,btnSortReset,edtColumnsVisibility,
    cbxColumn,edtWidth,edtText,edtColor,chkVisible])of
    0,1{cbxSortColumn,cbxSortOrder}: begin col:=cbxSortColumn.ItemIndex; sd:=cbxSortOrder.ItemIndex;
      Header.SortColumn:=-1; Header.SortDirection:=TSortDirection(sd);
      if(col<>0)then Header.SortColumn:=col-1;
      UpdateStates;
    end;
    2{btnSortReset}: begin cbxSortColumn.ItemIndex:=0; cbxSortOrder.ItemIndex:=0; _OnClick(cbxSortColumn); end;
    3{edtColumnsVisibility}: if not bAdding then begin
      for i:=0to edtColumnsVisibility.CheckListBox.Count-1do if(i<=Columns.Count-1)then
        if edtColumnsVisibility.CheckListBox.Checked[i]
          then Columns[i].Options:=Columns[i].Options+[coVisible]else Columns[i].Options:=Columns[i].Options-[coVisible];
      _OnClick(cbxColumn);
    end;
    4{cbxColumn}: 
      if cbxColumn.ItemIndex>0then begin
        edtWidth.Text:=IntToStr(Columns[cbxColumn.ItemIndex-1].Width);
        edtText.Text:=Columns[cbxColumn.ItemIndex-1].Text;
        edtColor.ColorValue:={ColorToRGB(}Columns[cbxColumn.ItemIndex-1].Color{)};
        chkVisible.Checked:=coVisible in Columns[cbxColumn.ItemIndex-1].Options;
      end else begin edtWidth.Value:=0; edtText.Text:=''; edtColor.ColorValue:=clWhite; chkVisible.Checked:=true; end;
    5{edtWidth}: if(cbxColumn.ItemIndex>0)then Columns[cbxColumn.ItemIndex-1].Width:=edtWidth.Value;
    6{edtText}: if(cbxColumn.ItemIndex>0)then begin Columns[cbxColumn.ItemIndex-1].Text:=edtText.Text;
      i:=cbxColumn.ItemIndex; cbxColumn.Items[cbxColumn.ItemIndex]:=edtText.Text; cbxColumn.ItemIndex:=i;
    end;
    7{edtColor}: if(cbxColumn.ItemIndex>0)then Columns[cbxColumn.ItemIndex-1].Color:=edtColor.ColorValue;
//      if Columns[cbxColumn.ItemIndex-1].Color<>clWindow then Columns[cbxColumn.ItemIndex-1].Color:=clWindow;
    8{chkVisible}: if(cbxColumn.ItemIndex>0)then with Columns[cbxColumn.ItemIndex-1]do begin
      if chkVisible.Checked then Options:=Options+[coVisible]else Options:=Options-[coVisible];
      edtColumnsVisibility.CheckListBox.Checked[cbxColumn.ItemIndex-1]:=chkVisible.Checked;
      SendMessage(edtColumnsVisibility.CheckListBox.Handle,CM_CHANGED,0,0);
    end;
  end;
  inherited _OnClick(Sender);
end;

{ TCustomTreeExplorer }

constructor TCustomTreeExplorer.Create(aOwner:TComponent); var i:integer; wc:TWinControl; pnl:TsPanel;
  mm:TMainMenu; mi,miToolPanels:TMenuItem; fm:TCustomForm; const iCreated=1;
begin inherited; Width:=320;
  if aOwner is TWinControl then Parent:=TWinControl(aOwner); DoubleBuffered:=true;
  lToolPanels:=TList.Create; lToolMenuItems:=TList.Create;
//  pc:=TsPageControl.Create(Self); pc.Parent:=Self; pc.ShowCloseBtns:=true;
  CreateToolPanels; fm:=GetParentForm(Self); for i:=lToolPanels.Count-1downto 0do if lToolPanels[i]=nil then lToolPanels.Delete(i);
  if(lToolPanels.Count<>0)and(fm<>nil)then begin
    if fm.Menu=nil then begin fm.Menu:=TMainMenu.Create(Self); fm.Menu.Tag:=iCreated; end;
    mm:=fm.Menu; miToolPanels:=nil;
    for i:=0to mm.Items.Count-1do if AnsiSameText(sToolPanels,mm.Items[i].Caption)then begin miToolPanels:=mm.Items[i]; break; end;
    if miToolPanels=nil then begin miToolPanels:=TMenuItem.Create(Self); miToolPanels.Caption:=sToolPanels; miToolPanels.Tag:=iCreated; end;
    if(SkinData.SkinManager<>nil)then begin mi:=TMenuItem.Create(Self); mi.Caption:='-Панели дерева-'; miToolPanels.Add(mi); end;
    for i:=0to lToolPanels.Count-1do begin wc:=TWinControl(lToolPanels[i]); if wc=nil then Continue;
      wc.Parent:=Self; wc.Align:=alTop;
//      if not(wc is TCustomToolPanel)or((wc is TCustomToolPanel)and(TCustomToolPanel(wc).CanClose))then begin
        pnl:=DoCreateClosePanel; pnl.Tag:=integer(lToolPanels[i]);
        pnl.Parent:=wc; pnl.Left:=wc.ClientWidth-pnl.Width-1;
//        if(miToolPanels<>nil)and(wc is TCustomToolPanel)then begin
          mi:=TMenuItem.Create(Self); {mi.Caption:=TCustomToolPanel(wc).Caption;} mi.OnClick:=_OnMenuToolClick;
          miToolPanels.Add(mi); mi.AutoCheck:=true; mi.Checked:=TWinControl(wc).Visible; mi.Tag:=integer(pnl); //integer(lToolPanels[i]);
          if(wc is TCustomToolPanel)then TCustomToolPanel(wc).OnPropChanged:=_OnPropToolChanged;
          lToolMenuItems.Add(mi);
//        end;
//      end;
    end;
    if miToolPanels.Tag=iCreated then mm.Items.Add(miToolPanels);
  end;
 (* if miToolPanels<>nil then begin
{    mbr:=TMenuItemBar.Create(Self); mbr.Align:=alTop;
    mbr.MenuItem:=miToolPanels; mbr.Visible:=miToolPanels.Count<>0;}
{//    GetParentForm(Self).Show;
    wh:=GetParentForm(Self).Handle;
    AppendMenu(GetSystemMenu(wh,false),MF_SEPARATOR,0,'');
    AppendMenu(GetSystemMenu(wh,false),MF_STRING,2222,'Delphi World - это КРУТО!');
    AppendMenu(GetSystemMenu(wh,false),
      MF_POPUP,miToolPanels.Handle,PAnsiChar(miToolPanels.Caption));}
  end;*)
  UpdateToolStates;
end;

procedure TCustomTreeExplorer.CreateToolPanels; begin
  pnlFilter:=TFilterToolPanel.Create(Self); lToolPanels.Add(pnlFilter);
  pnlHeader:=TTreeHeaderToolPanel.Create(Self); lToolPanels.Add(pnlHeader); pnlHeader.Hide;
  pnlFilter.OnMouseDown:=_OnMouseDown; pnlHeader.OnMouseDown:=_OnMouseDown;
end;

destructor TCustomTreeExplorer.Destroy;
begin FreeAndNil(lToolMenuItems); FreeAndNil(lToolPanels); inherited; end;

function TCustomTreeExplorer.DoCreateClosePanel:TsPanel; var bmp:TBitmap; btn:TsSpeedButton; begin
  Result:=TsPanel.Create(Self);
  with Result do begin Anchors:=[akRight,akTop]; BevelOuter:=bvNone; Width:=11; Height:=11; DoubleBuffered:=true; end;
  btn:=TsSpeedButton.Create(Self);
  with btn do begin Parent:=Result; Flat:=true; Width:=11; Height:=11; TextAlignment:=taLeftJustify; Anchors:=[akRight,akTop];
    bmp:=Graphics_CreateBitmap(sCloseButton); Glyph:=bmp; bmp.Free; Left:=0; Top:=0;
    OnClick:=_OnCloseToolClick;
  end;
end;

procedure TCustomTreeExplorer.DoLoadFromString(const s:AnsiString);
begin

end;

function TCustomTreeExplorer.DoSaveToString:AnsiString;
begin

end;

procedure TCustomTreeExplorer.LoadFromStream(_s:TStream); var iPos,i,j:integer; s,s1:AnsiString; p:PUTF8Char;
  rToolsData:TrToolsData; utf:RawUTF8; Values:TPUtf8CharDynArray;
begin
  if fTree<>nil then begin iPos:=_s.Position;
    SetLength(s,_s.Size-_s.Position);
    _s.Read(s[1],Length(s)); _s.Position:=iPos;
    if s<>''then begin utf:=StringToUTF8(s); SetLength(rToolsData._arrToolsData,0);
      p:=JSONDecode(PUTF8Char(utf),['ClassName','TreeHeaderState','TreeNodesState'],Values,true); if p=nil then exit;
      s1:=UTF8DecodeToString(Values[0],StrLen(Values[0])); if not AnsiSameText(s1,ClassName)then exit;
      s1:=UTF8DecodeToString(Values[1],StrLen(Values[1])); fTree.HeaderState:=s1;
      s1:=UTF8DecodeToString(Values[2],StrLen(Values[2])); fTree.NodesState:=s1;
      i:=integer(p)-integer(PUTF8Char(@utf[1]));
      utf:=StringToUTF8(s); SetLength(utf,i); s:=UTF8ToString(utf);
      i:=Length(s); if(i<>0)and(s[i]='{')then dec(i);
      _s.Position:=_s.Position+i;
    end;
  end;
  iPos:=_s.Position;
  SetLength(s,_s.Size-_s.Position);
  _s.Read(s[1],Length(s)); _s.Position:=iPos;
  if s<>''then begin utf:=StringToUTF8(s); SetLength(rToolsData._arrToolsData,0);
    p:=RecordLoadJSON(rToolsData,PUTF8Char(@utf[1]),TypeInfo(TrToolsData));
    if Length(rToolsData._arrToolsData)<>0then for i:=0to High(rToolsData._arrToolsData)do begin
      for j:=0to lToolPanels.Count-1do if(TWinControl(lToolPanels[j])is TCustomToolPanel)then
        if AnsiSameText(TCustomToolPanel(lToolPanels[j]).Caption,rToolsData._arrToolsData[i]._sToolCaption)
          and AnsiSameText(TCustomToolPanel(lToolPanels[j]).ClassName,rToolsData._arrToolsData[i]._sClassName)then begin
            s1:=rToolsData._arrToolsData[i]._vToolState; s1:=UTF8ToString(s1);
            TCustomToolPanel(lToolPanels[j]).DoLoadFromString(s1);
          end;
    end;
    if p<>nil then begin i:=integer(p)-integer(PUTF8Char(@utf[1]));
      utf:=StringToUTF8(s); SetLength(utf,i); s:=UTF8ToString(utf);
      i:=Length(s); if(i<>0)and(s[i]='{')then dec(i);
      _s.Position:=_s.Position+i;
    end;
  end;
end;

procedure TCustomTreeExplorer.SaveToStream(_s:TStream);
  var i,cnt:integer; rToolsData:TrToolsData; {ls:TMemoryStream;} s,s1:AnsiString;
begin
  {ls:=nil;} SetLength(rToolsData._arrToolsData,0); rToolsData._sClassName:=ClassName;
  {try ls:=TMemoryStream.Create;}
    for i:=0to lToolPanels.Count-1do if(TWinControl(lToolPanels[i])is TCustomToolPanel)then begin {ls.Clear;}
      cnt:=Length(rToolsData._arrToolsData); SetLength(rToolsData._arrToolsData,cnt+1);
      rToolsData._arrToolsData[cnt]._vToolState:='';
      rToolsData._arrToolsData[cnt]._sClassName:=TCustomToolPanel(lToolPanels[i]).ClassName;
      rToolsData._arrToolsData[cnt]._sToolCaption:=TCustomToolPanel(lToolPanels[i]).Caption;
      rToolsData._arrToolsData[cnt]._vToolState:=_JsonFast(TCustomToolPanel(lToolPanels[i]).DoSaveToString);
{      TCustomToolPanel(lToolPanels[i]).SaveToStream(ls);
      ls.Position:=0; SetLength(s,ls.Size); ls.Read(s[1],ls.Size);
      rToolsData._arrToolsData[cnt]._sToolState:=s;}
    end;
  {finally ls.Free; end;}
//  s:=UTF8ToString(RecordSaveJSON(rToolsData,TypeInfo(TrToolsData))); так объекты не сохраняются почему-то
  s:='{}'; s1:=s; if fTree<>nil then begin s:=fTree.HeaderState; s1:=fTree.NodesState; end;
  s:=JSONEncode('{ClassName:?,TreeHeaderState:?,TreeNodesState:?}',[],[ClassName,_JsonFast(s),_JsonFast(s1)]);
  s:=#13#10+JSONReformat(s); _s.Write(s[1],Length(s));

  s:='{"ClassName": "'+ClassName+'","ToolsData": [';
  for i:=0to Length(rToolsData._arrToolsData)-1do with rToolsData._arrToolsData[i]do begin
    s1:=JSONEncode('{ClassName:?,ToolCaption:?,ToolState:?}',[],[_sClassName,_sToolCaption,_vToolState]);
    s:=s+s1; if i<>High(rToolsData._arrToolsData)then s:=s+',';
  end;
  s:=s+']}';
  s:=#13#10+JSONReformat(s); _s.Write(s[1],Length(s));
end;

procedure TCustomTreeExplorer.SetTree(const tv:TBaseStringTree); begin
  if fTree<>tv then begin
    if fTree<>nil then begin fTree.OnChange:=nil; fTree.OnStructureChange:=nil; end;
    fTree:=tv;
    if fTree<>nil then begin fTree.OnChange:=_OnChanged; fTree.OnStructureChange:=_OnStructureChanged; end;
    pnlFilter.TreeView:=tv; pnlHeader.TreeView:=tv;
  end;
end;

type TLControl=class(TControl);
procedure TCustomTreeExplorer.UpdateToolStates; var i:integer; l:TList; begin l:=nil;
  SendMessage(Handle,WM_SETREDRAW,0,0);
  try l:=TList.Create;
    for i:=0to lToolPanels.Count-1do
      if TWinControl(lToolPanels[i]).Align=alTop then l.Add(lToolPanels[i]);
    for i:=0to l.Count-1do with TWinControl(l[i])do
      if i=0then Top:=0 else Top:=TWinControl(l[i-1]).Top+TWinControl(l[i-1]).Height+2;
    for i:=0to lToolMenuItems.Count-1do begin
      TMenuItem(lToolMenuItems[i]).Checked:=TWinControl(lToolPanels[i]).Visible;
      if(TWinControl(lToolPanels[i])is TCustomToolPanel)then begin
        TMenuItem(lToolMenuItems[i]).Enabled:=TCustomToolPanel(lToolPanels[i]).CanClose;
        TsPanel(TMenuItem(lToolMenuItems[i]).Tag).Visible:=TMenuItem(lToolMenuItems[i]).Enabled;
        TMenuItem(lToolMenuItems[i]).Caption:=TCustomToolPanel(lToolPanels[i]).Caption;
      end else TMenuItem(lToolMenuItems[i]).Caption:=TLControl(lToolPanels[i]).Caption;
    end;
  finally l.Free; end;
  SendMessage(Handle,WM_SETREDRAW,1,0);
  RedrawWindow(Handle,nil,0,RDW_ERASE+RDW_FRAME+RDW_INVALIDATE+RDW_ALLCHILDREN);
end;

procedure TCustomTreeExplorer._OnChanged(Sender:TBaseVirtualTree; pn:PVirtualNode); begin
  pnlFilter.NodePath:=TBaseStringTree(Sender).DoGetNodePath(pn);
  pnlFilter.UpdateStates; pnlHeader.UpdateStates;
end;

procedure TCustomTreeExplorer._OnCloseToolClick(Sender:TObject); var pnl:TsPanel; begin
  if(Sender is TsSpeedButton)and(TsSpeedButton(Sender).Parent is TsPanel)then begin
    pnl:=TsPanel(TsSpeedButton(Sender).Parent);
    if lToolPanels.IndexOf(pointer(pnl.Tag))<>-1then TWinControl(pnl.Tag).Hide;
  end;
end;

procedure TCustomTreeExplorer._OnMenuToolClick(Sender:TObject); var mi:TMenuItem; begin
  if(Sender is TMenuItem){and(TMenuItem(Sender).Parent=miToolPanels)}then begin
    mi:=TMenuItem(Sender);
    if lToolPanels.IndexOf(pointer(TsPanel(mi.Tag).Tag))<>-1then begin
      if mi.Checked then TWinControl(TsPanel(mi.Tag).Tag).Show else TWinControl(TsPanel(mi.Tag).Tag).Hide;
      UpdateToolStates; // для не TCustomToolPanel
    end;
  end;
end;

procedure TCustomTreeExplorer._OnMouseDown(Sender:TObject; btn:TMouseButton; setShift:TShiftState; x,y:integer);
begin if@OnMouseDown<>nil then OnMouseDown(Sender,btn,setShift,x,y); end;

procedure TCustomTreeExplorer._OnPropToolChanged(Sender:TObject);
begin UpdateToolStates; end;

procedure TCustomTreeExplorer._OnStructureChanged(Sender:TBaseVirtualTree; pn:PVirtualNode; Reason:TChangeReason);
begin pnlFilter.UpdateNodesCount; end;

{ THostConnectionToolPanel }

constructor THostConnectionToolPanel.Create(aOwner:TComponent); var bmp:TBitmap; begin inherited;
  Caption:='Панель соединения'; Height:=50; fbCanClose:=false;
  lblCaption:=TsLabel.Create(Self);
  with lblCaption do begin Parent:=Self; Caption:='Клиент чего-то'; Left:=iOffs; Top:=6; Font.Style:=[fsBold]; DoubleBuffered:=true; OnMouseDown:=_OnMouseDown; end;
  edtHost:=TsEdit.Create(Self);
  with edtHost do begin Parent:=Self; BoundLabel.Active:=true; BoundLabel.Caption:='Компьютер:'; BoundLabel.FTheLabel.AutoSize:=true;
    Left:=iOffs+BoundLabel.FTheLabel.Width+iOffs; Top:={14}24;
    Hint:='адрес компьютера в сети '; DoubleBuffered:=true;
    BoundLabel.FTheLabel.OnMouseDown:=_OnMouseDown; 
  end;
  btnConnect:=TsBitBtn.Create(Self);
  with btnConnect do begin Parent:=Self; OnClick:=_OnClick; Caption:='Соединиться';
    bmp:=Graphics_CreateBitmap(sConnect); Glyph:=bmp; bmp.Free;
    Left:=edtHost.Left+edtHost.Width+2*iOffs; Top:=6; Width:=135; Height:=38; Hint:='соединиться с сервером'; DoubleBuffered:=true;
  end;
  btnDisconnect:=TsBitBtn.Create(Self);
  with btnDisconnect do begin Parent:=Self; OnClick:=_OnClick; Caption:='Разъединиться';
    bmp:=Graphics_CreateBitmap(sDisconnect); Glyph:=bmp; bmp.Free;
    Left:=btnConnect.Left; Top:=6; Width:=135; Height:=38; Hint:='разорвать связь с сервером'; DoubleBuffered:=true;
  end;
  lblExInfo:=TsLabel.Create(Self);
  with lblExInfo do begin Parent:=Self; Left:=btnConnect.Left+btnConnect.Width+2*iOffs; Top:=lblCaption.Top+iOffs; DoubleBuffered:=true; OnMouseDown:=_OnMouseDown; end;
  lblConnectionInfo:=TsLabel.Create(Self);
  with lblConnectionInfo do begin Parent:=Self; Left:=btnConnect.Left+btnConnect.Width+2*iOffs; Top:=edtHost.Top+iOffs; DoubleBuffered:=true; OnMouseDown:=_OnMouseDown; end;
  btnDisconnect.Hide;
end;

procedure THostConnectionToolPanel.DoLoadFromString(const s:AnsiString); var Values:TPUtf8CharDynArray; begin
  inherited DoLoadFromString(s);
  JSONDecode(PUTF8Char(StringToUTF8(s)),['Host'],Values);
  if Length(Values)<>0then edtHost.Text:=UTF8DecodeToString(Values[0],StrLen(Values[0]));
end;

function THostConnectionToolPanel.DoSaveToString:AnsiString; var s:AnsiString; begin
  Result:=inherited DoSaveToString; SetLength(Result,Length(Result)-1);
  s:=JSONEncode(['Host',edtHost.Text]); s[1]:=',';
  Result:=Result+s;
end;

{ TUpdateRateToolPanel }

constructor TUpdateRateToolPanel.Create(aOwner:TComponent); begin inherited;
  Caption:='Панель автообновления';
  chkAutoRefresh:=TsCheckBox.Create(Self);
  with chkAutoRefresh do begin Parent:=Self; Left:=6; Top:=6; Checked:=true; DoubleBuffered:=true;
    Caption:='Автообновление:'; Hint:='время обновления в миллисекундах'; OnClick:=_OnClick;
  end;
  edtRefreshTime:=TsEdit.Create(Self);
  with edtRefreshTime do begin Parent:=Self; Left:=120; Width:=Canvas.TextWidth('9999')+16; DoubleBuffered:=true;
    Top:=chkAutoRefresh.Top-1; Text:='1000'; Hint:='время автообновления в миллисекундах'; OnChange:=_OnClick;
  end;
  lblRefreshTime:=TsLabel.Create(Self);
  with lblRefreshTime do begin Parent:=Self; Left:=edtRefreshTime.Left+edtRefreshTime.Width+4;
    Top:=edtRefreshTime.Top+3; Hint:='реальное время обновления в миллисекундах'; Caption:=''; DoubleBuffered:=true;
    OnMouseDown:=_OnMouseDown;
  end;
  ClientHeight:=edtRefreshTime.Top*2+edtRefreshTime.Height;
end;

procedure TUpdateRateToolPanel.DoLoadFromString(const s:AnsiString); var Values:TPUtf8CharDynArray; begin
  inherited DoLoadFromString(s);
  JSONDecode(PUTF8Char(StringToUTF8(s)),['AutoRefresh','RefreshTime'],Values);
  if Length(Values)<>0then begin
    chkAutoRefresh.Checked:=GetInteger(Values[0])<>0; _OnClick(chkAutoRefresh);
    edtRefreshTime.Text:=UTF8DecodeToString(Values[1],StrLen(Values[1])); // здесь _OnClick после присвоения будет вызван
  end;
end;

function TUpdateRateToolPanel.DoSaveToString:AnsiString; var s:AnsiString; begin
  Result:=inherited DoSaveToString; SetLength(Result,Length(Result)-1);
  s:=JSONEncode(['AutoRefresh',ord(chkAutoRefresh.Checked),'RefreshTime',edtRefreshTime.Text]); s[1]:=',';
  Result:=Result+s;
end;

{ TGroupedItemsToolPanel }

constructor TGroupedItemsToolPanel.Create(aOwner:TComponent); begin inherited;
  Caption:='Панель работы с тегами';
  il:=TsAlphaImageList.Create(Self); il.Width:=22; il.Height:=22;
  LoadBitmap(sRefresh,il); LoadBitmap(sClear,il);
  LoadBitmap(sGroupAdd,il); LoadBitmap(sGroupDel,il); LoadBitmap(sGroupUp,il); LoadBitmap(sGroupDown,il);
  LoadBitmap(sItemAdd,il); LoadBitmap(sItemDel,il); LoadBitmap(sItemUp,il); LoadBitmap(sItemDown,il);
  LoadBitmap(sRename,il); LoadBitmap(sOpen,il); LoadBitmap(sSave,il);
  tbr:=TsToolBar.Create(Self);
  with tbr do begin Parent:=Self; Flat:=true; Parent:=Self; Height:=32; Images:=il; DoubleBuffered:=true; end;
  btnSave:=TToolButton.Create(tbr);
  with btnSave do begin ImageIndex:=12; OnClick:=_OnClick; Parent:=tbr; Hint:='сохранить пространство тегов'; end;
  btnOpen:=TToolButton.Create(tbr);
  with btnOpen do begin ImageIndex:=11; OnClick:=_OnClick; Parent:=tbr; Hint:='открыть пространство тегов'; end;
  with TToolButton.Create(tbr)do begin Style:=tbsSeparator; Parent:=tbr; Width:=8; end;
  btnRename:=TToolButton.Create(tbr);
  with btnRename do begin ImageIndex:=10; OnClick:=_OnClick; Parent:=tbr; Hint:='переименовать группу или тег'; end;
  with TToolButton.Create(tbr)do begin Style:=tbsSeparator; Parent:=tbr; Width:=8; end;
  btnItemDown:=TToolButton.Create(tbr);
  with btnItemDown do begin ImageIndex:=9; OnClick:=_OnClick; Parent:=tbr; Hint:='переместить тег вниз'; end;
  btnItemUp:=TToolButton.Create(tbr);
  with btnItemUp do begin ImageIndex:=8; OnClick:=_OnClick; Parent:=tbr; Hint:='переместить тег вверх'; end;
  with TToolButton.Create(tbr)do begin Style:=tbsSeparator; Parent:=tbr; Width:=8; end;
  btnItemDel:=TToolButton.Create(tbr);
  with btnItemDel do begin ImageIndex:=7; OnClick:=_OnClick; Parent:=tbr; Hint:='удалить тег'; end;
  btnItemAdd:=TToolButton.Create(tbr);
  with btnItemAdd do begin ImageIndex:=6; OnClick:=_OnClick; Parent:=tbr; Hint:='добавить тег'; end;
  with TToolButton.Create(tbr)do begin Style:=tbsSeparator; Parent:=tbr; Width:=8; end;
  btnGroupDown:=TToolButton.Create(tbr);
  with btnGroupDown do begin ImageIndex:=5; OnClick:=_OnClick; Parent:=tbr; Hint:='переместить группу вниз'; end;
  btnGroupUp:=TToolButton.Create(tbr);
  with btnGroupUp do begin ImageIndex:=4; OnClick:=_OnClick; Parent:=tbr; Hint:='переместить группу вверх'; end;
  with TToolButton.Create(tbr)do begin Style:=tbsSeparator; Parent:=tbr; Width:=8; end;
  btnGroupDel:=TToolButton.Create(tbr);
  with btnGroupDel do begin ImageIndex:=3; OnClick:=_OnClick; Parent:=tbr; Hint:='удалить группу'; end;
  btnGroupAdd:=TToolButton.Create(tbr);
  with btnGroupAdd do begin ImageIndex:=2; OnClick:=_OnClick; Parent:=tbr; Hint:='добавить группу'; end;
  with TToolButton.Create(tbr)do begin Style:=tbsSeparator; Parent:=tbr; Width:=8; end;
  btnClear:=TToolButton.Create(tbr);
  with btnClear do begin ImageIndex:=1; OnClick:=_OnClick; Parent:=tbr; Hint:='очистить список тегов'; end;
  with TToolButton.Create(tbr)do begin Style:=tbsSeparator; Parent:=tbr; Width:=8; end;
  btnRefresh:=TToolButton.Create(tbr);
  with btnRefresh do begin ImageIndex:=0; OnClick:=_OnClick; Parent:=tbr; Hint:='обновить теги'; end;
  ClientHeight:=tbr.Height;
  od:=TsOpenDialog.Create(Self);
  with od do begin DefaultExt:='.tags.json'; Filter:='файлы тегов *.tags.json|*.tags.json';
    InitialDir:=ExtractFileDir(Application.ExeName); Title:='Открыть файл тегов';
  end;
  sd:=TsSaveDialog.Create(Self);
  with sd do begin DefaultExt:='.tags.json'; Filter:='файлы тегов *.tags.json|*.tags.json';
    InitialDir:=ExtractFileDir(Application.ExeName); Title:='Сохранить файл тегов';
  end;
end;

{ TPropertiesTree }

constructor TPropertiesTree.Create(aOwner:TComponent); begin inherited;
  Header.AutoSizeIndex:=1;
  with Header.Columns.Add do begin Width:=75; Text:='Свойство'; Options:=Options-[coAllowFocus{,coDraggable,coAllowClick}]; Style:=vsOwnerDraw; end;
  with Header.Columns.Add do begin Width:=150; Text:='Значение'; {Options:=Options-[coAllowFocus,coDraggable,coAllowClick];} Style:=vsOwnerDraw; end;
  NodeDataSize:=SizeOf(TrPropertiesTreeNodeData);
end;

procedure TPropertiesTree.DoCanEdit(pn:PVirtualNode; Column:TColumnIndex; var bAllowed:boolean); begin
  inherited; if(pn=nil)or(Column=ndxName)then exit;
  bAllowed:=true;
end;

procedure TPropertiesTree.DoFreeNode(pn:PVirtualNode); var pnd:PrPropertiesTreeNodeData; begin
  pnd:=GetNodeData(pn);
  if pnd<>nil then begin pnd^._sName:=''; pnd^._sValue:=''; end;
  inherited DoFreeNode(pn);  
end;

procedure TPropertiesTree.DoGetText(pn:PVirtualNode; Column:TColumnIndex; TextType:TVSTTextType; var Text:UnicodeString);
var pnd:PrPropertiesTreeNodeData;
begin inherited;
  pnd:=GetNodeData(pn);
  case Column of
    0: Text:=pnd^._sName;
    1: Text:=pnd^._sValue;
  end;
end;

{ TPropertiesEditor }

constructor TPropertiesEditor.Create(aOwner:TComponent); begin inherited;
  ftv:=TPropertiesTree.Create(Self); fTV.Align:=alClient; TreeView:=fTV;
end;

function TPropertiesEditor.GetAsText:AnsiString;
begin

end;

procedure TPropertiesEditor.SetAsText(const s:AnsiString); var v:variant; i:integer;
  pn:PVirtualNode; pnd:PrPropertiesTreeNodeData;
begin v:=_JsonFast({StringToUTF8(}s{)}); if fTV=nil then exit;
  try fTV.OnStructureChange:=nil; fTV.Clear;
    for i:=0to v._Count-1do begin pn:=fTV.AddChild(nil); pnd:=fTV.GetNodeData(pn);
      pnd^._sName:=v.Name(i); pnd^._sValue:=v.Value(i);
    end;
    fTV.Indent:=0;
    _OnStructureChanged(fTV,nil,crIgnore);
  finally fTV.OnStructureChange:=_OnStructureChanged; end;
end;

initialization
  GetLocaleFormatSettings(SysLocale.DefaultLCID,gfs);
  TTextWriter.RegisterCustomJSONSerializerFromText(TypeInfo(TrToolPanelInfo),__TrToolPanelInfo).Options:=[soReadIgnoreUnknownFields,soWriteHumanReadable];
  TTextWriter.RegisterCustomJSONSerializerFromText(TypeInfo(TrToolsData),__TrToolsData).Options:=[soReadIgnoreUnknownFields,soWriteHumanReadable];
  TTextWriter.RegisterCustomJSONSerializerFromText(TypeInfo(TrHeaderState),__TrHeaderState).Options:=[soReadIgnoreUnknownFields,soWriteHumanReadable];
  TTextWriter.RegisterCustomJSONSerializerFromText(TypeInfo(TrNodesState),__TrNodesState).Options:=[soReadIgnoreUnknownFields,soWriteHumanReadable];
{  TJSONSerializer.RegisterCustomSerializer(TCustomToolPanel,TCustomToolPanel.ClassReader,TCustomToolPanel.ClassWriter);}

end.
